/*======================================================================
                           GC()

Garbage collection entry-point.

This is a system- and compiler-dependent function which ensures that all
registers get pushed onto the stack. This is necessary since the GC-proper
GCSI() assumes that all GC roots are either located on the stack or in the
global variables.  The idea here is to declare enough "register" vars
that any other values in registers have to be flushed to the stack.
Then GCSI gets called with a pointer to something that is the top of
the stack ... or close enough.  The use of functions gd_dummy and
gc_dummy2 is to make it so the compiler can't optimize away the rxx
variables ... though the system would probably be better if they sat
in different files, so separate compilation would make interprocedural
optimization impossible.
======================================================================*/

#include "saclib.h"

static int gc_dummy(int i);
static int gc_dummy2(int r00,int r01,int r02,int r03,int r04,
		     int r05,int r06,int r07,int r08,int r09,
		     int r10,int r11,int r12,int r13,int r14,
		     int r15,int r16,int r17,int r18,int r19,
		     int r20,int r21,int r22,int r23,int r24,
		     int r25,int r26,int r27,int r28,int r29,
		     int r30,int r31);
void GC(void)
{

     Word top_of_stack;
     register int r00 = gc_dummy(0);
     register int r01 = gc_dummy(1);
     register int r02 = gc_dummy(2);
     register int r03 = gc_dummy(3);
     register int r04 = gc_dummy(4);
     register int r05 = gc_dummy(5);
     register int r06 = gc_dummy(6);
     register int r07 = gc_dummy(7);
     register int r08 = gc_dummy(8);
     register int r09 = gc_dummy(9);
     register int r10 = gc_dummy(10);
     register int r11 = gc_dummy(11);
     register int r12 = gc_dummy(12);
     register int r13 = gc_dummy(13);
     register int r14 = gc_dummy(14);
     register int r15 = gc_dummy(15);
     register int r16 = gc_dummy(16);
     register int r17 = gc_dummy(17);
     register int r18 = gc_dummy(18);
     register int r19 = gc_dummy(19);
     register int r20 = gc_dummy(20);
     register int r21 = gc_dummy(21);
     register int r22 = gc_dummy(22);
     register int r23 = gc_dummy(23);
     register int r24 = gc_dummy(24);
     register int r25 = gc_dummy(25);
     register int r26 = gc_dummy(26);
     register int r27 = gc_dummy(27);
     register int r28 = gc_dummy(28);
     register int r29 = gc_dummy(29);
     register int r30 = gc_dummy(30);
     register int r31 = gc_dummy(31);
     top_of_stack = gc_dummy2(r00,r01,r02,r03,r04,r05,r06,r07,r08,r09,
			      r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,
			      r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,
			      r30,r31);
     GCSI(sizeof(Word),(char *)&top_of_stack);
}


static int gc_dummy(int i)
{
  int k;
  return (int)&k & (9*i);
}

static int gc_dummy2(int r00,int r01,int r02,int r03,int r04,
		     int r05,int r06,int r07,int r08,int r09,
		     int r10,int r11,int r12,int r13,int r14,
		     int r15,int r16,int r17,int r18,int r19,
		     int r20,int r21,int r22,int r23,int r24,
		     int r25,int r26,int r27,int r28,int r29,
		     int r30,int r31)
{
  return
    r00+r01+r02+r03+r04+r05+r06+r07+r08+r09+
    r10+r11+r12+r13+r14+r15+r16+r17+r18+r19+
    r20+r21+r22+r23+r24+r25+r26+r27+r28+r29+
    r30+r31;
}
