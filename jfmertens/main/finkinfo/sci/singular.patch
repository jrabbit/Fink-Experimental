## PatchScript put here to escape the dreadfull fink indexing

### to complete '--no-same-permissions' :
chmod -R a+rX,u+w *
# and fix immediately remaining perms :
chmod a-x Singular/LIB/*.lib
#
for f in configure.in doc/{INSTALL_win.texi,Makefile.in} emacs/{Makefile.in,.emacs-singular} factory/{configure,GNUmakefile}.in \
 IntegerProgramming/Makefile.in libfac/{configure.in,test*.cc} Makefile.in Tst/regress.cmd \
 MP/{configure.in,{,MP{,T}/}Makefile.in,MPT/MPT.h,mpviewer/displaymp} omalloc/{configure,Makefile}.in \
 Singular/{configure.in,extra.cc,fereadl.c,feResource.cc,iplib.cc,Makefile.in,mod2.h.in,mod_raw.cc}
do cp -p $f $f.bak
done
#
# We can't just put -mdynamic-no-pic in the CXXFLAGS, and let it be overridden by an SFLAG -fPIC when building the .dl_o files,
# because then g++ complains when building the .dl_o files (opposite behaviour with the -mdynamic-no-pic implied by -fast) :
# "cc1plus: warning: -mdynamic-no-pic overrides -fpic or -fPIC" _ with ensuing breakdown by ld
#
# flags="-fast -faltivec"
# works _ but let us be more modest (and a bit better) :
# (the first series is there just because it wasn't clear they were included in -O3 in Apple's version)
# -fsched-spec-load gave very bad performance _ maybe removing the others too ? First try -fno-sched-spec_ was worse
##

# allow building with external NTL
sed -ri 's;AC_ARG_WITH\(MP;AC_ARG_ENABLE(NTL, \\\ \n \[    NTL                  NTL\]\)\nAC_ARG_WITH\(MP;g' configure.in
sed -ri 's;([\]) $;\1;' configure.in
#

### Getting control over installation paths ...
# In feResource.cc (note: apparently missing commas are added in second "-e" line, and in second expresion with S_UNAME) :
# and to install the .so files in /sw/lib/singular (FS policy...)
# (was basically hard-coded that they were in the same dir as the executable)
sed -ri \
-e '\,\%d/LIB;,d' -e 's,^((\s|\t)+)\"\$SINGULARPATH;\"\s*$,&\n\1\"\%r/share/singular/LIB;\"\n\1\"\%d/LIB;\",' \
-e 's/LIB\"$/LIB\",/' \
-e 's,d/\"S_UNAME\",b,' -e 's|d/\"S_UNAME|r/bin\",|' -e 's,r/doc/singular\.idx,d/singular\.idx,' \
-e "s,/html,/share/doc/${n}/html," -e 's,/info/singular\.hlp,/share/info/singular\.info,' \
-e "s,/examples,/share/doc/${n}/examples," -e 's,/netscape,/mozilla,' -e 's,\%b/xterm,/usr/X11R6/bin/xterm,' \
-e 's,\"\%b;\$PATH\",\"\$PATH\",' -e 's,\"\%r/emacs\",\"\%r/share/singular/emacs\",g' -e "s,\%b/\.\.,${p}," \
-e 's|SINGULAR_DEFAULT_DIR,|\"\%r/share/singular\",|' \
-e '/25/i\
#ifdef HAVE_DYNAMIC_LOADING\
static feResourceConfig_s feResourceConfigs[26] =\
#else' \
 -e '/25/a\
#endif' \
  -e '/BinDir/i\
#ifdef HAVE_DYNAMIC_LOADING\
  \{\"SoDir\",\tLLL,\tfeResDir,\t\"SINGULAR_SO_DIR\",\t\"%r/lib/singular\",\t\"\"\},\
#endif' Singular/feResource.cc
sed -ri -e "/SoDir/s,LLL,'L'," Singular/feResource.cc
sed -ri -e "s,'b',bbb," Singular/mod_raw.cc
sed -ri -e '/bbb/i\
#ifdef HAVE_DYNAMIC_LOADING\
  const char* bin_dir = feGetResource(LLL);\
#else' \
  -e '/bbb/a\
#endif' Singular/mod_raw.cc
sed -ri -e "s,bbb,'b'," -e "s,LLL,'L'," Singular/mod_raw.cc
# Removing hard-coded /usr/local...
perl -pi -e "s,/usr/local/bin/,,g; s,\$HOME/bin/\$MP_ARCH,${p}/bin," MP/mpviewer/displaymp
perl -pi -e 's,/usr/local,\${prefix}/share/singular/localdir,' {,doc/}Makefile.in
### Don't hardcode path, use relative path :
perl -pi -e 's,\${LN_S} \${SINGULAR},\${LN_S} Singular\-\${SINGULAR_VERSION},' Singular/Makefile.in
### LIB must be copied to install-dir _ build-dir will disappear
perl -pi -e 's,\${LN_S} `pwd`/,cp -pR ,' Singular/Makefile.in
# Same in doc, for html and examples :
perl -pi -e 's,ln -s `pwd`/,cp -pR ,' doc/Makefile.in

### Misc
sed -ri 's;PNONY;PHONY;' MP/Makefile.in
## The configure script forces with_track_fl=yes unless with_track_return=no ...
## Check if this is really needed :
sed -ri '/AC_MSG_RESULT\(\$with_track_fl\)/i\
with_track_fl=no' omalloc/configure.in
## A rotten test : CPPFLAGS are set WITHIN the c file _ cf in the configure script :
###   cat > conftest.$ac_ext <<EOF
### #line 2756 "configure"
### #include "confdefs.h"
### #include "values.h" ,
###               CPPFLAGS="-I. ${CPPFLAGS}"
### EOF
perl -pi -e 's/AC_TRY_CPP\( #include "values\.h" ,//g; s/CPPFLAGS="\-I\. \${CPPFLAGS}",//g; s/echo "\*\*\* no values\.h";exit\)//g' MP/configure.in
# And to make values.h found (eg in gcc -fPIC -I. -I%p/src/singular-2.04-1/ppcMac-darwin/include -DHAVE_CONFIG_H -c MP_Env.c _ in MP/MP)
ln -s ../values.h MP/MP
# it is MP_Memory.c
perl -pi -e 's/ Memory\.c/ MP_Memory\.c/g' MP/MP/Makefile.in
# clearer with a space
perl -pi -e 's/#include"MP.h"/#include "MP.h"/g' MP/MPT/MPT.h
## stdlib.h shouldn't be a target _ no rule to make it... (correction no longer needed for this specific build, but still...) :
perl -pi -e 's/ \${OM_MALLOC_HEADER}//g' omalloc/Makefile.in
## "--with-malloc=system" breaks down in MP, since there it is "--with-malloc=HEADER"
## Thus patch the configure script to ignore the '--with-malloc=system, since the header we need is the default stdlib.h :
perl -pi -e 's/"\${with_malloc\+set}" = set/0 = 1/g' MP/configure.in
## cerr etc undefined in QuickTest.c etc...
sed -i -e '1i\
#include <iostream\.h>' libfac/test*.cc
## We typically also want -DNDEBUG when setting the CXXFLAGS...
sed -ri -e '/NDEBUG/,+2s|^fi|&\nif test "$with_debug" \!= yes; then\n  AC_DEFINE(NDEBUG)\nfi|' libfac/configure.in
## doesn't build correctly with bison-1.875 and GCC-3.3 :
perl -pi -e 's,= bison,= /usr/bin/bison,g' Singular/Makefile.in
## The var $ac_cv_with_readline appears nowhere else in the build tree _ only at 1 place in configure(.in)
# Everywhere else it is 'with_readline' : seems fixed in 2.05
#perl -pi -e 's/ac_cv_with_readline/with_readline/g' Singular/configure.in
## line 1078 gave an error (not sure the fix is correct) : seems fixed in 2.05
# iplib.cc: In function `BOOLEAN load_modules(char*, char*, char)':
# iplib.cc:1078: error: could not convert `&token' to `int&'
# ipshell.h:37: error: in passing argument 2 of `int IsCmd(char*, int&)'
# perl -pi -e 's/\(IsCmd\(plib, \&token\)\)/\(IsCmd\(plib, token\)\)/g' Singular/iplib.cc
### new problem in 2.05 : HAVE_NAMESPACES leads to error
perl -pi -e 's,#   define HAVE_NAMESPACES 1,/\* #   define HAVE_NAMESPACES 1 \*/,g' Singular/mod2.h.in
### w/o the next one, system("sh",whatever) always returns -1 instead of 0
### (with perror inserted at the following place showing 'No child processes') :
sed -ri '/strcmp\(sys_cmd,\"sh\"\)/,+13 {
s/MWERKS__/MWERKS__\n signal\(SIGCHLD, \(void \(\*\)\(int\)\)SIG_DFL\);/
s/\#endif/signal\(SIGCHLD, \(void \(\*\)\(int\)\)SIG_IGN\);\n \#endif/
}' Singular/extra.cc
### The space in -I . seems to work, but I feel more comfortable w/o it ...
perl -pi -e 's,\-I \.,\-I\.,g' IntegerProgramming/Makefile.in
### @ifclear needs a name _ the guess below is hopefully correct...
perl -pi -e 's,^\@ifclear$,\@ifclear singularmanual,' doc/INSTALL_win.texi
## There is no ../GPL
sed -i -e /GPL/d doc/Makefile.in
### singular.hlp is installed (by doc/Makefile) in ${prefix}/info
perl -pi -e 's,/doc,/info,g' emacs/Makefile.in
### and Singular/Makefile is not under $prefix
perl -pi -e 's,\$\{prefix\}/Singular/Makefile,\.\./Singular/Makefile,g' emacs/Makefile.in
### emacs/lib.pl expects to find libparse and LIB in "{prefix}/Singular" while they were installed
### in ${bindir} and in ${prefix} resp ... The default in lib.pl is OK (except possibly for standalone build of the emacs-dir)
perl -pi -e 's,\-s \$\{singulardir\} ,,'  emacs/Makefile.in
## We put the .el files in %p/share/emacs/site-lisp (and xemacs/site-lisp):
perl -pi -e 's,\-file \(.*\"\)\)$, "singular"\),g' emacs/.emacs-singular
### Let Tst-All also run the tests in "Buch"
sed -ri -e 's,Tst-Short Tst-Long,& Tst-Buch,' -e '/Tst-Old:/i\
Tst-Buch: \$\{SINGULAR\} Tst/Buch/buch.lst Tst/regress.cmd\
\t${PERL} Tst/regress.cmd -r -s \$\{SINGULAR\} Tst/Buch/buch.lst\n' Makefile.in
### This machine is too fast .. :
sed -ri 's,ticks\-per\-sec=100,ticks-per-sec=500,' Tst/regress.cmd

### libm is libSystem, and is always searched _ but should appear last in the search list if at all:
perl -pi -e 's/\-lm //g' Singular/Makefile.in
perl -pi -e 's/AC_CHECK_LIB\(m, atof\)/if test \"\$ac_cv_singuname\" \!= ppcMac-darwin; then\nAC_CHECK_LIB\(m, atof\)\nfi/g' Singular/configure.in
###

### Readline
# To get the correct answer :
sed -ri 's,AC_MSG_RESULT\(\$ac_cv_have_readline\),AC_MSG_RESULT\(\$ac_cv_header_readline_readline_h_ok\),' Singular/configure.in
# And the else clause there is meaningless _ trying to make something sensible :
sed -ri '/AC_MSG_RESULT\(\$ac_cv_header_readline_readline_h_ok\)/,+3{ /else/d
s,\"yes\",&\n  else\n    ac_cv_have_readline=\"no\", }' Singular/configure.in
## We have anyway to give (next point) the full path to lreadline, when "--with readline=dynamic",
# so we don't need the LOAD_COMMANDS for it, and things are slightly faster then :
sed -ri -e '/HAVE_DYN_RL/a\
    LIBS=`echo -n \$LIBS | sed "s,-lreadline ,,"`' Singular/configure.in
## We must give the full path (even when the LOAD_COMMANDS include \"${p}/lib/libreadline\.4\.dylib\")
# _ not worthwhile to re-set just for this the DYLD_LIBRARY_PATH system-wide to something sensible
# (eg., {~,/usr/local,%p,/usr/X11R6,/usr,/}/lib ) _ . Further add the major version 4, to depend only on readline-shlibs.
perl -pi -e "s,\"libreadline\.so\"\);,\"${p}/lib/libreadline\.4\.dylib\"\);\n\tif (fe_rl_hdl==NULL) fe_rl_hdl=dynl_open(\"libreadline.so\");,g" Singular/fereadl.c
### adding a dylib suffix ...
perl -pi -e 's/{ "",/{ "", "\.dylib",/g' Singular/iplib.cc
###

### dynamic loading
# how to do dynamic loading (1)
perl -pi -e 's,#if defined\(ix86_Linux\),#if defined\(ppcMac_darwin\)
#define HAVE_ELF_SYSTEM
#endif\n
#if defined\(ix86_Linux\),g' Singular/mod_raw.cc
# how to do dynamic loading (2)
# And add " -twolevel_namespace_hints" to -bundle ??
perl -pi -e "s|ac_cv_singuname\" in|ac_cv_singuname\" in
\tppcMac\-darwin\)
\t  AC_CHECK_LIB\(dl, dlopen\)
\t  if test \"TST\" = yes; then
\t\tLD_DYN_FLAGS=\"\"
\t\tSFLAGS=\"\-DPIC \-mno-dynamic-no-pic -fPIC\"
\t\tSLDFLAGS=\"-fPIC -fno-objc-exceptions -fno-rtti -fno-exceptions \-bundle \-bundle_loader Singular\"
\t\tLD=g\+\+\n\t\tac_lib_dl=yes
\t  fi
\t;;|g" Singular/configure.in
perl -pi -e 's|TST|\$ac_cv_lib_dl_dlopen|g' Singular/configure.in
if ${noopt} ; then perl -pi -e 's, \-fno\-rtti \-fno\-exceptions,,g' Singular/configure.in ; fi

# The modules (*.so) must be linked with -bundle_loader in the presence of Singular
# (else execution-time error in doc/examples/watchdog:
## > malloc[27548]: Deallocation of a pointer not malloced: 0x304154; This could be a double free(), or free() called
## > with the middle of an allocated block; Try setting environment variable MallocHelp to see tools to help debug
# ). Just changing the build-order suffices (by laziness we put the dep on Singular in the .dl_o targets rather than the
# .so targets, since it seems inconvenient to dipense with "$^" in mpsr.so and dbmsr.so) :
### # (note that $DL_LIBS is empty when doing a static build)
perl -pi -e 's, \$\(DL_LIBS\)$,,' Singular/Makefile.in
perl -pi -e 's,SING_EXEC\),$& \$\(DL_LIBS\),,' Singular/Makefile.in
# To fully link mpsr.so at build-time we need to add -lgmp at the end of the MP_LIBS :
sed -ri -e 's,^dnl MP_LIBS=\$\{LIBS\}$,MP_LIBS=\"\-lgmp\",' Singular/configure.in
# and same problem with p_Procs_FieldQ.so (needs __gmpz_init_set )
# (we could just add -lgmp for all, but then otool -L would show fake deps for the other p_Procs_Field*.so) :
sed -ri \
-e '/\%\.dl_o \:/s/$/ \$\(SING_EXEC\)/' -e '/^p_Procs_\%\.so\:/,+1s/\^/\</' \
-e 's/^p_Procs_\%\.so\:/p_Procs_FieldQ\.so\: p_Procs_Lib_FieldQ\.dl_o\n\t\$\(LD\) \$\{SLDFLAGS\} \-o \$\@ \$\< \-lgmp\n\n&/' \
Singular/Makefile.in


# Replace (temporarily ?) -w flags by $warnflags
# We take the opportunity at the same time to get here a separate handle on the CFLAGS in each dir
# We get rid at the same time of the '-g' flags, in order to be able to grep for %p/src in binary files
# w/o false alarms.
# We need -fPIC, hence $sflags, in MP (maybe just in MP/MP ??
#  msg was ".../libMP.a(MP_Put.o) has local relocation entries in non-writable section (__TEXT,__text)")
sed -ri -e '/d \$\{with_extra_cflags\}"$/,+2{ /else/,+1d }' MP/configure.in
if ! ${noopt} ; then
  perl -pi -e 's/\@CFLAGS\@/\@CFLAGS\@ -fno-rtti -fno-exceptions -fno-implicit-templates/g' MP/MPT/Makefile.in
fi
perl -pi -e "s/\t\-w//g" factory/GNUmakefile.in
sed -ri -e 's;^temp_cflags=\$\{CXX;temp_flags=\$\{CXX;' Singular/configure.in
sed -ri -e "s/\-O2 *([$])/\$\{CXXFLAGS\} \$\{CXXTEMPLFLAGS\} \1/g" Singular/Makefile.in
sed -ri -e '/temp_flags$/,+2{ /else/,+1d }' Singular/configure.in
perl -pi -e "s/\@CXXFLAGS\@/\@CXXFLAGS\@ -fno-implicit-templates/g" IntegerProgramming/Makefile.in
####

### hdegree.cc _ apparently ~ line 651, corresponding to offset 0x74 in hZeroMult _
### leads to execution time errors with gcc3.3 and the default -O3 (and even with -O2) .
### We set thus a separate target up for hdegree.o, with ad hoc optimization flags _
### corresponding as closely as possible to the $flags used elsewhere: we add to -Os
### all flags we suspect might occur in -O2 or in -O3 and not in -Os, plus our previous $xtrflags ...
#### Also, in sparsemat.cc, -fnew-ra leads with cc1plus build 16640 to "internal compiler error". Thus we remove that flag there. 
if ! ${noopt} ; then
  sed -ri -e '/^version\.h:/i\
hdegree.o: hdegree.cc\
\t\$\{CXX\} \$\{CXXFLAGS\} \$\{CXXTEMPLFLAGS\} \$\{CPPFLAGS\} \$\{DEFS\} \-c \$\< \\\
\t -Os -falign-functions -falign-jumps -falign-loops -falign-labels -fschedule-insns -fschedule-insns2 \\\
\t -fregmove -finline-functions -frename-registers\n\
sparsmat.o: sparsmat.cc\
\t\$\{CXX\} \$\{CXXFLAGS\} -fno-new-ra \$\{CXXTEMPLFLAGS\} \$\{CPPFLAGS\} \$\{DEFS\} \-c \$\<\n' \
  Singular/Makefile.in
fi

# To enable the streamio switch :
if ${strio} ; then
  perl -pi -e "s,streamio=no,streamio=yes," factory/configure.in
  sed -ri -e '/AC_DEFINE\(SINGULAR\)/,+1{/AC_DEFINE\(NOSTREAMIO\)/d}' libfac/configure.in
fi

# Stripping
# We can't pass the stripping flags as additional LDFLAGS, since dead_stripping would make the
# conftests invalid. Thus we pass them "--with-stripflags='stripflags'", and add those in the Makefiles to the LDFLAGS.
sed -ri '/AC_INIT/a\
AC_ARG_WITH(stripflags, \\\
 [  --with-stripflags=flags   build with "flags" appended to\
                              LDLAGS given to the compiler])\n\
if test "\${with_stripflags+set}" = set; then\
  STRIPFLAGS="\${with_stripflags}"\
   else\
  STRIPFLAGS=""\
fi\
AC_SUBST(STRIPFLAGS)' {,Singular/}configure.in
sed -ri -e '/\= \@LDFLAGS\@/i\
STRIPFLAGS\t= \@STRIPFLAGS\@' \
        -e 's;\= \@LDFLAGS\@;& \$\{STRIPFLAGS\};' {IntegerProgramming,Singular}/Makefile.in
sed -ri -e 's;\@SLDFLAGS\@;& \$\{STRIPFLAGS\};' Singular/Makefile.in
# When building a dynamic kernel, singular itself cannot be stripped before the .so's are built.
# So we build a preliminary version, non-stripped, to build the .so's, and once those are built
# we build the real, stripped version of Singular.
echo __mh_execute_header>lst
sed -ri -e 's;-bundle_loader Singular;-bundle_loader Singular.fat;' \
   Singular/configure.in
sed -ri -e '/^mpsr\.so:/a\
\tfor sym in `nm mpsr_\*.dl_o|grep " T "\|cut -f3 -d" "\|sed -r "s,^_,,"\|xargs` ; \\\
\t    do if grep \$\$\{sym\} slInit_Dynamic.cc > /dev/null ; \\\
\t          then echo "_\$\$\{sym\}" ; \\\
\t       fi ; \\\
\t    done > ../lst' \
        -e '/^dbmsr\.so:/a\
\tnm sing_dbm.dl_o\|grep " T "\|cut -f3 -d" " > ../lst' \
        -e '/^p_Procs_(FieldQ|%)\.so:/a\
\tnm \$\<\|grep " T "\|cut -f3 -d" " > ../lst' \
 Singular/Makefile.in
sed -ri -e '/^Singular\$\{S_EXT\}/,+5s;\$\{LDFLAGS\};-L\$\{libdir\};' \
        -e 's,\$\(SING_EXEC\)$,Singular.fat,' -e 's,Singular\$\{S_EXT\},Singular.fat,' \
        -e '/^%.static/i\
Singular\$\{S_EXT\}: mod2.h Makefile version.h scanner.cc \$\{OBJS\} mmalloc.o \\\
\t iparith.o tesths.cc libparse.cc claptmpl.o mpsr_Tok.o \$\{DL_LIBS\}\
\techo __mh_execute_header > ../lst\
\tnm -gm \*.so 2>/dev/null\|grep "from executable"\|sed -r "s;external ;:;"\|cut -f2 -d":"\|cut -f1 -d" "\|sort -u >> ../lst\
\tnm -g p_Procs_Dynamic.o 2>/dev/null\|grep " T "\|cut -f3 -d" "\|grep "^_p"\|sort -u >> ../lst\
\t\$\{CXX\} \$\{CXXFLAGS\} \$\{CPPFLAGS\} \$\{CXXTEMPLFLAGS\} \$\{DEFS\} \\\
\t -o Singular\$\{S_EXT\} tesths.cc iparith.o mpsr_Tok.o claptmpl.o \\\
\t \$\{OBJS\} \$\{LDFLAGS\} \$\{LIBS\} -lomalloc_ndebug mmalloc.o\
\techo __mh_execute_header > ../lst\n' \
  Singular/Makefile.in

# Getting macaulay2 to build on this will be hard _ we'll first get an independent build
# of macaulay2 (using the same version of libfac and factory) _ Thus, commented out :
## build also tmpl_inst.o in libfac, for (possible) use by macaulay2 :
#sed -ri '/^libsingfac.a:/s,OBJ1,OBJ,'  libfac/Makefile.in

## For safety, after all those changes make sure to run 'make depend'
perl -pi -e 's,stamp\-h$,stamp\-h depend,g' omalloc/Makefile.in
perl -pi -e 's,Config\.h\.in$,Config\.h\.in depend,g' MP/MP/Makefile.in
perl -pi -e 's,^install:,install: depend,g' MP/MPT/Makefile.in
perl -pi -e 's,stamp\-h$,stamp\-h depend,g' Singular/Makefile.in


## Putting the changes into the configure scripts
dpkg --force-depends -r autoconf2.5
fink install autoconf
cd omalloc ; autoconf ; cd ..
cd MP ; autoconf ; cd ..
cd factory ; autoconf ; cd ..
cd libfac ; autoconf ; cd ..
cd Singular ; autoconf ; cd ..
autoconf
fink install autoconf2.5
