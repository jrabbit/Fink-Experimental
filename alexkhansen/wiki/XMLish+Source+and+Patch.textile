All the <code>*Source*</code>-related fields are a pain to parse, can lead to a messy .info.<pre><code>SourceFile: <<
  Source: http://whatever
  Rename: %n-%v.tar.gz
  MD5: whatever
<<
SourceFile2: <<
  Source: http://whatever
  Rename: %n-%v.tar.gz
  MD5: whatever
<<</code></pre>cluster all fields for a given source object. Easy to add new features (dmalloc wants stronger checksums) without making even more of a top-level fieldname mess. 

Easy to extend to patchfiles ("MD5 for patchfiles" is a longstanding request).<pre><code>PatchFile: <<
  Source: foo.patch
  MD5: whatever
<<
PatchFile2: <<
  Source: foo-ssl.patch
  MD5: whatever
<<</code></pre>The full path to each file would be available as a %-exp and <code>%a</code> would be abolished. That way only files that have passed the MD5 check would be usable.

.h2 Extensions

* _vasi:_
It would be nice to have a patch folder per package rather than one monster patch.
** _dmacks:_
This is already possible (subdirs in %a), and I expect that way would continue to work correctly with the new syntax. One can already even cluster [.info and its .patch] in its own %n subdir.

* _drm_: (on "Feature Requests Tracker":http://sourceforge.net/support/tracker.php?aid=979713)
Make the application of the patches part of the default Patch field instead of an automatic action triggered by the mere presence of the patchfile field (whatever it's called).

* _vasi&dmacks_: (on #fink?)
Have a "Substitutions" field in the \PatchFile* that lists regexps to apply to the patchfile before applying it to the source tree. That way we can devise a clean solution to the pipefail that plagues the standard "sed ... | patch" approach.
