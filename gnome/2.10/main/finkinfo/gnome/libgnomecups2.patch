--- libgnomecups-0.2.0/libgnomecups/gnome-cups-request.c.orig	2005-04-21 14:57:37.000000000 -0700
+++ libgnomecups-0.2.0/libgnomecups/gnome-cups-request.c	2005-04-21 23:58:25.000000000 -0700
@@ -5,6 +5,7 @@
 
 #include <stdlib.h>
 #include <stdio.h>
+#include <errno.h>
 #include <cups/cups.h>
 #include <cups/language.h>
 #include <cups/http.h>
@@ -18,6 +19,184 @@
 #define MAX_REQUEST_THREADS 10
 #define STOP_UNUSED_THREADS_TIMEOUT 60
 #define CLOSE_UNUSED_CONNECTIONS_TIMEOUT 30
+static int				/* O - 0 if available, -1 if not */
+cups_local_auth(http_t *http)		/* I - HTTP connection to server */
+{
+#if defined(WIN32) || defined(__EMX__)
+ /*
+  * Currently WIN32 and OS-2 do not support the CUPS server...
+  */
+
+  return (-1);
+#else
+  int		pid;			/* Current process ID */
+  FILE		*fp;			/* Certificate file */
+  char		filename[1024],		/* Certificate filename */
+		certificate[33];	/* Certificate string */
+  const char	*root;			/* Server root directory */
+
+
+
+ /*
+  * See if we are accessing localhost...
+  */
+
+  if (ntohl(http->hostaddr.sin_addr.s_addr) != 0x7f000001 &&
+      strcasecmp(http->hostname, "localhost") != 0
+#ifdef HAVE_DOMAINSOCKETS
+      && http->hostaddr.sin_family != AF_LOCAL
+#endif /* HAVE_DOMAINSOCKETS */
+      )
+  {
+    return (-1);
+  }
+
+ /*
+  * Try opening a certificate file for this PID.  If that fails,
+  * try the root certificate...
+  */
+
+  if ((root = getenv("CUPS_SERVERROOT")) == NULL)
+    root = "/private/etc/cups";
+
+  pid = getpid();
+  snprintf(filename, sizeof(filename), "%s/certs/%d", root, pid);
+  if ((fp = fopen(filename, "r")) == NULL && pid > 0)
+  {
+
+    snprintf(filename, sizeof(filename), "%s/certs/0", root);
+    fp = fopen(filename, "r");
+  }
+
+  if (fp == NULL)
+  {
+    return (-1);
+  }
+
+ /*
+  * Read the certificate from the file...
+  */
+
+  fgets(certificate, sizeof(certificate), fp);
+  fclose(fp);
+
+
+  return (0);
+#endif /* WIN32 || __EMX__ */
+}
+
+/*
+ * 'cupsGetFd()' - Get a file from the server.
+ */
+ 
+http_status_t                           /* O - Status */
+cupsGetFd(http_t     *http,             /* I - HTTP connection to server */
+          const char *resource,         /* I - Resource name */
+          int        fd)                /* I - File descriptor */
+{
+  int           bytes;                  /* Number of bytes read */
+  char          buffer[8192];           /* Buffer for file */
+  http_status_t status;                 /* HTTP status from server */
+ 
+ 
+ /*
+  * Range check input...
+  */
+ 
+ 
+  if (!http || !resource || fd < 0)
+  {
+    if (http)
+      http->error = EINVAL;
+ 
+    return (HTTP_ERROR);
+  }
+ 
+ /*
+  * Then send GET requests to the HTTP server...
+  */
+ 
+  do
+  {
+    httpClearFields(http);
+/*    httpSetField(http, HTTP_FIELD_AUTHORIZATION, http->authstring);*/
+ 
+    if (httpGet(http, resource))
+    {
+      if (httpReconnect(http))
+      {
+        status = HTTP_ERROR;
+        break;
+      }
+      else
+      {
+        status = HTTP_UNAUTHORIZED;
+        continue;
+      }
+    }
+ 
+    while ((status = httpUpdate(http)) == HTTP_CONTINUE);
+ 
+    if (status == HTTP_UNAUTHORIZED)
+    {
+     /*
+      * Flush any error message...
+      */
+ 
+      httpFlush(http);
+ 
+     /*
+      * See if we can do authentication...
+      */
+ 
+      if (cups_local_auth(http))
+        break;
+ 
+      httpReconnect(http);
+ 
+      continue;
+    }
+#ifdef HAVE_LIBSSL
+    else if (status == HTTP_UPGRADE_REQUIRED)
+    {
+      /* Flush any error message... */
+      httpFlush(http);
+ 
+      /* Reconnect... */
+      httpReconnect(http);
+ 
+      /* Upgrade with encryption... */
+      httpEncryption(http, HTTP_ENCRYPT_REQUIRED);
+ 
+      /* Try again, this time with encryption enabled... */
+      continue;
+    }
+#endif /* HAVE_LIBSSL */
+  }
+  while (status == HTTP_UNAUTHORIZED || status == HTTP_UPGRADE_REQUIRED);
+ 
+ /*
+  * See if we actually got the file or an error...
+  */
+ 
+  if (status == HTTP_OK)
+  {
+   /*
+    * Yes, copy the file...
+    */
+ 
+    while ((bytes = httpRead(http, buffer, sizeof(buffer))) > 0)
+      write(fd, buffer, bytes);
+  }
+  else
+    httpFlush(http);
+ 
+ /*
+  * Return the request status...
+  */
+ 
+  return (status);
+}
 
 typedef struct
 {
