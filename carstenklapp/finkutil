#!/usr/bin/make -f
# Fink maintainer's utility to automatically validate fink info files
# and perform some basic cleanup tasks within the dists
# subdirectories.
#
# Put this file into /sw/fink/dists/experimental/carstenklapp
# or run `cd /sw/fink/dists; cvs co experimentnal`
# `./finkinfo install` makes a symlink in %p/sw/sbin
# Type './finkutil' for usage information.

# Change this to reflect a nonstandard fink installation.
p="`grep 'Basepath: ' -I /sw/etc/fink.conf | sed -e 's@Basepath: @@g'`"
#p=/usr/local

DISTS=${p}/fink/dists
me=${DISTS}/experimental/carstenklapp/finkutil

# List of branches to scan
BRANCHES=unstable stable

# List of subdirs to scan (Automatic way to read these into this Makefile, make dep?)
CHECKDIRS=base database devel editors games gnome graphics kde		\
 languages libs libs/perlmods net sci shells sound text utils web x11	\
 x11-system x11-wm

# just comment out all FILTER_COMMANDs if you want to see the verbose output of finkutil check.
# The '|| TRUE' traps grep errors for no matches
FILTER_COMMAND=| grep "^Warning\|^Error" || true
#FILTER_COMMAND=| grep "^Error" || true
#FILTER_COMMAND=| grep -v "Description ends with" | grep "^Warning\|Error" || true

CVSCRUFT=.\#*
APPLECRUFT=.DS_Store
BACKUPCRUFT=\#*\# *.info~ *.patch~

# NO USER-SERVEICABLE PARTS BELOW
FINK_COMMAND=${p}/bin/fink check
DEBSDIR=${p}/fink/debs
APTCACHE=${p}/var/cache/apt/archives/

INFOFILES=*.info
DEBFILES=*.deb
PATCHFILES=*.patch

.phony : $(APPLECRUFT) $(BACKUPCRUFT) $(BRANCHES) $(CHECKDIRS) $(CVSCRUFT) all check checkall checkdebs checkinfo clean cleanall cleancvs clean~ comver copyright describe description fixall fixdebs h help i install licence remove uninstall usage V vercomp version
 
# Docs
h usage : copyright
	@$(MAKE) -f ${me} description
	@echo "USAGE:"
	@echo " "
	@echo "finkutil [-j1] check     validate all fink info files in ${DISTS}"
	@echo "finkutil [-j1] checkdebs validate all deb files in ${DISTS} and ${APTCACHE}"
	@echo "finkutil fixdebs         rebuild soft links in ${DEBSDIR}"
	@echo " "
	@echo "finkutil cleancvs        delete all cvs temp & emacs temp files (${CVSCRUFT} in ${p})"
	@echo "finkutil clean           delete all .DS_Store files (${APPLECRUFT} in ${p})"
	@echo "finkutil clean~          delete all backup files (${BACKUPCRUFT} in ${p})"
	@echo " "
	@echo "[sudo] finkutil [-j1] cleanall    do all three clean actions"
	@echo "[sudo] finkutil [-j1] all         do all clean, check and fix actions"
	@echo " "
	@echo "finkutil [h|usage]       displays this message"
	@echo "finkutil help            displays all help messages"
	@echo "finkutil V|version       displays all help messages"
	@echo " "
	@echo "finkutil install         link finkutil to ${p}/sbin"
	@echo "finkutil remove          unlink finkutil from ${p}/sbin"
	@echo " "

help : copyright
	@$(MAKE) -f ${me} usage
	@echo "INSTALLATION:"
	@echo " "
	@echo "Preparation:"
	@echo "Put this file into '/sw/fink/dists/experimental/carstenklapp'"
	@echo "or 'cd /sw/fink/dists; cvs co experimentnal'"
	@echo " "
	@echo "Installation:"
	@echo "finkutil i|install"
#	echo "    Adds a symlink to your ${p}/sbin directory."
	@echo " "
	@echo "Uninstallation:"
	@echo "finkutil remove|uninstall"
	@echo "    Removes the finkutil symlink from your ${p}/sbin directory."
	@echo " "

-V version :
	@echo "\$$Id$$"
	@echo " "

licence copyright :
	@echo " "
	@echo "Copyright 2002,"
	@echo "Carsten Klapp <carstenklapp@users.sourceforge.net>"
	@echo " "
	@echo "This file is not a supported part of Fink."
	@echo " "
	@echo "Finkutil is free software; you can redistribute it and/or modify"
	@echo "it under the terms of the GNU General Public License as published by"
	@echo "the Free Software Foundation; either version 2 of the License, or"
	@echo "(at your option) any later version."
	@echo " "
	@echo "Finkutil is distributed in the hope that it will be useful,"
	@echo "but WITHOUT ANY WARRANTY; without even the implied warranty of"
	@echo "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the"
	@echo "GNU General Public License for more details."
	@echo " "
	@echo "You should have received a copy of the GNU General Public License"
	@echo "along with Finkutil; if not, write to the Free Software"
	@echo "Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA"
	@echo " "

describe description :
	@$(MAKE) -f ${me} version
	@echo "Fink maintainer's utility to automatically validate fink info files"
	@echo "and perform some basic cleanup tasks within the dists"
	@echo "subdirectories."
	@echo " "

i install :
	@echo "Making a link to finkutil in ${p}/sbin..."
	-@sudo ln -s ${me} ${p}/sbin
	@echo "Done."

remove uninstall :
	@echo "Removing link to finkutil from ${p}/sbin..."
	-@sudo rm -f ${p}/sbin/finkutil
	@echo "Done."

# "all" goals
all : cleanall fixall checkall

cleanall : clean cleancvs clean~

checkall :
	@$(MAKE) -f ${me} -j1 check
	@$(MAKE) -f ${me} -j1 checkdebs

fixall: fixdebs

# primary goals
check : $(BRANCHES)
checkinfo : check

checkdebs :
	@echo "Validating all ${DEBFILES} files in ${DISTS}/ and ${APTCACHE}...";
	find ${DISTS}/ -name "${DEBFILES}" -exec ${FINK_COMMAND} {} \;
	find ${APTCACHE} -name "${DEBFILES}" -maxdepth 1 -exec ${FINK_COMMAND} {} \;
	@echo "Done validating all ${DEBFILES} files in ${DISTS}/ and ${APTCACHE}.";

clean : $(APPLECRUFT)
cleancvs : $(CVSCRUFT)
clean~ : $(BACKUPCRUFT)

fixdebs :
#	The extra / is needed to cross the symlink from dists->10.2
#	Avoid partially downloaded apt-get debs using maxdepth.
	@echo "Deleting ${DEBFILES} links in ${DEBSDIR}...";
	sudo find ${DEBSDIR} -name "${DEBFILES}" -type l -exec rm {} \;
	@echo "Done deleting ${DEBFILES} links in ${DEBSDIR}.";
	@echo "Rebuilding ${DEBFILES} from ${DISTS} in ${DEBSDIR}...";
	cd ${DEBSDIR} && find ${DISTS}/ -name "${DEBFILES}" -print -exec ln -s {} \;
	@echo "Done rebuilding ${DEBFILES} from ${DISTS} in ${DEBSDIR}.";
	@echo "Rebuilding ${DEBFILES} from ${APTCACHE} in ${DEBSDIR}...";
	cd ${DEBSDIR} && find ${APTCACHE} -name "${DEBFILES}" -maxdepth 1 -print -exec ln -s {} \;
	@echo "Done rebuilding ${DEBFILES} from ${APTCACHE} in ${DEBSDIR}.";

# these subgoals are used internally by the above main goals, don't try to run them directly
$(CVSCRUFT) $(BACKUPCRUFT) $(APPLECRUFT) :
	@echo "Removing $@ files...";
	sudo find ${p} -name "$@" -print -exec rm {} \;
	@echo "Done removing $@ files."

$(CHECKDIRS) :
	@echo " "
	@cd $(DISTS)/$(DIST)/main/finkinfo/$@/ && pwd && $(FINK_COMMAND) ${INFOFILES} $(FILTER_COMMAND)

$(BRANCHES) :
	@echo "Validating ${INFOFILES} in branch $@..."
	@echo " "
	@cd $(DISTS)/$@/crypto/finkinfo/ && pwd && $(FINK_COMMAND) ${INFOFILES} $(FILTER_COMMAND)
	@$(MAKE) -f ${me} $(CHECKDIRS) DIST=$@
	@echo "Done validating ${INFOFILES} in branch $@."
	@echo " "

# highly experimental, these may erase all your DVDs
vercomp : comver
calendar :
	@echo $@ is up to date.
sandwich :
	@echo no mustard--DOH!
comver :
	dpkg --compare-versions $(new) '>>' $(old); result=$($?) ; if [ "$(result)" == "0" ] ; then echo ok ; else echo notok ; fi ; echo $(result)
