#!/usr/bin/perl
# -*- mode: Perl; tab-width: 4; -*-

# A dirty hack by Daniel Macks

use warnings;
use strict;

# all flags for a listed prefix are grouped together before the next prefix
my @prefix_order = (
	'/sw/lib',
	'/sw/include',
	'/usr/X11/lib',
	'/usr/X11/include',
	'/usr/X11R6/lib',
	'/usr/X11R6/include',
	'/usr/lib',
	'/usr/include',
);

# track the following flags (in this order)
my @flag_order = (
	'-I',
	'-L',
);
my %flag_queues = ();	 # $flag => \@paths_for_flag
my @other_queue = ();	 # things not fitting into any of %flag_queues

if (!@ARGV) {
	warn "Usage: $0 cmd [flags for cmd]\n";
	warn "  resort [flags for cmd] and call cmd with them\n";
	exit 1;
}

# what we will launch after organizing the flags
my @subcmd = (shift);
#warn "$0: subcmd: $subcmd[0]\n";

# separate the args according to flag
while (@ARGV) {
	my $arg = shift;
	my($flag) = grep { $arg =~ s/^$_// } @flag_order;
	if (defined $flag) {
		# parsed off a known flag
		push @{$flag_queues{$flag}}, $arg;
	} else {
		# unknown flag
		push @other_queue, $arg;
	}
}

# sort all paths for each flag
foreach my $flag (@flag_order) {
	next unless defined $flag_queues{$flag};
	my @path_list = @{$flag_queues{$flag}};
	#warn "$0: $flag: @path_list\n";

	# first separate the paths according to prefix
	my %sorted_paths;			# $prefix => \@sorted_dirs_for_prefix
	my @other_paths;			# paths not under any of %sorted_paths
	foreach my $path (@{$flag_queues{$flag}}) {
		my($prefix) = grep { $path =~ /^$_(\/|\z)/ } @prefix_order;
		if (defined $prefix) {
			# $path is $prefix or a subdir of it
			push @{$sorted_paths{$prefix}}, $path;
		} else {
			# unknown prefix
			push @other_paths, $path;
		}
	}

	# now reconstruct list of paths according to prefix priority
	@path_list = @other_paths;  # assume unknowns are "very important"
	foreach my $prefix (@prefix_order) {
		push @path_list, @{$sorted_paths{$prefix}} if exists $sorted_paths{$prefix};
	}
	#warn "$0: now $flag: @path_list\n";
	push @subcmd, map "$flag$_", @path_list;
}

#warn "$0: @other_queue\n";
push @subcmd, @other_queue;

#warn "$0: $subcmd @subarg\n";
exec {$subcmd[0]} @subcmd or die "Could not exec $subcmd[0]: $!\n";
