diff -Nurd -x'*~' libspectre-0.2.2.orig/configure libspectre-0.2.2/configure
--- libspectre-0.2.2.orig/configure	2008-11-25 11:24:10.000000000 -0500
+++ libspectre-0.2.2/configure	2009-04-25 15:21:56.000000000 -0400
@@ -21219,7 +21219,7 @@
 if test "${enable_test+set}" = set; then
   enableval=$enable_test; enable_test="$enableval"
 else
-  enable_test=yes
+  enable_test=no
 fi
 
 
diff -Nurd -x'*~' libspectre-0.2.2.orig/libspectre/ps.c libspectre-0.2.2/libspectre/ps.c
--- libspectre-0.2.2.orig/libspectre/ps.c	2008-11-25 10:18:18.000000000 -0500
+++ libspectre-0.2.2/libspectre/ps.c	2009-09-12 23:57:09.000000000 -0400
@@ -606,8 +606,7 @@
 	} else if (doc->nummedia == NONE &&
 		   iscomment(line+2, "DocumentMedia:")) {
 	    char w[21], h[21];
-	    doc->media = (Media)
-			 PS_malloc(sizeof (MediaStruct));
+	    doc->media = (Media) PS_calloc(1, sizeof (MediaStruct));
             CHECK_MALLOCED(doc->media);
 	    doc->media[0].name = ps_gettext(line+length("%%DocumentMedia:"),
 					    &next_char);
@@ -616,10 +615,12 @@
 		    doc->media[0].width = _spectre_strtod (w, NULL) + 0.5;
 		    doc->media[0].height = _spectre_strtod (h, NULL) + 0.5;
 		}
-		if (doc->media[0].width != 0 && doc->media[0].height != 0)
+		if (doc->media[0].width != 0 && doc->media[0].height != 0) {
 		    doc->nummedia = 1;
-		else
+		} else {
 		    PS_free(doc->media[0].name);
+		    doc->media[0].name = NULL;
+		}
 	    }
 	    preread=1;
 	    while (readline(fd, enddoseps, &line, &position, &line_len) &&
@@ -629,7 +630,8 @@
 			     PS_realloc(doc->media,
 				     (doc->nummedia+1)*
 				     sizeof (MediaStruct));
-                CHECK_MALLOCED(doc->media);
+		CHECK_MALLOCED(doc->media);
+		memset (doc->media + doc->nummedia, 0, sizeof (MediaStruct));
 		doc->media[doc->nummedia].name = ps_gettext(line+length("%%+"),
 							    &next_char);
 		if (doc->media[doc->nummedia].name != NULL) {
@@ -637,10 +639,12 @@
 		        doc->media[doc->nummedia].width = _spectre_strtod (w, NULL) + 0.5;
 			doc->media[doc->nummedia].height = _spectre_strtod (h, NULL) + 0.5;
 		    }
-		    if (doc->media[doc->nummedia].width != 0 &&
-			doc->media[doc->nummedia].height != 0) doc->nummedia++;
-		    else
+		    if (doc->media[doc->nummedia].width != 0 &&	doc->media[doc->nummedia].height != 0) {
+		        doc->nummedia++;
+		    } else {
 			PS_free(doc->media[doc->nummedia].name);
+			doc->media[doc->nummedia].name = NULL;
+		    }
 		}
 	    }
 	    section_len += line_len;
@@ -648,14 +652,11 @@
 	} else if (doc->nummedia == NONE &&
 		   iscomment(line+2, "DocumentPaperSizes:")) {
 
-	    doc->media = (Media)
-			 PS_malloc(sizeof (MediaStruct));
+	    doc->media = (Media) PS_calloc(1, sizeof (MediaStruct));
             CHECK_MALLOCED(doc->media);
 	    doc->media[0].name = ps_gettext(line+length("%%DocumentPaperSizes:"),
 					    &next_char);
 	    if (doc->media[0].name != NULL) {
-		doc->media[0].width = 0;
-		doc->media[0].height = 0;
 		for (i=0; papersizes[i].name; i++) {
 			dmp = (Media)&papersizes[i];
 		    /* Note: Paper size comment uses down cased paper size
@@ -672,10 +673,12 @@
 			break;
 		    }
 		}
-		if (doc->media[0].width != 0 && doc->media[0].height != 0)
+		if (doc->media[0].width != 0 && doc->media[0].height != 0) {
 		    doc->nummedia = 1;
-		else
+		} else {
 		    PS_free(doc->media[0].name);
+		    doc->media[0].name = NULL;
+		}
 	    }
 	    while ((cp = ps_gettext(next_char, &next_char))) {
 		doc->media = (Media)
@@ -683,9 +686,8 @@
 				     (doc->nummedia+1)*
 				     sizeof (MediaStruct));
                 CHECK_MALLOCED(doc->media);
+		memset (doc->media + doc->nummedia, 0, sizeof (MediaStruct));
 		doc->media[doc->nummedia].name = cp;
-		doc->media[doc->nummedia].width = 0;
-		doc->media[doc->nummedia].height = 0;
 		for (i=0; papersizes[i].name; i++) {
 			dmp = (Media)&papersizes[i];
 		    /* Note: Paper size comment uses down cased paper size
@@ -693,7 +695,7 @@
 		     * PaperSize comments.
 		     */
 		    if (_spectre_strcasecmp(doc->media[doc->nummedia].name,
-			       dmp->name) == 0) {
+					    dmp->name) == 0) {
 			PS_free(doc->media[doc->nummedia].name);
 			doc->media[doc->nummedia].name =
 				(char *)PS_malloc(strlen(dmp->name)+1);
@@ -704,10 +706,12 @@
 			break;
 		    }
 		}
-		if (doc->media[doc->nummedia].width != 0 &&
-		    doc->media[doc->nummedia].height != 0) doc->nummedia++;
-		else
+		if (doc->media[doc->nummedia].width != 0 && doc->media[doc->nummedia].height != 0) {
+		    doc->nummedia++;
+		} else {
 		    PS_free(doc->media[doc->nummedia].name);
+		    doc->media[doc->nummedia].name = NULL;
+		}
 	    }
 	    preread=1;
 	    while (readline(fd, enddoseps, &line, &position, &line_len) &&
@@ -720,9 +724,8 @@
 					 (doc->nummedia+1)*
 					 sizeof (MediaStruct));
                     CHECK_MALLOCED(doc->media);
+		    memset (doc->media + doc->nummedia, 0, sizeof (MediaStruct));
 		    doc->media[doc->nummedia].name = cp;
-		    doc->media[doc->nummedia].width = 0;
-		    doc->media[doc->nummedia].height = 0;
 		    for (i=0; papersizes[i].name; i++) {
 			    dmp = (Media)&papersizes[i];
 			/* Note: Paper size comment uses down cased paper size
@@ -730,16 +733,18 @@
 			 * PaperSize comments.
 			 */
 			if (_spectre_strcasecmp(doc->media[doc->nummedia].name,
-				   dmp->name) == 0) {
+						dmp->name) == 0) {
 			    doc->media[doc->nummedia].width = dmp->width;
 			    doc->media[doc->nummedia].height = dmp->height;
 			    break;
 			}
 		    }
-		    if (doc->media[doc->nummedia].width != 0 &&
-			doc->media[doc->nummedia].height != 0) doc->nummedia++;
-		    else
+		    if (doc->media[doc->nummedia].width != 0 && doc->media[doc->nummedia].height != 0) {
+		        doc->nummedia++;
+		    } else {
 			PS_free(doc->media[doc->nummedia].name);
+			doc->media[doc->nummedia].name = NULL;
+		    }
 		}
 	    }
 	    section_len += line_len;
diff -Nurd -x'*~' libspectre-0.2.2.orig/libspectre/spectre-device.c libspectre-0.2.2/libspectre/spectre-device.c
--- libspectre-0.2.2.orig/libspectre/spectre-device.c	2008-11-25 10:15:50.000000000 -0500
+++ libspectre-0.2.2/libspectre/spectre-device.c	2009-09-12 23:58:29.000000000 -0400
@@ -215,7 +215,7 @@
 	args = calloc (sizeof (char *), n_args);
 	args[arg++] = "libspectre"; /* This value doesn't really matter */
 	args[arg++] = "-dMaxBitmap=10000000";
-	args[arg++] = "-dDELAYSAFER";
+	args[arg++] = "-dSAFER";
 	args[arg++] = "-dNOPAUSE";
 	args[arg++] = "-dNOPAGEPROMPT";
 	args[arg++] = "-sDEVICE=display";
diff -Nurd -x'*~' libspectre-0.2.2.orig/libspectre/spectre-exporter-pdf.c libspectre-0.2.2/libspectre/spectre-exporter-pdf.c
--- libspectre-0.2.2.orig/libspectre/spectre-exporter-pdf.c	2008-09-15 06:21:51.000000000 -0400
+++ libspectre-0.2.2/libspectre/spectre-exporter-pdf.c	2009-09-12 23:46:48.000000000 -0400
@@ -27,7 +27,7 @@
 spectre_exporter_pdf_begin (SpectreExporter *exporter,
 			    const char      *filename)
 {
-	char *args[8];
+	char *args[9];
 	int arg = 0;
 	char *output_file;
 	
@@ -40,6 +40,7 @@
 		return SPECTRE_STATUS_EXPORTER_ERROR;
 	}
 
+	args[arg++] = "libspectre"; /* This value doesn't really matter */
 	args[arg++] = "-dMaxBitmap=10000000";
 	args[arg++] = "-dBATCH";
 	args[arg++] = "-dNOPAUSE";
@@ -50,7 +51,7 @@
 	args[arg++] = "-c";
 	args[arg++] = ".setpdfwrite";
 
-	if (!spectre_gs_run (exporter->gs, 8, args)) {
+	if (!spectre_gs_run (exporter->gs, 9, args)) {
 		free (output_file);
 		spectre_gs_free (exporter->gs);
 		exporter->gs = NULL;
diff -Nurd -x'*~' libspectre-0.2.2.orig/libspectre/spectre-gs.c libspectre-0.2.2/libspectre/spectre-gs.c
--- libspectre-0.2.2.orig/libspectre/spectre-gs.c	2008-11-23 10:24:44.000000000 -0500
+++ libspectre-0.2.2/libspectre/spectre-gs.c	2009-04-25 15:22:06.000000000 -0400
@@ -86,7 +86,7 @@
 	int error;
 	static char buf[BUFFER_SIZE];
 	unsigned int read;
-	int wrote;
+	int exit_code;
 	size_t left = end - begin;
 	void *ghostscript_instance = gs->ghostscript_instance;
 	
@@ -97,7 +97,7 @@
 	
 	fseek (fd, begin, SEEK_SET);
 
-	gsapi_run_string_begin (ghostscript_instance, 0, &error);
+	error = gsapi_run_string_begin (ghostscript_instance, 0, &exit_code);
 	if (critic_error_code (error)) {
 		fclose (fd);
 		return FALSE;
@@ -107,10 +107,11 @@
 		char *set;
 
 		set = _spectre_strdup_printf ("%d %d translate\n", -x, -y);
-		gsapi_run_string_continue (ghostscript_instance, set, strlen (set),
-					   0, &error);
+		error = gsapi_run_string_continue (ghostscript_instance, set, strlen (set),
+						   0, &exit_code);
+		error = error == e_NeedInput ? 0 : error;
 		free (set);
-		if (critic_error_code (error)) {
+		if (error != e_NeedInput && critic_error_code (error)) {
 			fclose (fd);
 			return FALSE;
 		}
@@ -123,8 +124,9 @@
 			to_read = left;
 		
 		read = fread (buf, sizeof (char), to_read, fd);
-		wrote = gsapi_run_string_continue (ghostscript_instance,
-						   buf, read, 0, &error);
+		error = gsapi_run_string_continue (ghostscript_instance,
+						   buf, read, 0, &exit_code);
+		error = error == e_NeedInput ? 0 : error;
 		left -= read;
 	}
 	
@@ -132,7 +134,7 @@
 	if (critic_error_code (error))
 		return FALSE;
 	
-	gsapi_run_string_end (ghostscript_instance, 0, &error);
+	error = gsapi_run_string_end (ghostscript_instance, 0, &exit_code);
 	if (critic_error_code (error))
 		return FALSE;
 
@@ -195,9 +197,10 @@
 			const char *str)
 {
 	int error;
+	int exit_code;
 	
-	gsapi_run_string_with_length (gs->ghostscript_instance,
-				      str, strlen (str), 0, &error);
+	error = gsapi_run_string_with_length (gs->ghostscript_instance,
+					      str, strlen (str), 0, &exit_code);
 
 	return !critic_error_code (error);
 }
