diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/configure.ac gobject-introspection-0.6.10/configure.ac
--- gobject-introspection-0.6.10.orig/configure.ac	2010-04-07 11:29:55.000000000 -0400
+++ gobject-introspection-0.6.10/configure.ac	2010-05-01 13:37:13.000000000 -0400
@@ -125,6 +125,8 @@
 PKG_CHECK_MODULES(GIO_UNIX, [gio-unix-2.0], have_gio_unix=true, have_gio_unix=false)
 AM_CONDITIONAL(HAVE_GIO_UNIX, test x$have_gio_unix = xtrue)
 
+PKG_CHECK_MODULES(CAIRO, [cairo])
+
 PKG_CHECK_MODULES(SCANNER, [gobject-2.0 gthread-2.0 gio-2.0])
 
 dnl libffi
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/configure.ac.orig gobject-introspection-0.6.10/configure.ac.orig
--- gobject-introspection-0.6.10.orig/configure.ac.orig	1969-12-31 19:00:00.000000000 -0500
+++ gobject-introspection-0.6.10/configure.ac.orig	2010-04-07 11:29:55.000000000 -0400
@@ -0,0 +1,232 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+dnl the gi version number
+m4_define(gi_major_version, 0)
+m4_define(gi_minor_version, 6)
+m4_define(gi_micro_version, 10)
+m4_define(gi_version, gi_major_version.gi_minor_version.gi_micro_version)
+
+AC_PREREQ(2.59)
+AC_INIT(gobject-introspection, gi_version,
+        http://bugzilla.gnome.org/enter_bug.cgi?product=glib&component=introspection)
+AM_INIT_AUTOMAKE([1.7 -Wno-portability])
+AM_MAINTAINER_MODE
+
+m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])],)
+
+AC_CONFIG_HEADER([config.h])
+
+AC_CONFIG_MACRO_DIR([m4])
+
+# Check for Win32
+AC_CANONICAL_HOST
+AC_MSG_CHECKING([for Win32])
+case "$host" in
+*-*-mingw*)
+	os_win32=yes
+	;;
+*)
+	os_win32=no
+	;;
+esac
+AC_MSG_RESULT([$os_win32])
+AM_CONDITIONAL(OS_WIN32, [test "$os_win32" = "yes"])
+
+# Checks for programs.
+AC_PROG_CC
+AM_PROG_CC_C_O
+AC_PROG_LIBTOOL
+PKG_PROG_PKG_CONFIG
+
+AC_PROG_LEX
+if test "$LEX" = :; then
+	AC_MSG_ERROR([flex not found but required])
+fi
+
+AC_CHECK_PROGS(YACC, 'bison -y', :)
+if test "$YACC" = :; then
+	AC_MSG_ERROR([bison not found but required])
+fi
+
+
+changequote(,)dnl
+ensureflag() {
+  flag="$1"; shift
+  result="$@"
+
+  case " ${result} " in
+  *[\ \	]${flag}[\ \	]*) ;;
+  *) result="${flag} ${result}" ;;
+  esac
+
+  echo ${result}
+}
+changequote([,])dnl
+
+if test "$GCC" = "yes"; then
+    for flag in -Wall -Wchar-subscripts -Wmissing-declarations \
+        -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wcast-align \
+        -Wsign-compare -fno-strict-aliasing;
+    do
+        CFLAGS="$(ensureflag $flag $CFLAGS)"
+    done
+fi
+
+# Checks for libraries.
+GI_ENABLE_GCOV
+
+AC_CHECK_LIB([dl], [dlopen])
+
+AC_MSG_CHECKING(for the suffix of shared libraries)
+# libtool variables are immediately available since 2.0, prior to that we need
+# to call libtool --config explicitly
+if test "x$shrext_cmds" = x; then
+    shrext_cmds=`SED=$SED ./libtool --config | grep '^shrext_cmds='`
+    eval $shrext_cmds
+fi
+eval std_shrext=$shrext_cmds
+# chop the initial dot
+SHLIB_SUFFIX=${std_shrext#.}
+AC_MSG_RESULT(.$SHLIB_SUFFIX)
+# any reason it may fail?
+if test "x$SHLIB_SUFFIX" = x; then
+        AC_MSG_ERROR(Cannot determine shared library suffix from libtool)
+fi
+AC_DEFINE_UNQUOTED([SHLIB_SUFFIX], "$SHLIB_SUFFIX", [Define to the platform's shared library suffix])
+
+# Copied from dbus configure.in
+#### find the actual value for $prefix that we'll end up with
+##   (I know this is broken and should be done in the Makefile, but
+##    that's a major pain and almost nobody actually seems to care)
+AS_AC_EXPAND(EXPANDED_LOCALSTATEDIR, "$localstatedir")
+AS_AC_EXPAND(EXPANDED_SYSCONFDIR, "$sysconfdir")
+AS_AC_EXPAND(EXPANDED_BINDIR, "$bindir")
+AS_AC_EXPAND(EXPANDED_LIBDIR, "$libdir")
+AS_AC_EXPAND(EXPANDED_LIBEXECDIR, "$libexecdir")
+AS_AC_EXPAND(EXPANDED_DATADIR, "$datadir")
+
+#### Directory to install the libexec binaries
+GOBJECT_INTROSPECTION_LIBDIR="$EXPANDED_LIBDIR"
+AC_SUBST(GOBJECT_INTROSPECTION_LIBDIR)
+AC_DEFINE_UNQUOTED(GOBJECT_INTROSPECTION_LIBDIR,"$GOBJECT_INTROSPECTION_LIBDIR", [Directory prefix for typelib installation])
+
+#### Directory to install the gir files
+GIR_SUFFIX="gir-1.0"
+AC_SUBST(GIR_SUFFIX)
+AC_DEFINE_UNQUOTED(GIR_SUFFIX, "$GIR_SUFFIX", [Name of the gir directory])
+
+GIR_DIR="$EXPANDED_DATADIR/$GIR_SUFFIX"
+AC_SUBST(GIR_DIR)
+AC_DEFINE_UNQUOTED(GIR_DIR, "$GIR_DIR", [Director prefix for gir installation])
+
+PKG_CHECK_MODULES(GOBJECT, [gobject-2.0 gio-2.0])
+PKG_CHECK_MODULES(GTHREAD, [gthread-2.0])
+PKG_CHECK_MODULES(GIO_UNIX, [gio-unix-2.0], have_gio_unix=true, have_gio_unix=false)
+AM_CONDITIONAL(HAVE_GIO_UNIX, test x$have_gio_unix = xtrue)
+
+PKG_CHECK_MODULES(SCANNER, [gobject-2.0 gthread-2.0 gio-2.0])
+
+dnl libffi
+PKG_CHECK_MODULES(FFI, libffi, have_ffi_pkgconfig=yes, have_ffi_pkgconfig=no)
+FFI_PC_CFLAGS=""
+FFI_PC_LIBS=""
+FFI_PC_PACKAGES=""
+if test x"$have_ffi_pkgconfig" = xyes ; then
+    FFI_PC_PACKAGES="libffi"
+else
+  AC_MSG_CHECKING(for ffi.h)
+
+  AC_TRY_CPP([#include <ffi.h>], have_ffi_h=yes, have_ffi_h=no)
+  if test x"$have_ffi_h" = x"yes"; then
+
+    save_LIBS=$LIBS
+    if test x"$with_ffi" = x"yes" || test x"$with_ffi" = x"auto"; then
+      other_LIBS=
+    else
+      other_LIBS=$with_ffi
+    fi
+
+    AC_SEARCH_LIBS(ffi_call,ffi,,AC_MSG_ERROR([libffi not found]),$other_LIBS)
+    if test x"$ac_cv_search_ffi_call" = x"none required" ; then
+      FFI_LIBS=$other_LIBS
+    else
+      FFI_LIBS="$ac_cv_search_ffi_call $other_LIBS"
+    fi
+
+    LIBS=$save_LIBS
+  fi
+  if test x"$have_ffi_h" != x"yes" ; then
+    AC_MSG_ERROR([ffi.h not found])
+  fi
+
+  FFI_PC_LIBS=$FFI_LIBS
+  FFI_PC_CFLAGS=$FFI_CFLAGS
+  FFI_CFLAGS=
+  AC_MSG_RESULT([$have_ffi_h])
+  AC_SUBST(FFI_LIBS)
+  AC_SUBST(FFI_CFLAGS)
+fi
+AC_SUBST(FFI_PC_CFLAGS)
+AC_SUBST(FFI_PC_LIBS)
+AC_SUBST(FFI_PC_PACKAGES)
+
+AC_CHECK_SIZEOF(time_t, [], [#include <time.h>])
+
+PKG_CHECK_MODULES(GIREPO, [glib-2.0 gobject-2.0 gmodule-2.0 gio-2.0])
+
+# if we ever remove manual check for ffi and require .pc file, then 
+# just put libffi in the PKG_CHECK_MODULES(GIREPO) deps
+GIREPO_LIBS="$GIREPO_LIBS $GCOV_LIBS $FFI_LIBS"
+GIREPO_CFLAGS="$GIREPO_CFLAGS $FFI_CFLAGS"
+
+GIREPO_CFLAGS="$GIREPO_CFLAGS $GCOV_CFLAGS"
+
+# gtk-doc
+GTK_DOC_CHECK([1.12])
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([fcntl.h stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_C_CONST
+
+# Checks for library functions.
+AC_FUNC_STRTOD
+AC_CHECK_FUNCS([memchr strchr strspn strstr strtol strtoull])
+AC_CHECK_FUNCS([backtrace backtrace_symbols])
+
+# Python
+
+AC_MSG_CHECKING([whether Python support is requested])
+
+AM_PATH_PYTHON([2.5])
+case "$host" in
+*-*-mingw*)
+	# Change backslashes to forward slashes in pyexecdir to avoid
+	# quoting issues
+	pyexecdir=`echo $pyexecdir | tr '\\\\' '/'`
+	;;
+esac
+AM_CHECK_PYTHON_HEADERS(,AC_MSG_ERROR([Python headers not found]))
+
+AC_CONFIG_FILES([
+Makefile
+gir/Makefile
+girepository/Makefile
+giscanner/Makefile
+giscanner/config.py
+m4/Makefile
+tools/Makefile
+tests/Makefile
+tests/invoke/Makefile
+tests/offsets/Makefile
+tests/scanner/Makefile
+tests/repository/Makefile
+examples/Makefile
+docs/Makefile
+docs/reference/Makefile
+gobject-introspection-1.0.pc
+gobject-introspection-no-export-1.0.pc])
+AC_OUTPUT
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/configure.ac.rej gobject-introspection-0.6.10/configure.ac.rej
--- gobject-introspection-0.6.10.orig/configure.ac.rej	1969-12-31 19:00:00.000000000 -0500
+++ gobject-introspection-0.6.10/configure.ac.rej	2010-05-01 13:04:52.000000000 -0400
@@ -0,0 +1,32 @@
+***************
+*** 126,131 ****
+  AM_CONDITIONAL(HAVE_GIO_UNIX, test x$have_gio_unix = xtrue)
+  
+  AC_ARG_ENABLE(tests,[  --disable-tests           disable test libraries ], enable_tests=$enableval,enable_tests=yes)
+  if test x$enable_tests != xno; then
+    PKG_CHECK_MODULES(CAIRO, [cairo], have_cairo=yes, have_cairo=no)
+    if test x$have_cairo != xyes; then
+--- 126,132 ----
+  AM_CONDITIONAL(HAVE_GIO_UNIX, test x$have_gio_unix = xtrue)
+  
+  AC_ARG_ENABLE(tests,[  --disable-tests           disable test libraries ], enable_tests=$enableval,enable_tests=yes)
++ have_cairo=no
+  if test x$enable_tests != xno; then
+    PKG_CHECK_MODULES(CAIRO, [cairo], have_cairo=yes, have_cairo=no)
+    if test x$have_cairo != xyes; then
+***************
+*** 133,138 ****
+    fi
+  fi
+  AM_CONDITIONAL(BUILD_TESTS, test x$enable_tests != xno)
+  
+  PKG_CHECK_MODULES(SCANNER, [gobject-2.0 gthread-2.0 gio-2.0])
+  
+--- 134,140 ----
+    fi
+  fi
+  AM_CONDITIONAL(BUILD_TESTS, test x$enable_tests != xno)
++ AM_CONDITIONAL(HAVE_CAIRO, test x$have_cairo != xno)
+  
+  PKG_CHECK_MODULES(SCANNER, [gobject-2.0 gthread-2.0 gio-2.0])
+  
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/gir/Everything-1.0-expected.gir gobject-introspection-0.6.10/gir/Everything-1.0-expected.gir
--- gobject-introspection-0.6.10.orig/gir/Everything-1.0-expected.gir	2010-04-18 14:11:38.000000000 -0400
+++ gobject-introspection-0.6.10/gir/Everything-1.0-expected.gir	2010-05-01 13:56:18.000000000 -0400
@@ -8,11 +8,14 @@
             xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
   <include name="GLib" version="2.0"/>
   <include name="GObject" version="2.0"/>
+  <include name="Gio" version="2.0"/>
   <include name="cairo" version="1.0"/>
+  <package name="cairo"/>
+  <package name="gio-2.0"/>
   <package name="gobject-2.0"/>
   <namespace name="Everything"
              version="1.0"
-             shared-library="libgirepository-everything-1.0.so.1"
+             shared-library="libgirepository-everything-1.0.1.dylib"
              c:prefix="Everything">
     <record name="TestBoxed"
             c:type="TestBoxed"
@@ -785,6 +788,17 @@
         </parameter>
       </parameters>
     </function>
+    <function name="test_async_ready_callback"
+              c:identifier="test_async_ready_callback">
+      <return-value transfer-ownership="none">
+        <type name="none" c:type="void"/>
+      </return-value>
+      <parameters>
+        <parameter name="callback" transfer-ownership="none" scope="async">
+          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
+        </parameter>
+      </parameters>
+    </function>
     <function name="test_boolean" c:identifier="test_boolean">
       <return-value transfer-ownership="none">
         <type name="boolean" c:type="gboolean"/>
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/gir/Makefile.am gobject-introspection-0.6.10/gir/Makefile.am
--- gobject-introspection-0.6.10.orig/gir/Makefile.am	2010-04-16 10:58:23.000000000 -0400
+++ gobject-introspection-0.6.10/gir/Makefile.am	2010-05-01 13:57:53.000000000 -0400
@@ -156,12 +156,12 @@
 LT_VERSION = $(LT_CURRENT):$(LT_REVISION):$(LT_AGE)
 TYPELIB_VERSION = $(LT_CURRENT).0
 
-lib_LTLIBRARIES = libgirepository-everything-1.0.la
+lib_LTLIBRARIES =
 
 libgirepository_everything_1_0_la_SOURCES = $(srcdir)/everything.c $(srcdir)/everything.h
-libgirepository_everything_1_0_la_CFLAGS = $(GOBJECT_CFLAGS)
+libgirepository_everything_1_0_la_CFLAGS = $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS)
 libgirepository_everything_1_0_la_LDFLAGS = -version-info $(LT_VERSION)
-libgirepository_everything_1_0_la_LIBADD = $(GOBJECT_LIBS) -lcairo
+libgirepository_everything_1_0_la_LIBADD = $(GOBJECT_LIBS) $(CAIRO_LIBS)
 
 if OS_WIN32
 libgirepository_everything_1_0_la_LDFLAGS += -no-undefined
@@ -170,12 +170,13 @@
 Everything-1.0.gir: Gio-2.0.gir libgirepository-everything-1.0.la
 
 Everything_1_0_gir_LIBS = libgirepository-everything-1.0.la
-Everything_1_0_gir_PACKAGES = gobject-2.0
-Everything_1_0_gir_INCLUDES = GObject-2.0 cairo-1.0
+Everything_1_0_gir_PACKAGES = gobject-2.0 cairo gio-2.0
+Everything_1_0_gir_INCLUDES = GObject-2.0 cairo-1.0 Gio-2.0
 Everything_1_0_gir_FILES = $(srcdir)/everything.h $(srcdir)/everything.c
 
 INTROSPECTION_GIRS += Everything-$(TYPELIB_VERSION).gir
 EXPECTEDGIRS += Everything-$(TYPELIB_VERSION)-expected.gir
+lib_LTLIBRARIES += libgirepository-everything-1.0.la
 
 # marshalling tests
 lib_LTLIBRARIES += libgirepository-gimarshallingtests-1.0.la
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/gir/everything.c gobject-introspection-0.6.10/gir/everything.c
--- gobject-introspection-0.6.10.orig/gir/everything.c	2010-04-18 14:05:02.000000000 -0400
+++ gobject-introspection-0.6.10/gir/everything.c	2010-05-01 13:57:53.000000000 -0400
@@ -1,7 +1,6 @@
 #include <string.h>
 #include <stdlib.h>
 #include "everything.h"
-#include <gio/gio.h>
 
 static gboolean abort_on_error = TRUE;
 
@@ -1978,6 +1977,14 @@
   return callback(user_data);
 }
 
+void
+test_async_ready_callback (GAsyncReadyCallback callback)
+{
+  GSimpleAsyncResult *result = g_simple_async_result_new (NULL, callback, NULL,
+    test_async_ready_callback);
+  g_simple_async_result_complete_in_idle (result);
+}
+
 /* interface */
 
 static void
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/gir/everything.h gobject-introspection-0.6.10/gir/everything.h
--- gobject-introspection-0.6.10.orig/gir/everything.h	2010-04-18 14:05:02.000000000 -0400
+++ gobject-introspection-0.6.10/gir/everything.h	2010-05-01 13:57:53.000000000 -0400
@@ -3,6 +3,7 @@
 
 #include <cairo/cairo.h>
 #include <glib-object.h>
+#include <gio/gio.h>
 #include <time.h>
 
 void set_abort_on_error (gboolean abort_on_error);
@@ -348,6 +349,8 @@
 int test_callback_infinite (TestCallbackUserData callback,
                            gpointer user_data);
 
+void test_async_ready_callback (GAsyncReadyCallback callback);
+
 /* interface */
 #define TEST_TYPE_INTERFACE              (test_interface_get_type ())
 #define TEST_INTERFACE(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), TEST_TYPE_INTERFACE, TestInterface))
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/girepository/ginfo.c gobject-introspection-0.6.10/girepository/ginfo.c
--- gobject-introspection-0.6.10.orig/girepository/ginfo.c	2010-04-18 14:09:04.000000000 -0400
+++ gobject-introspection-0.6.10/girepository/ginfo.c	2010-05-01 12:49:15.000000000 -0400
@@ -1261,6 +1261,7 @@
     return G_TYPE_OBJECT;
 
   get_type_func = NULL;
+  printf("ginfo.c g_registered_type_info_get_g_type()\n");
   if (!g_typelib_symbol (rinfo->typelib,
                          type_init,
                          (void**) &get_type_func))
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/girepository/ginvoke.c gobject-introspection-0.6.10/girepository/ginvoke.c
--- gobject-introspection-0.6.10.orig/girepository/ginvoke.c	2010-04-07 11:29:55.000000000 -0400
+++ gobject-introspection-0.6.10/girepository/ginvoke.c	2010-05-01 12:49:29.000000000 -0400
@@ -89,6 +89,7 @@
 
   symbol = g_function_info_get_symbol (info);
 
+  printf("ginvoke.c g_function_info_invoke()\n");
   if (!g_typelib_symbol (g_base_info_get_typelib((GIBaseInfo *) info),
                          symbol, &func))
     {
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/girepository/girffi.c gobject-introspection-0.6.10/girepository/girffi.c
--- gobject-introspection-0.6.10.orig/girepository/girffi.c	2010-04-08 12:26:55.000000000 -0400
+++ gobject-introspection-0.6.10/girepository/girffi.c	2010-05-01 12:49:37.000000000 -0400
@@ -218,6 +218,7 @@
 
   symbol = g_function_info_get_symbol ((GIFunctionInfo*) info);
 
+  printf("girffi.c g_function_info_prep_invoke()\n");
   if (!g_typelib_symbol (g_base_info_get_typelib((GIBaseInfo *) info),
                          symbol, &(invoker->native_address)))
     {
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/girepository/gtypelib.c gobject-introspection-0.6.10/girepository/gtypelib.c
--- gobject-introspection-0.6.10.orig/girepository/gtypelib.c	2010-04-07 11:29:55.000000000 -0400
+++ gobject-introspection-0.6.10/girepository/gtypelib.c	2010-05-01 12:50:56.000000000 -0400
@@ -2003,15 +2003,18 @@
           if (module == NULL)
             {
               GString *shlib_full = g_string_new (shlibs[i]);
+	      printf("gtypelib.c _g_typelib_do_dlopen() for value %s\n", shlib_full->str);
 
               /* Prefix with "lib", try both .la and .so */
               if (!g_str_has_prefix (shlib_full->str, "lib"))
                 g_string_prepend (shlib_full, "lib");
               g_string_append (shlib_full, ".la");
+	      printf("\ttrying %s\n", shlib_full->str);
               module = g_module_open (shlib_full->str, G_MODULE_BIND_LAZY);
               if (module == NULL)
                 {
                   g_string_overwrite (shlib_full, strlen (shlib_full->str)-2, SHLIB_SUFFIX);
+		  printf("\ttrying %s\n", shlib_full->str);
                   module = g_module_open (shlib_full->str, G_MODULE_BIND_LAZY);
                 }
 
diff -Nurd -x'*~' gobject-introspection-0.6.10.orig/giscanner/shlibs.py gobject-introspection-0.6.10/giscanner/shlibs.py
--- gobject-introspection-0.6.10.orig/giscanner/shlibs.py	2009-09-17 04:53:45.000000000 -0400
+++ gobject-introspection-0.6.10/giscanner/shlibs.py	2010-05-01 12:57:10.000000000 -0400
@@ -21,6 +21,7 @@
 
 import re
 import subprocess
+import sys
 
 from .utils import get_libtool_command, extract_libtool_shlib
 
@@ -71,11 +72,15 @@
     if libtool:
         args.extend(libtool)
         args.append('--mode=execute')
-    args.extend(['ldd', binary.args[0]])
+    if sys.platform == "darwin":
+        args.extend(['otool', '-L', binary.args[0]])
+    else:
+        args.extend(['ldd', binary.args[0]])
     proc = subprocess.Popen(args, stdout=subprocess.PIPE)
     patterns = {}
     for library in libraries:
         patterns[library] = _ldd_library_pattern(library)
+        print "pattern scanner: ", library, " -> ", patterns[library]
 
     shlibs = []
     for line in proc.stdout:
