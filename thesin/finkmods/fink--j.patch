diff -ruN fink/perlmod/Fink/ChangeLog fink.-j/perlmod/Fink/ChangeLog
--- fink/perlmod/Fink/ChangeLog	Sat Aug 16 21:11:15 2003
+++ fink.-j/perlmod/Fink/ChangeLog	Sat Aug 16 21:11:07 2003
@@ -1,3 +1,8 @@
+2003-08-16  Justin F. Hallett  <thesin@users.sourceforge.net>
+
+	* PkgVersion.pm: Added -j to CFLAGS and CXXFLAGS via fink.conf field
+	  'Processors:'.
+
 2003-08-14  Dave Morrison  <dmrrsn@users.sourceforge.net>
 
 	* PkgVersion.pm: Disable the prebinding code unless the distribution
diff -ruN fink/perlmod/Fink/ChangeLog.orig fink.-j/perlmod/Fink/ChangeLog.orig
--- fink/perlmod/Fink/ChangeLog.orig	Sat Aug 16 20:54:36 2003
+++ fink.-j/perlmod/Fink/ChangeLog.orig	Wed Dec 31 17:00:00 1969
@@ -1,1622 +0,0 @@
-2003-08-16  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* PkgVersion.pm: Added -j to CFLAGS and CXXFLAGS via fink.conf field
-	  'Processors:'.
-
-2003-08-14  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm: Disable the prebinding code unless the distribution
-	is > 10.2.
-	* Bootstrap.pm, SelfUpdate.pm: Add gettext-bin to the bootstrap and
-	update lists (in preparation for making it non-essential)
-	* Bootstrap.pm: Move the code which enables the 10.3 distribution to
-	a new branch, "test_10_3"
-	
-2003-07-17  Benjamin Reed  <rangerrick@users.sourceforge.net>
-
-	* VirtPackage.pm: Don't print the output of linking the
-	-single_module test we only care about pass/fail.
-
-2003-07-15  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Bootstrap.pm, SelfUpdate.pm: Add bzip2-dev, gettext-dev, 
-	libiconv-dev, ncurses-dev to the bootstrap and update lists
-
-2003-07-14  Max Horn  <max@quendi.de>
-
-	* VirtPackage.pm: Explicitly check for the existence of 'what' and 'cc'
-	before invoking them. This is necessary for the PDB, which runs on a
-	non-darwin system currently, but also for any system which has no compiler.
-
-2003-07-09  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm: switch from BSD tar to /bin/pax for the
-	implementation of TarFilesRename.
-
-2003-07-06  Peter O'Gorman <ogorman@users.sourceforge.net>
-
-	* VirtPackage.pm, Config.pm, Engine.pm, Package.pm, PkgVersion.pm, 
-	Bootstrap.pm, Status.pm:
-	Move all virtual package stuff to one file, add fink-virtual-pkgs file.
-
-2003-07-05  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm: Revision of "Type: perl" to handle changes in 5.8.0
-	(thanks to JF Mertens)
-
-2003-07-04  Peter O'Gorman <ogorman@users.sourceforge.net>
-
-	* Validation.pm: Check for hardcoded /sw in the scripts and set fields.
-
-2003-07-02  Benjamin Reed  <rangerrick@users.sourceforge.net>
-
-	* PkgVersion.pm: Removed some unnecessary debug stuff
-
-2003-07-01  Benjamin Reed  <rangerrick@users.sourceforge.net>
-
-	* Config.pm, Status.pm: added cctools-single-module
-	  (cctools-<version>-1 is deprecated)
-	  It is better to test capabilities than versions
-
-2003-06-27  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Bootstrap.pm: Added checks for 10.3 tree
-	* PkgVersion.pm: Adding RangerRick's patch for prebinding for 10.3 only
-
-2003-06-19  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Bootstrap.pm:  Bootstrapping with perl 5.6.1 also requires 
-	storable-pm561.
-
-2003-06-14  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm: Allow bootstrapping with perl 5.6.1; cleaned up code; show
-	  more user friendly error message in case of an unknown perl version.
-
-2003-06-13  Ben Hines <benh57@users.sourceforge.net>
-
-	* NetAccess.pm: Support file:// and bare tarball names without choking
-	
-2003-06-12  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Bootstrap.pm: allow bootstrapping with perl 5.8.1 too
-
-2003-06-11  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm: Clarify nesting too deep error.
-
-2003-06-11  Justin F. Hallett <thesin@users.sourceforge.net>
-
-	* Selfupdate.pm: added -q to cvs commands based on verbosity level
-	from the config file and/or command line.
-
-2003-06-09  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Bootstrap.pm: allow bootstrapping with either perl 5.6.0 or 
-	perl 5.8.0
-
-2003-06-07  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Engine.pm, PkgVersion.pm:  Allow an essential package to have a 
-	splitoff which is not essential.  (However, the parent of an 
-	essential package must be essential.)  Uses a new virtual field 
-	_ParentEssential.
-
-2003-06-04  Chris Zubrzycki <beren12@users.sourceforge.net>
-
-	* Engine.pm: Add fink list limit by maintainer or tree.
-
-2003-05-26  Ben Hines <benh57@users.sourceforge.net>
-
-	* Engine.pm: Fix alternate depends on splitoffs.
-
-2003-05-23  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm: Use full path to uname to prevent build problems.
-	
-2003-05-23  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* Bootstrap.pm: Handle (Open)Darwin 6.6.
-
-2003-05-23  Peter O'Gorman <ogorman@users.sourceforge.net>
-
-	* Validation.pm: Allow <package>.info.
-
-2003-05-16  Ben Hines <benh57@users.sourceforge.net>
-
-	* Engine.pm: Cache arch to minimize uname calls.
-	
-2003-05-14  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Validation.pm: Check the .deb file for the presence of a .bundle
-	in a non-versioned subdirectory of /sw/lib/perl5; if present, warn
-	about a possible perl XS module installed incorrectly.
-
-2003-05-12  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm, Validation.pm: Introduce new versioned variants
-	of "Type: perl".  (Patch #725425)
-
-2003-05-10  Max Horn  <max@quendi.de>
-
-	* NetAccess.pm: Don't default to MasterFirst, but rather to MasterLast 
-	  (using MasterFirst as long as the master mirror has not all files is
-	  causing more pain than it helps).
-
-2003-05-10  Rob Braun <bbraun@users.sourceforge.net>
-
-	* PkgVersion.pm: When doing a fetch-* --dry-run, and the source
-	  doesn't have a URL, ignore the entry.
-
-2003-05-07  Ben Hines <benh57@users.sourceforge.net>
-
-	* Bootstrap.pm: support 10.2.6
-	
-2003-05-07  Rob Braun <bbraun@users.sourceforge.net>
-
-	* Config.pm, Engine.pm, Package.pm, PkgVersion.pm,
-	  Services.pm, Validation.pm: Remove hard coded references
-	  to 'powerpc'.  (Patch #732058)
-
-	* PkgVersion.pm, Validation.pm: Add %m for machine architecture
-	  string expansion.
-
-2003-05-04  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm: Added check_host and check_files, used by bootstrap.pl and
-	  postinstall.pl (Patch #731980).
-
-	* PkgVersion.pm: Explicitly invoke get_bsbase with its full qualified name,
-	  Fink::Bootstrap::get_bsbase (Patch #731980).
-
-2003-05-03  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Check for bad (DOS or Mac) line endings in .info / .patch
-	  files, and also check for empty .patch files (Patch #731791).
-
-2003-05-02  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Do not allow arbitrary license combinations, rather only a
-	  fixed set (which we can extend as needed). See bug #670788. 
-
-	* Services.pm: Warn if an .info file uses a field more than once (will soon
-	  be turned into an error).
-
-2003-04-26  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Fix multi line Depends/BuildDepends fields, and slightly
-	  improve detection of malformed dependencies. 
-
-2003-04-15	Ben Hines <benh57@users.sourceforge.net>
-
-    * SelfUpdate.pm: Allow distribution upgrades to work (append fake revision)
-    
-2003-04-08	Ben Hines <benh57@users.sourceforge.net>
-
-    * Services.pm: Allow comments (#) in fink Script fields
-    
-2003-04-05	Ben Hines <benh57@users.sourceforge.net>
-
-	* Many Files: Implement fink master mirroring (Patch #700260).
-	  
-2003-04-04  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (set_env): Fix for environment variables that contain a '='
-	  in their value (fix by Daphne Pfister).
-
-2003-03-30  Max Horn  <max@quendi.de>
-
-	* Validation.pm: There are no NoSourceNDirectory fields (i.e. with a
-	  number).
-
-2003-03-20  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (run_script): Backup the environment before clearing it
-	  via set_env; then after running the script, restore it.
-
-2003-03-07	Ben Hines <benh57@users.sourceforge.net>
-
-	* Engine.pm: Add 'ignore-restrictive' option to "fetch-missing", 
-	  to support creating fink mirrors.
-	
-2003-03-05	Ben Hines <benh57@users.sourceforge.net>
-
-	* PkgVersion.pm: Add section to dpkg control file (should prevent "unknown
-	  section" for unstable locally built binaries in dselect) and correct root
-	  dir error typo.
-	
-2003-02-28  Max Horn  <max@quendi.de>
-
-	* Package.pm: Reverting a "fix" from 2003-01-27 (no ChangeLog entry was
-	  made) which causes the package DB file to grow ad infinitum (unless a
-	  manual "fink index" is performed). A proper fix for the issue this was
-	  meant to fix has yet to be added.
-
-2003-02-27  Max Horn  <max@quendi.de>
-
-	* Engine.pm: Fixed "fink list" output (some whitespaces were converted to
-	  tabs but shouldn't have been).
-
-	* All files: Changed from indent/tab style 2/8 (strange emacs style) to
-	  the more common 4/4 style.
-
-	* Engine.pm: Seperated the help texts for "fink list" and "fink apropos".
-	  Also clarified and unified their wording.
-
-2003-02-17  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* Config.pm, Status.pm: provide virtual package for cctools (Patch #687178).
-
-2003-02-16  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm: Use /sbin/md5 for md5sums if present (Patch #675893).
-	  
-2003-02-16  Max Horn  <max@quendi.de>
-
-	* Package.pm, PkgVersion.pm, SelfUpdate.pm, Services.pm: Added Ben Hines
-	  patch for epoch support (Patch #607742).
-	  
-	* Validation.pm: Make package validator recognize the new Epoch field.
-
-2003-01-29 Ben Hines <benh57@users.sourceforge.net>
-
-	* Package.pm: Do not require storable to create index (Bug #676512).
-	  
-2003-01-28  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* Engine.pm: Adjust dependencies when working with multiple
-	splitoffs at the same time (Bug #641462).
-
-2003-01-24  Max Horn  <max@quendi.de>
-
-	* Package.pm: Carsten Klapp's patch to speed up search_comparedb and
-	  update_db, which speeds up many fink commands a bit (Patch #674313).
-	
-	* Services.pm: Tiny optimization in expand_percent.
-	
-	* Validation.pm: Fix validation if not BuildPath is specified in fink.conf.
-
-2003-01-23  Max Horn  <max@quendi.de>
-
-	* Services.pm: Added Paul Gaborit's patch to speed up expand_percent and 
-	  hence index building.
-
-2003-01-22  Ben Hines <benh57@users.sourceforge.net>
-
-	* Engine.pm, Package.pm: Match "fink list" & "install/remove/etc"
-	  items case-insensitively (Patch #622663).
-	  
-2003-01-22  Max Horn  <max@quendi.de>
-
-	* Various files: Applied Chris Zubrzycki's build directory patch which
-	  allows the use of an alternate build dir (Patch #658682).
-
-2003-01-18  Dave Morrison  <dmrrsn@users.sourceforge.net>
-
-	* Validation.pm:  Allow a new license "Restrictive/Distributable"
-	  to indicate that distribution of binaries is allowed even though
-	  the license is restrictive.
-	
-2003-01-15  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Putting stuff inside /sw/src is illegal for a .deb,
-	  but just containing /sw/src is fine (as long as it is empty).
-
-2003-01-14  Max Horn  <max@quendi.de>
-
-	* Engine.pm, Services.pm: Fixing problems with exit codes (Patch #662894).
-
-	* Engine.pm: 'fink apropos' command now also matches the package name,
-	  not just the package description (Patch #661169).
-
-	* Services.pm: Added terminal width fix from patch #598402.
-
-2003-01-13  Finlay Dobbie <finlay@users.sourceforge.net>
-
-	* PkgVersion.pm (merge): Added warning to if we try to merge a 
-	non-dummy package.
-	
-2003-01-12  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* all files: updated copyright notice to include 2003
-
-2003-01-12  Finlay Dobbie <finlayd@users.sourceforge.net>
-
-	* PkgVersion.pm: Fix splitoff dependency problem (Bug #641466).
-	Also removed the really old "pkg <blah> version ###" text, finally.
-	
-	* Package.pm: Moved to custom find code for scan_packages. Hopefully
-	safer, possibly slightly faster, but I doubt it.
-	
-2003-01-07  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Warn if MD5 field(s) is/are missing.
-
-2003-01-05  Justin F. Hallett <thesin@users.sourceforge.net>
-
-	* Engine.pm:  Added sub phase_purge
-
-	* PkgVersion.pm:  Added sub cmd_purge and change fink purge to
-	acctually do a dpkg purge
-
-2003-01-02  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* Services.pm:  One-liner fix to get rid of an undefined warning
-
-2002-12-24  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* Validation.pm:  Perl syntax fixes (thanks to Randal Schwartz)
-
-2002-12-23  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm:  Back out the proposed changes to default values
-	for the environment variables CPPFLAGS, LDFLAGS, LIBRARY_PATH, and
-	DYLD_LIBRARY_PATH, which have been moved to the CVS branch "isystem"
-	for further testing.
-
-2002-12-23  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm, Validation.pm:  Allow the MACOSX_DEPLOYMENT_TARGET
-	environment variable to be set in Fink. (Patch # 652716).
-
-2002-12-22  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm: Fix bootstrapping problem caused by giving full
-	path-name to install-info.
-
-2002-12-19  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm: Allow whitespace after here-document separators.
-	
-2002-12-11  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm, PkgVersion.pm: Pass filename to read_properties_var to 
-	  clarify here-document error.
-	
-2002-12-11  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* PkgVersion.pm: Added a key to the package object to track the
-	"siblings" of a package.
-
-	* Engine.pm: Added some code to check for sibling packages that are
-	already installed or due to be installed, so that the user does not
-	get asked to install something unless necessary (ie, if libungif-shlibs
-	is already installed, it won't ask to choose between giflib and libungif).
-	Also changed some of the other code to use the new "sibling" attribute
-	from the PkgVersion.pm change above.
-
-2002-12-04  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* SelfUpdate.pm: Modify the test used during the non-CVS version of 
-	fink selfupdate to check CURRENT_VERSION and download the file named 
-	dists-###.tar.gz (rather than LATEST_VERSION and 
-	packages-###.tar.gz)
-
-2002-11-18  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Patch #608920: Add --keep-root-dir and --keep-build-dir.
-
-2002-11-14  Justin Hallett <thesin@users.sourceforge.net>
-
-	* Engine.pm: fixed scanpackage default section to use proper value.
-
-2002-11-13  Max Horn  <max@quendi.de>
-
-	* Engine.pm: Install build dependencies when doing a rebuild (bug #637689).
-
-2002-11-13  Chris Zubrzycki <beren12@users.sf.net>
-
-	* PkgVersion.pm: Fix the path of install-info. It is in %p/sbin, not %p/bin
-
-2002-11-12  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Apparently the install-info of texinfo is incompatible with
-	 the dpkg one. Hence we reverse the previous change and instead harcode the
-	 location of our install-info.
-
-2002-11-11  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Use "--info-dir" instead of "--infodir" as argument to 
-	  the install-info command (this should prevent problems with texinfo
-	  version of install-info).
-
-2002-10-31  Max Horn  <max@quendi.de>
-
-	* Engine.pm: When we we build a package which we are not going to install
-	  (e.g. as consequence of a 'fink build foo'), only resolve the build time
-	  dependencies, not install-time deps (currently this only affects splitoffs
-	  which depends on a sibling).
-
-	* PkgVersion.pm: Build deps of a splitoff are equivalent to the parent's.
-	
-	* PkgVersion.pm: Fixed typos, clarified/extended some comments.
-
-	* PkgVersion.pm: Set DYLD_LIBRARY_PATH, too. This  allows libtool to find
-	  its *.la files in /sw/lib again.
-
-2002-10-27  Max Horn  <max@quendi.de>
-
-	* Mirror.pm: Never use "retry same mirror" as initial default choice if 
-	  there are other mirrors.
-	
-	* PkgVersion.pm: CPPFLAGS=-no-cpp-precomp + CPATH doesn't work correctly
-	  with tar and probably many other packages. With -isystem, everything seems
-	  fine now.
-
-2002-10-25  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Fixed bootstrap (my last change broke it).
-
-	* PkgVersion.pm: Instead of the old default values for CPPFLAGS and LDFLAGS,
-	  we now set CPATH and LIBRARY_PATH to point to the Fink include/lib dirs.
-	  This should avoid many problem encountered in the past. However, it may
-	  also break a few existing packages.
-	  Since the Apple C preprocessor seems to ignore CPATH, we also set 
-	  by default -no-cpp-precomp (many packages need this anyway).
-
-	* Validation.pm: recognize (No)SetCPATH and (No)SetLIBRARY_PATH fields.
-
-2002-10-21  Ben Hines <benh57@users.sourceforge.net>
-
-	* Services.pm: Fix typo in nesting too deep error.
-	
-2002-10-15  Max Horn  <max@quendi.de>
-
-	* Engine.pm: Fixed a wrong 'circular dependencies' error caused by my 
-	  recent changes.
-
-2002-10-14  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Recognize Tar??FilesRename field
-
-	* Engine.pm: Once more install all splitoffs with a single call to dpkg
-	  (this is done to avoid certain update troubles with splitoffs).
-
-	* PkgVersion.pm: Allow percent expansion in CustomMirror field
-	 (patch #621175, thanks to Ben Hines)
-
-	* Engine.pm: Rewrote parts of real_install to hopefully make it cleaner,
-	  easier to understand, and less buggy when it comes to splitoffs.
-
-2002-10-12 Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* PkgVersion.pm: When a Shlibs field is present, write its contents 
-	into DEBIAN/shlibs when building the deb
-
-	* Validation.pm: Added Shlibs field
-	
-2002-10-10  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Added RunTimeVars field; warn if description ends with "."
-
-2002-10-04  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* Engine.pm: Another small patch to the splitoff code.  This patch
-	  changes the checking for flags (reinstall, rebuild, etc.) to match
-	  the code used for installing the primary package, and it makes
-	  sure that the parent splitoff is the last one installed on the
-	  dpkg command-line to fix goofy dpkg ordering issues.
-
-2002-09-28  Ben Hines <benh57@users.sourceforge.net>
-
-	* PkgVersion.pm, NetAccess.pm: Patch 612681: Allow "continue" 
-	  for bad MD5 during "fink install... "
-
-	* PkgVersion.pm: Fix Axel problem with partial downloads
-
-	* PkgVersion.pm: Change some tarballs to "file"s
-
-2002-09-28  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* Engine.pm: small patch to fix 'fink rebuild' and possibly some other
-	  buglets that could sneak through.  If a package has splitoffs, it was
-	  sometimes getting marked as "already activated" even if it was set to
-	  be explicitly reinstalled.
-
-2002-09-25  Benjamin Reed <rangerrick@users.sourceforge.net>
-
-	* Engine.pm: fixed so that the rest of a splitoff doesn't get
-	  reinstalled if just one package from the splitoff is being installed
-
-	* PkgVersion.pm: fixes the get_fullname bug when a dependency
-	  doesn't exist
-
-	* PkgVersion.pm: moved the code that checks for existing versions
-	  in the package tree when resolving dependencies -- in some cases
-	  it could die because a package that wasn't supposed to exist was
-	  getting marked as being there
-
-2002-09-25  Ben Hines <benh57@users.sourceforge.net>
-
-	* PkgVersion.pm: Patch #614133: fix gnome mirror
-
-2002-09-19  Max Horn  <max@quendi.de>
-
-	* Engine.pm, Package.pm, PkgVersion.pm: Patch #610249: fix for the 'node 
-	  exists' bug (bug #60016)
-
-2002-09-08  Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* Config.pm: adds $distribution (read from the config file) as
-	  an exported item
-
-	* SelfUpdate.pm: now checks out the "dists" CVS module rather
-	  than the "packages" one (still as the "fink" directory).  
-	  This contains a "10.2" subdirectory.  Users using 10.1 also 
-	  get a second checkout: "packages/dists" is checked out as 
-	  "fink/10.1".
-
-	* Validation.pm: added the new "gcc" field
-	
-2002-08-21  Max Horn  <max@quendi.de>
-
-	* Engine.pm: Fixed "fink remove" command
-
-2002-08-19  Max Horn  <max@quendi.de>
-
-	* Engine.pm, PkgVersion.pm: Changed the data path for "fink remove" a bit
-
-	* Engine.pm, PkgVersion.pm: Patch #596239 (fink splitoff install changes)
-	  incorporated, improves splitoff handling
-
-	* Validation.pm: Added JarFiles and TarFilesRename fields.
-
-2002-08-11  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Enhanced how the Files field (in splitoffs) is handled:
-	  if the given path starts with a slash, we treat it as relative to %d/%D
-	  otherwise as relative to %i/%I (as we do currently anyway).
-	
-	* Services.pm: Fix for bug #545155 (it was possible to cause infinite
-	  recursion during percent expansion).
-
-2002-08-10  Max Horn  <max@quendi.de>
-
-	* SelfUpdate.pm: Only force a second rebuild of the package database, and 
-	  also only restart Fink if the package manager is being updated.
-
-2002-08-05  Max Horn  <max@quendi.de>
-
-	* Engine.pm (cmd_cleanup): Improved the "fink cleanup" command to also clean
-	  files in /sw/src (only files not directories - removing directories in 
-	  /sw/src is dangerous as it can interupt running builds etc.)
-
-	* Mirror.pm: Don't use mirror timestamp as a mirror (Bug #563182).
-
-2002-08-04  Max Horn  <max@quendi.de>
-
-	* Config.pm, Configure.pm: Fixed verbosity level selection.
-
-	* PkgVersion.pm: Patch #588476 (Java support) by Sylvain Cuaz.
-
-	* Fixed bug #548373 (package DB read thrice). It is not only read twice
-	  (the new package manager may support new features, and thus must rebuild
-	  the database once more)
-
-	* Engine.pm: Patch #588705: Automates passing on the options
-	  (by Sylvain Cuaz)
-
-2002-08-03  Max Horn  <max@quendi.de>
-
-	* Services.pm: Fixed read_properties_multival, it was broken by the
-	  RuntimeVars patch.
-
-	* PkgVersion.pm, Services.pm: Patch #579210: RuntimeVars field added
-	  (thanks to Sylvain Cuaz for this)
-
-2002-07-31  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Small fix to Configure.pm for the verbosity level selection,
-	  which was reported not working. Should be fine now.
-
-2002-07-28  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Added /sbin and /usr/sbin to the clean env since some pkgs need
-	  stuff like chown or chmod to install properly.
-
-2002-07-26  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Changed spacing in fink list easier to use with awk or cut
-	* added a space before pkg list for better seperation of info
-
-2002-07-26  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Services.pm: Fix for the Jag Argument "M-?M-^?M-X" isn't numeric
-	  in numeric eq (==) at /sw/lib/perl5/Fink/Engine.pm line 330, <SW_VERS>
-	  line 2. Bug.  But COLUMNS needs to bet exported in init.{csh, sh}
-
-2002-07-25  Justin F. Hallett  <thesin@users.sourceforge.net>
-
-	* Services.pm: Temp Fix for the Jag Argument "M-?M-^?M-X" isn't numeric
-	  in numeric eq (==) at /sw/lib/perl5/Fink/Engine.pm line 330, <SW_VERS>
-	  line 2. Bug.  Need better fix in future, maybe read $ENV{COLUMNS}
-
-2002-07-25  Max Horn  <max@quendi.de>
-	
-	* PkgVersion.pm: Fixed Bootstrap (use /usr/bin/gnutar if %p/bin/tar is missing)
-
-	* Engine.pm: Little fix that ensures Fink runs even if not on a terminal.
-	
-2002-07-24  Max Horn  <max@quendi.de>
-
-	* Incorporated patch #504498 by Justin F. Hallett which adds the
-	  TarFilesRename and TarNFilesRename field.
-
-	* Incorporated patch #577882 by Sylvain Cuaz which cleans the environment 
-	before building packages.
-
-2002-07-22  Max Horn  <max@quendi.de>
-
-	* Various files: Applied Justin's multi-level verbosity patch.
-
-2002-07-06  Max Horn  <max@quendi.de>
-
-	* Package.pm (scan_all, update_db): Fixed index'ing bug.
-
-2002-06-09  Max Horn  <max@quendi.de>
-
-	* Engine.pm (cmd_cleanup): Added a "fink cleanup" command, still unfinished,
-	but already usable to clean up .deb files.
-
-2002-06-08  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm (bootstrap): Added apt-shlibs to the list of packages that are
-	automatically installed during bootstrap.
-	
-	* Engine.pm (cmd_scanpackages): Made apt-shlibs an "important" package.
-
-	* Package.pm: Implemented use_cache flag - can later be used to add an
-	option to turn off the package cacher temporarily.
-	
-	* SelfUpdate.pm (finish): Include apt-shlibs in the list of packags that are
-	updated upon a selfupdate.
-
-2002-05-28  Max Horn  <max@quendi.de>
-
-	* Services.pm (file_MD5_checksum): Fixed bug caused by certain special
-	characters occuring in filenames passed to this function.
-
-2002-05-28  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (phase_patch, phase_compile, phase_install): Now use the new
-	run_script method; single-shell scripts are now actually usable inside
-	InstallScript and PatchScript.
-
-	* PkgVersion.pm: New method run_script that encapsulates running a script.
-
-2002-05-27  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Accept Source-MD5/SourceN-MD5 as legal fields.
-
-2002-05-26  Max Horn  <max@quendi.de>
-
-	* Engine.pm (do_real_list): Fixed bug that occured when output of 'fink list'
-	was not going to a terminal and --width=auto was specified.
-
-2002-05-25  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Added Source-MD5/SourceN-MD5 fields.
-
-	* Services.pm: Added file_MD5_checksum function.
-
-	* PkgVersion.pm: Make use of the new execute_script function.
-
-	* Services.pm: Added execute_script function (based on patch #534121 by
-	Benjamin Reed).
-
-2002-05-25  Alexander Strange <MrVacBob@mac.com>
-
-	* SelfUpdate.pm (setup_direct_cvs): The hardlink-support test works now.
-
-2002-05-23  Max Horn  <max@quendi.de>
-
-	* Engine.pm (real_install): Under certain condition, splitoffs could have 
-	been activated more than once. This problem fixes this.
-
-2002-05-16  Max Horn  <max@quendi.de>
-
-	* Engine.pm (real_install): Fixed 'fink rebuild' to honor BuildDepends.
-
-2002-05-16  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm (bootstrap): Fixed bootstraping (YASB).
-
-2002-05-11  Max Horn  <max@quendi.de>
-
-	* Engine.pm (cmd_scanpackages): Fixed very stupid bug.
-
-	* Validation.pm (validate_info_file): missing description field now is an
-	error instead of a warning.
-
-2002-05-05  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (enable_bootstrap, disable_bootstrap): fixed for splitoffs
-	(thanks to Sylvain Cuaz for this patch).
-
-2002-05-04  Max Horn  <max@quendi.de>
-
-	* SelfUpdate.pm (do_tarball): Replaced prdownloads URL with mirror 'sourceforge'.
-
-2002-05-02  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (resolve_depends): Fixed bug that made building splitoffs that 
-	depend on their master impossible (affects kdebase package).
-
-2002-05-01  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (get_description): Don't display DescPort and DescPackaging,
-	they are unimportant for the avarage user and developers must look at the
-	.info file anyway.
-
-2002-04-25  Max Horn  <max@quendi.de>
-
-	* Engine.pm (real_install): Fixed bug #546315
-
-2002-04-19  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm, Engine.pm, SelfUpdate.pm: Made storable-pm an "important"
-	package like apt, i.e it will be installed during bootstrap and updated on
-	on selfupdate.
-
-2002-04-15  Max Horn  <max@quendi.de>
-
-	* all: updated copyright notice.
-
-2002-03-31  Max Horn  <max@quendi.de>
-
-	* Package.pm: Now works again if the Storable perl module is not installed.
-
-2002-03-31  Finlay Dobbie <finlayd@users.sourceforge.net>
-
-	* Package.pm: Added support for caching of info files.
-	
-	* Engine.pm: Added an index command to update the cache.
-	
-	* SelfUpdate.pm (do_finish): added hook to update package cache.
-	
-2002-03-26  Justin F. Hallett <thesin@southofheaven.net>
-
-	* PkgVersion.pm: Fixed Type: perl to install the execs into
-	the proper dir and not directly into BASEPATH.
-
-2002-03-21  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: added get_tree function
-	
-	* NetAccess.pm (download_cmd): Added another download method, "axel"
-	(thanks to Alexander Strange)
-
-2002-03-19  Max Horn  <max@quendi.de>
-
-	* Config.pm (initialize): No macosx pseudo package if we are not on
-	Mac OS X!
-
-	* Status.pm (initialize): Fixed macosx version detection on Darwin
-	(obviously there is no Mac OS X version on a pure Darwin system)
-
-2002-03-16  Max Horn  <max@quendi.de>
-	
-	* PkgVersion.pm (resolve_depends): Yet another attempt to fix splitoff
-	build dependencies, hopefully more succesful this time.
-
-2002-03-16 Dave Morrison <dmrrsn@users.sourceforge.net>
-
-	* Validation.pm: Added "SplitOff" to the list of known fields, and 
-	parsing for SplitOff2-SplitOff9
-
-	* Engine.pm: When fink prompts users for a decision about a
-	dependency, it now displays the Descriptions of the packages involved
-	in the decision.
-
-2002-03-16  Max Horn  <max@quendi.de>
-	
-	* Validation.pm: Added "BuildDependsOnly" to the list of known fields
-	
-	* PkgVersion.pm (resolve_depends): Fixed this so that splitoffs and
-	splitoff masters always return the same (correct) build dependencies.
-	
-	* PkgVersion.pm (add_splitoff): Removed annoying debug output ("Found a
-	splitoff")
-		
-	* Services.pm (read_properties_lines): Handle nested heredocs
-	correctly, and if errors are encountered, once more output the
-	affected filename.
-
-2002-03-13  Peter O'Gorman <ogorman@users.sourceforge.net>
-
-	* Engine.pm (do_real_list): Don't read package info first, wait and
-	see if it is needed. Fixed a mistake in the help text.
-
-2002-03-13  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (phase_build): Fix so that root-dirs of splitoffs are
-	properly removed again.
-
-2002-03-13  Peter O'Gorman <ogorman@users.sourceforge.net>
-
-	* Engine.pm: Support for options in apropos and list commands.
-
-	* Services.pm: Added a get_term_width function.
-
-2002-03-09  Max Horn  <max@quendi.de>
-
-	* Engine.pm (cmd_apropos): Fixed apropos commands for strings like "gtk+"
-
-2002-03-07  Max Horn  <max@quendi.de>
-
-	* Engine.pm (real_install): Fix to make rebuilding splitoffs and splitoff
-	master packages work correctly.
-
-	* PkgVersion.pm (initialize): Expand percents in even more fields now:
-	Suggests, Enhances, Recommends and Pre-Depends.
-	(expand_percent_if_available): First converts field parameter to lower case.
-	(phase_install): Fixed some issues with the Files field, and changed the
-	order in which it is processed (now comes before DocFiles, not after)
-
-2002-03-06  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Multitude of changes, implementing initial splitoff 
-	support. Percent expansion is now done in all dependency related fields.
-
-	* Package.pm (inject_description): Return the created PkgVersion object
-	to the called. Used by splitoff code
-
-	* Services.pm (read_properties): Split this function, creating two new
-	called read_properties_var and read_properties_lines, which take a text
-	variable / a list of strings, instead of a file. Used by splitoff code.
-
-2002-02-23  Max Horn  <max@quendi.de>
-
-	* NetAccess.pm (fetch_url_to_file, download_cmd): Allow the user to
-	resume partial downloads.
-	
-	* NetAccess.pm (download_cmd): Added 'DownloadMethod' field to fink.conf
-	(thanks to Christian Swinehart).
-
-	* NetAccess.pm (download_cmd): If we use curl, make sure it treats 
-	error 404 properly, i.e. fail instead of downloading the error page
-	(thanks to Joseph Bauer).
-
-	* Engine.pm (, cmd_fetch_allcmd_fetch_all_missing): keep going even if a
-	single file could not be downloaded. (thanks to Randal L. Schwartz). 
-
-2002-02-01  Max Horn  <max@quendi.de>
-
-	* Validation.pm: deb file validator now warns if files are installed
-	outside of /sw.
-
-2002-01-27  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Warn on unknown licenses.
-
-2002-01-26  Max Horn  <max@quendi.de>
-
-	* Validation.pm: Many more problems are detected now
-
-	* Engine.pm (restart_as_root): Pass on more options to new instance
-
-	* *.pm: Changed to use new is_verbose() function to determine verbosity
-	
-	* Config.pm (is_verbose): New function, returns true if verbose mode is on
-
-	* Validation.pm: Only be verbose in verbose mode
-
-	* Validation.pm: Warn on missing license field
-
-2002-01-11  Max Horn  <max@quendi.de>
-
-	* FinkVersion.pm.in: If /sw/fink/VERSION is missing, now tries to look
-	at the old /sw/etc/fink-release file instead.
-
-2002-01-10  Max Horn  <max@quendi.de>
-
-	* FinkVersion.pm.in: moved fink-release from /sw/etc to /sw/fink and
-	renamed it to VERSION to match with other modules
-
-	* SelfUpdate.pm: fixed selfupdate, it would hang when trying to
-	uncompress the package tar ball.
-
-2002-01-05  Max Horn  <max@quendi.de>
-
-	* Validation.pm: fixed stupid mistake
-
-	* Validation.pm: Added /sw/lib/locale to list of deprecated directories;
-	added some new fields to list of allowed fields (not yet used)
-
-2001-12-28  Matthias Neeracher <neeracher@mac.com>
-
-	* Package.pm: Added %package_hash which speeds up some operations
-	enormously.
-
-2001-12-27  Max Horn  <max@quendi.de>
-
-	* Config.pm: Added $darwin_version and $macosx_version, reflecting
-	the kernel/system versions.
-
-	* Status.pm (initialize): Added pseudo packages 'darwin' and 'macosx'
-	which can be used for dependencies on specific kernel/system versions.
-
-2001-12-23  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm (phase_install): Fixed bug occuring when removing the
-	last 'perl' type package using UpdatePOD.
-
-2001-12-21  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm, Package.pm: Allow '+' in package names.
-
-2001-12-20  Max Horn  <max@quendi.de>
-
-	* SelfUpdate.pm (do_direct_cvs): Fixed CVS updating for core developers
-	(CVS_RSH now always is set to 'ssh').
-
-2001-12-12  Justin F. Hallett  <thesin@southofheaven.net>
-
-	* PkgVersion.pm: Added UpdatePOD field, and added value "Perl" for
-	the "type" field to better support perl packages
-
-2001-12-11  Max Horn  <max@quendi.de>
-
-	* Engine.pm (cmd_remove): All packages to be removed are now passed
-	at once to dpkg, thus taking advantage of the advanced dependency
-	resolving mechanism of dpkg.
-
-2001-12-02  Max Horn  <max@quendi.de>
-
-	* PkgVersion.pm: Added percent expansion for SourceRename fields
-
-2001-11-06  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (process): Get rid of the funky "Done." message.
-
-2001-11-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* SelfUpdate.pm (setup_direct_cvs): Made the File::Find routine
-	more robust. Should be able to handle exotic file names now.
-
-2001-11-02  Christoph Pfisterer  <cp@chrisp.de>
-
-	* SelfUpdate.pm: Major rewrite. Now gives the user the choice
-	between tracking point releases (the usual packages-#.#.#.tar.gz
-	procedure) and setting up direct CVS updating.
-	* Engine.pm: Added a selfupdate-cvs command.
-
-2001-11-01  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Mirror.pm (new_from_field): Disabled the case for leaving out
-	the key in custom mirror lists; it doesn't work anyway because the
-	URLs themselves also contain colons. We'll need another separator.
-
-2001-10-27  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (resolve_depends): Make "package not found"
-	non-fatal if there are alternatives.
-
-2001-10-20  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (real_install): Let the user pick one alternative when
-	resolving dependencies with virtual packages.
-
-2001-10-18  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (restart_as_root): Propagate the "--yes" option when
-	restarting as root.
-
-	* Services.pm (prompt, prompt_boolean, prompt_selection): Check
-	the "dontask" a.k.a. "--yes" option and use the default value
-	instead of prompting the user when set.
-
-	* Config.pm: Added infrastructure to propagate command line
-	options: set_options() and get_option().
-
-	* Engine.pm (process): Be more helpful when the user entered an
-	unknown command (contributed by Justin Hallett).
-
-2001-10-17  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Mirror.pm: New class that handles both named and package-local
-	mirror site lists. Retrying is handled more intelligently.
-	* NetAccess.pm: Another major overhaul. Handling of mirrors has
-	been moved to the new Mirror class. That greatly simplified the
-	fetch_url_to_file routine.
-	* PkgVersion.pm: Use the new Mirror class to handle package-local
-	mirrors. The mirror list is parsed on the fly when it is needed.
-
-	* Engine.pm (process): Added a "this command needs root
-	privileges" flag. Minor restructuring.
-	(restart_as_root): New function which re-executes fink as root,
-	passing the current command. Now knows about su if configured.
-
-	* FinkVersion.pm.in: Made independent of Fink::Config. The
-	installation path is now hardcoded during installation, like with
-	fink.in.
-
-2001-10-14  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Services.pm (version_cmp): Hopefully get it right this
-	time. dpkg implicitly separates version and revision before
-	comparing them. As a result the change to fink's comparison
-	function that should fix openssh's version ordering broke
-	openssl's ordering.
-
-2001-10-13  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Services.pm (filename): More general solution to handle mirror:
-	URLs that don't contain a slash.
-
-2001-10-10  Max Horn  <max@quendi.de>
-
-	* Service.pm (filename): Handle fileanames with the mirror: syntax
-	correctly (was broken).
-
-	* PkgVersion.pm (initialize): Parse the new CustomMirror field
-	(fetch_source): pass the custom mirror list to fetch_url_to_file
-
-	* NetAccess.pm: converted tabs to spaces
-	(fetch_url_to_file): some  clean up, now handles "custom" mirrors,
-	code that determines the download cmd moved to a seperate function
-	so that it will be easier to enhance this.
-
-2001-10-09  Christoph Pfisterer  <cp@chrisp.de>
-
-	* FinkVersion.pm.in (pkginfo_version): New function to evaluate
-	the stamp files for package descriptions.
-	* SelfUpdate.pm (check): Use the new pkginfo_version() instead of
-	distribution_version(). Stop dead when CVS updating is
-	detected. Minor text and code fixes.
-
-	* Services.pm (version_cmp): Changed the version comparison to
-	match that of dpkg exactly.
-
-	* SelfUpdate.pm (check): Suppress inject.pl's user info message.
-
-2001-10-07  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (get_tarball): Handle the new SourceRename and
-	Source#Rename fields.
-	(fetch_source): Use get_tarball and fetch_url_to_file to handle
-	on-the-fly renaming. Disabled verbose error messages, failures are
-	handled by fetch_url_to_file. Added tries parameter (passed on to
-	fetch_url_to_file).
-	(phase_unpack): Offer re-downloading when unpacking fails. Let tar
-	handle gzip-compressed files to catch more errors (the shell pipe
-	apparently only returns the last command's error code).
-
-2001-10-05  Christoph Pfisterer  <cp@chrisp.de>
-
-	* NetAccess.pm: Major overhaul. New function fetch_url_to_file
-	allows a target file name to be specified. fetch_url calls through
-	to the new function. mirror: URL's are handled
-	transparently. After obvious failures fetch_url_to_file offers the
-	user to retry the same server or a randomly chosen mirror.
-	* Services.pm (expand_url): Removed mirror expansion code.
-	* PkgVersion.pm (fetch_source): Don't use expand_url, this is now
-	handled transparently by fetch_url.
-
-2001-10-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (cmd_scanpackages): Make sure the directory we're
-	scanning does exist.
-
-2001-09-27  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_patch): New fields UpdateConfigGuessInDirs
-	and UpdateLibtoolInDirs to copy the replacement files directly
-	into a list of subdirectories.
-
-2001-09-21  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_install): Create a small README for bundle
-	packages - dpkg doesn't like empty packages.
-
-2001-09-17  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: More protection against unexpected white space.
-
-	* Services.pm (collapse_space): New function to collapse all white
-	space in a string into a single space. Useful to eliminate
-	newlines in fields that shouldn't have any.
-
-2001-09-13  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (get_binary_depends): Convert newlines to spaces.
-
-2001-09-12  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (resolve_depends): Include build-time dependencies
-	when requested (new field BuildDepends).
-	* Engine.pm (real_install): Check build-time dependencies if the
-	package is going to be built.
-
-2001-09-12  Max Horn  <max@quendi.de>
-
-	* Engine.pm: Added 'apropos' command analog to the Unix 'apropos'
-	
-2001-09-11  Christoph Pfisterer  <cp@chrisp.de>
-
-	* SelfUpdate.pm (check): Adapted to the new structure, check
-	against the distribution version.
-
-	* FinkVersion.pm.in: Added functions to retreive package manager
-	and distribution versions.
-
-	* Services.pm: Resolved circular dependency between Services and
-	Config.
-
-2001-09-09  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Status.pm (read): Make non-existence of the dpkg status file
-	non-fatal.
-
-	* Package.pm (get_matching_versions): Implemented the version
-	comparisons supported by dpkg.
-	* PkgVersion.pm (initialize): Removed special handling for the
-	Depends field.
-	(get_depends): Removed, not needed any more.
-	(resolve_depends): Rewritten to allow versioned dependencies and
-	alternatives.
-	(get_binary_depends): New function to generate dependencies for
-	the .deb.
-	(phase_build): Use get_binary_depends for the Depends field. Added
-	Recommends, Suggests, Enhances and Pre-Depends.
-
-2001-09-07  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Bootstrap.pm: Create dpkg status area earlier.
-
-2001-09-06  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Status.pm (list): Added list() method to retreive the whole
-	list, independent of installation status.
-	* Package.pm (scan_all): Get list of known packages from dpkg and
-	merge it into the info read from files.
-	(inject_description): New function to centralize creation of
-	version objects.
-	* PkgVersion.pm: Added checks for dummy packages created from the
-	dpkg status file.
-
-2001-09-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (cmd_scanpackages): Fixes to section and priority
-	determination.
-
-	* Config.pm (initialize): Bail out if Basepath is not set in the
-	config file.
-
-2001-09-03  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Services.pm: Removed obsolete FindBin import.
-
-	* Package.pm: Enable on-demand loading of package descriptions
-	through require_packages().
-	* Engine.pm: Use require_packages() for on-demand loading of
-	package descriptions. Fixed the flag for some commands. Adapted
-	the rescan command.
-	* Bootstrap.pm: Use require_packages() instead of cmd_rescan().
-	* SelfUpdate.pm: Use require_packages() to reload package info
-	after update.
-
-	* Engine.pm: Load specialized modules on demand only.
-
-2001-09-03  Max Horn  <max@quendi.de>
-
-	* Bootstrap.pm: Fixed bootstrap by forcing the package descriptions
-	to be read in.
-
-2001-08-31  Christoph Pfisterer  <cp@chrisp.de>
-
-	* NetAccess.pm (fetch_url): Let curl follow redirects.
-
-2001-08-29  Christoph Pfisterer  <cp@chrisp.de>
-
-	* NetAccess.pm (fetch_url): Support curl as well as wget.
-
-	* Configure.pm (configure): Passive FTP is now the default.
-
-	* PkgVersion.pm (phase_install): Added DocFiles field to ease
-	installation of README files.
-
-2001-08-28  Max Horn  <max@quendi.de>
-
-	* Validation.pm: made sure that validate also works when the
-	specified filename contains a path; upped limit for Description
-	field to 45 chars, seems to be sufficient for "fink list"
-
-2001-08-26  Max Horn  <max@quendi.de>
-
-	* Validation.pm: New Module. Contains the code for validation of
-	both .info and .deb files.
-	* Engine.pm: moved validation code to new module.
-
-2001-08-26  Max Horn  <max@quendi.de>
-
-	* Engine.pm: added new command "validate" (alias "check") which
-	validates a given package .info file or .deb file. Not finished.
-
-2001-08-24  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (get_description): Added the Maintainer field to
-	'fink describe' output.
-
-	* Bootstrap.pm (bootstrap): Added code to install some
-	non-essential, but important packages at bootstrap time. Currently
-	installs apt.
-
-2001-08-22  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_patch): Added support for
-	UpdatePoMakefile. When set, copy the updated Makefile.in.in to the
-	po subdirectory of the source tree.
-
-2001-08-14  Christoph Pfisterer  <cp@chrisp.de>
-
-	* SelfUpdate.pm: New module. Contains code to let Fink update
-	itself from the Internet.
-	* Engine.pm: Added self-update commands to the command list.
-	* NetAccess.pm: New module. Encapsulates downloading files from
-	the Internet (currently done via wget).
-	* PkgVersion.pm (fetch_source): wget invocation code moved to the
-	new NetAccess module.
-
-2001-08-08  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Status.pm: New module. Parses the dpkg status file to find the
-	installation status of packages.
-	* PkgVersion.pm: Use Fink::Status to get the installed status of
-	packages. Got rid of .../var/fink-stamp.
-
-2001-08-06  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Services.pm (read_properties): Fixed regular expressions to
-	really remove trailing whitespace.
-	(read_properties_multival): Likewise.
-
-	* Engine.pm (real_install): Added check to catch endless loops
-	caused by circular dependencies.
-
-2001-07-30  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Provide the full path to the build directory in
-	the expansion %b.
-
-2001-07-22  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Added new package type 'nosource'.
-
-2001-07-21  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Bootstrap.pm (bootstrap): Create empty 'diversions' file for
-	dpkg-divert during bootstrap.
-
-	* Engine.pm: Added 'desc' and 'info' as aliases for the
-	'description' command. Suggested by Max Horn.
-
-2001-07-13  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (get_description): Added optional style
-	parameter.
-
-	* Package.pm: Make sure the PkgVersion.pm module is loaded.
-
-	* PkgVersion.pm (phase_build): Added support to automatically
-	install / remove Info documents.
-
-2001-07-07  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Services.pm (read_properties): Ignore trailing white space.
-	(read_properties_multival): Likewise.
-
-	* Engine.pm: Added commands for a human-readable (list) and a
-	machine-readable (listpackages) package listing.
-
-	* PkgVersion.pm: Added method get_shortdescription to get just the
-	one line description.
-
-2001-07-05  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (real_install): Optionally print list of requested
-	packages that will actually be installed/built/whatever.
-	(cmd_update_all): Always show the list described above.
-
-	* Configure.pm (configure): Added proxy and firewall
-	settings. Cosmetic output formatting changes.
-	(choose_mirrors): Remember continent and country in the config
-	file. Offer the current settings as default values.
-	* PkgVersion.pm (fetch_source): Support new proxy and firewall
-	settings.
-
-	* Config.pm (set_param): Handle empty values.
-	(save): Remove keys that are set to empty values from the file.
-
-2001-06-30  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Package.pm (scan): Don't try to scan non-existing directories.
-
-2001-06-28  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_build): Added support for inline daemonic
-	service description file.
-
-2001-06-22  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Bootstrap.pm: Use the new dpkg-bootstrap package during
-	bootstrap phase two.
-
-	* Engine.pm (cmd_fetch_missing): Fix handling of partially fetched
-	packages.
-
-	* PkgVersion.pm: Provide full package name in all error messages.
-
-2001-06-17  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Automatically create section name from
-	path. Search parent directories for .deb files.
-	* Engine.pm (cmd_scanpackages): Write section to override file.
-
-	* Engine.pm (real_install): Added preliminary virtual package
-	support.
-	* Package.pm (scan): Add the right object to the provider list.
-	* PkgVersion.pm (initialize): Removed special treatment for x11 in
-	dependency list.
-
-2001-06-16  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: New methods to retreive dependency and conflict
-	lists. Cache result of is_installed.
-
-2001-06-14  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm: Catch pure virtual packages in cmd_fetch_all and
-	cmd_fetch_all_missing.
-
-2001-06-13  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Removed get_onlyversion.
-
-2001-06-12  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Make some 'rm -rf' failures non-fatal.
-
-2001-06-06  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Package.pm: Virtual packages, step 1 - keeping track of the
-	Provides in the data structures. Also, ignore files that start
-	with a dot (.) or a hash (#).
-	* PkgVersion.pm: Pass Provides, Replaces and Conflicts on to
-	dpkg.
-
-2001-06-05  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm: Make sure only missing tarballs are fetched, not
-	whole packages at a time.
-	* PkgVersion.pm (phase_fetch): Optionally fetch only missing
-	individual tarballs, instead of whole-package or none.
-
-2001-06-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_build): Add symlink to built packages in
-	<prefix>/fink/debs to make sure they can be found even after
-	moving the descriptions around.
-
-	* Engine.pm (cmd_description): Small formatting change.
-
-2001-06-01  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_build): Use get_description to get the
-	package description for the dpkg control file.
-	(get_description): Improved formatting and added new fields.
-	* Engine.pm (cmd_description): Improved formatting.
-
-2001-05-26  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Do percent expansion on SourceDirectory and
-	Source#ExtractDir.
-
-2001-05-24  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (cmd_scanpackages): Generate and use an override
-	file.
-
-	* PkgVersion.pm (phase_build): Added conffiles handling.
-
-2001-05-23  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm: New command 'scanpackages' to generate Packages.gz
-	files using dpkg-scanpackages.
-
-	* PkgVersion.pm (phase_build): Apply percent expansions to package
-	scripts.
-	(match_package): Be more quiet if verbose output is not set.
-
-2001-05-18  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_build): Added support for package scripts.
-
-	* Services.pm (read_config): Removed dead code.
-	(read_properties): Added here-document support.
-
-	* Engine.pm (real_install): Fixed the don't-fetch-unless-needed
-	check.
-
-2001-05-11  Finlay Dobbie  <finlay.dobbie@btinternet.com>
-
-	* PkgVersion.pm: get_description() implemented, for use in fink
-	description <package>
-	* Engine.pm: fink description implemented
-
-2001-05-11  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (initialize): Dependencies must be separated by a
-	comma now; a space is no longer sufficient. (Result of merging
-	dpkg-branch and HEAD.)
-	* Engine.pm (real_install): Added code to add all essential
-	packages to the dependency list of non-essential packages. (Result
-	of merging dpkg-branch and HEAD.)
-
-2001-05-08  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (find_debfile): Also search <prefix>/fink/debs for
-	.deb files.
-
-	* Engine.pm (real_install): Only fetch when we need the tarballs
-	later.
-
-2001-05-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_activate): Detect dpkg malfunction
-	(incomplete extraction) and offer to retry.
-
-2001-05-02  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Base.pm (param_default): Fixed default handling.
-
-2001-04-28  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Honor verbosity setting during fetch and
-	unpack. Provide tips after download failures.
-	* Configure.pm: Add interactive configuration for the verboseness
-	setting.
-	* Services.pm: New function print_breaking_twoprefix. Removed
-	obsolete find_stow.
-
-2001-04-24  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Bootstrap.pm: Fetch all packages at the beginning of the
-	bootstrap.
-	* Engine.pm: Renamed cmd_fetch_missing to
-	cmd_fetch_all_missing. New routine cmd_fetch_missing that takes a
-	package list.
-
-2001-04-22  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Handle .zip files. Source files with an unknown
-	extension are copied to the unpacking directory. Check build
-	directory for existence.
-
-2001-04-20  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_install): Remove dir files in the info
-	directories (was removed during the dpkg move).
-
-2001-04-14  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm: Changed internals of real_install. The first
-	parameter to real_install is now one of the defined constants
-	designating an operation. New commands: rebuild, reinstall.
-
-	* PkgVersion.pm: Create DEBIAN directory during install
-	phase. Mark essential packages as essential in dpkg control file.
-
-2001-04-12  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (real_install): Don't deactivate older revisions of a
-	package before installing the new revision. dpkg takes care of
-	upgrading itself, and refuses to violate dependencies.
-
-2001-04-11  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Handle duplicate package descriptions in
-	different directories.
-	* Package.pm (add_version): Merge info if version is already
-	present.
-
-2001-04-10  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm: Use the new scan_all method.
-	* Package.pm: Added method scan_all to scan all trees listed in
-	the config file.
-	* Config.pm: Added method get_treelist.
-
-2001-04-05  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Config.pm: New variable $libpath, pointing at the directory for
-	support files.
-	* Configure.pm: Removed umask code. Use $libpath. Fixed wrong
-	method call.
-	* Engine.pm: Removed umask code. Call Fink::Package->scan on the
-	correct directory in the new layout (temporary, hardcoded
-	solution).
-	* Package.pm (scan): Use File::Find to recursively search
-	directories. Read all files with the extension '.info'. Pass the
-	filename to the PkgVersion object for processing.
-	* PkgVersion.pm: Use $libpath. Use the description file path
-	passed by Fink::Package::scan to generate paths to the patch and
-	to the binary .deb. New accessors for the .deb path. Other small
-	fixes.
-
-	* Services.pm (prompt_boolean): Fixed regular expression
-	recognizing 'yes' answers.
-
-2001-04-03  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_activate): Removed sudo from dpkg
-	invocation command line.
-
-	* Bootstrap.pm: Refined bootstrap.
-	* Package.pm: New function list_essential_packages.
-	* Services.pm (execute): Added quiet flag.
-
-2001-04-01  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: Added accessor for .deb name. Use accessors
-	wherever possible instead of direct access. Use $debarch
-	variable. Add a dummy Description to the control file.
-	* Config.pm: Added $debarch variable.
-
-2001-03-31  Christoph Pfisterer  <cp@chrisp.de>
-
-	* FinkVersion.pm: Set version number to "pre-0.2.0".
-
-	* PkgVersion.pm: Major changes to support dpkg and
-	bootstrapping. Added qualifiers to import list.
-	* Bootstrap.pm: Separated bootstrap from interactive
-	configuration. Massive changes to bootstrap with dpkg.
-	* Configure.pm: New module for interactive configuration. Only
-	minor changes from the old Bootstrap.pm.
-	* Engine.pm: Separated bootstrap from interactive
-	configuration. Added call to phase_build().
-
-2001-03-30  Christoph Pfisterer  <cp@chrisp.de>
-
-	* FinkVersion.pm: Bumped version number to 0.1.7.
-
-2001-03-28  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm (phase_install): Removes build dir after
-	successful build unless KeepBuildDir is set in the configuration.
-	* FinkVersion.pm: Set version number to "post-0.1.6".
-
-2001-03-21  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Engine.pm (real_install): Added check to catch unknown packages
-	that are mentioned in a dependency list.
-
-2001-03-08  Christoph Pfisterer  <cp@chrisp.de>
-
-	* FinkVersion.pm: Bumped version number to 0.1.6.
-
-	* Bootstrap.pm (choose_mirrors): Read mirror list from a file
-	instead of just using all files in the directory.
-
-2001-03-05  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: added support for bundle packages (no source,
-	only dependecies).
-
-2001-03-04  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: added code to disable the defaults for
-	environment variables (e.g. NoSetCPPFLAGS: true).
-
-2001-03-01  Christoph Pfisterer  <cp@chrisp.de>
-
-	* PkgVersion.pm: added support for multiple tarballs per package.
-
-2001-02-24  Christoph Pfisterer  <cp@chrisp.de>
-
-	* FinkVersion.pm: new module for storing the version number.
-
-2001-02-18  Christoph Pfisterer  <cp@chrisp.de>
-
-	* Released version 0.1.5. Started using CVS and ChangeLogs.
-
diff -ruN fink/perlmod/Fink/PkgVersion.pm fink.-j/perlmod/Fink/PkgVersion.pm
--- fink/perlmod/Fink/PkgVersion.pm	Sat Aug 16 21:11:15 2003
+++ fink.-j/perlmod/Fink/PkgVersion.pm	Sat Aug 16 21:12:23 2003
@@ -1905,9 +1905,16 @@
 
 sub set_env {
 	my $self = shift;
-	my ($varname, $s, $expand);
+	my ($varname, $s, $expand, $procs);
+	if ($config->has_param("Processors")) {
+		### Add -j <proc number> to MAKEFLAGS
+		$procs = $config->param("Processors");
+	} else {
+		$procs = 1;
+	}
 	my %defaults = ( "CPPFLAGS" => "-I\%p/include",
-					 "LDFLAGS" => "-L\%p/lib" );
+					"LDFLAGS"   => "-L\%p/lib",
+					"MAKEFLAGS" => "-j $procs" );
 	my $bsbase = Fink::Bootstrap::get_bsbase();
 
 	# clean the environment
@@ -1937,7 +1944,7 @@
 					  "LD", "LDFLAGS", 
 					  "LIBRARY_PATH", "LIBS",
 					  "MACOSX_DEPLOYMENT_TARGET",
-					  "MAKE", "MFLAGS") {
+					  "MAKE", "MFLAGS", "MAKEFLAGS") {
 		if ($self->has_param("Set$varname")) {
 			$s = $self->param("Set$varname");
 			if (exists $defaults{$varname} and
diff -ruN fink/perlmod/Fink/PkgVersion.pm.orig fink.-j/perlmod/Fink/PkgVersion.pm.orig
--- fink/perlmod/Fink/PkgVersion.pm.orig	Sat Aug 16 20:56:56 2003
+++ fink.-j/perlmod/Fink/PkgVersion.pm.orig	Wed Dec 31 17:00:00 1969
@@ -1,1995 +0,0 @@
-#
-# Fink::PkgVersion class
-#
-# Fink - a package manager that downloads source and installs it
-# Copyright (c) 2001 Christoph Pfisterer
-# Copyright (c) 2001-2003 The Fink Package Manager Team
-#
-# This program is free software; you can redistribute it and/or
-# modify it under the terms of the GNU General Public License
-# as published by the Free Software Foundation; either version 2
-# of the License, or (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA	 02111-1307, USA.
-#
-
-package Fink::PkgVersion;
-use Fink::Base;
-use Fink::Services qw(&filename &execute &execute_script
-					  &expand_percent &latest_version
-					  &print_breaking &print_breaking_twoprefix
-					  &prompt_boolean &prompt_selection
-					  &collapse_space &read_properties_var
-					  &file_MD5_checksum &version_cmp
-					  &get_arch);
-use Fink::Config qw($config $basepath $libpath $debarch $buildpath);
-use Fink::NetAccess qw(&fetch_url_to_file);
-use Fink::Mirror;
-use Fink::Package;
-use Fink::Status;
-use Fink::VirtPackage;
-use Fink::Bootstrap qw(&get_bsbase);
-
-use File::Basename qw(&dirname);
-
-use strict;
-use warnings;
-
-BEGIN {
-	use Exporter ();
-	our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);
-	$VERSION	 = 1.00;
-	@ISA		 = qw(Exporter Fink::Base);
-	@EXPORT		 = qw();
-	@EXPORT_OK	 = qw();	# eg: qw($Var1 %Hashit &func3);
-	%EXPORT_TAGS = ( );		# eg: TAG => [ qw!name1 name2! ],
-}
-our @EXPORT_OK;
-
-END { }				# module clean-up code here (global destructor)
-
-
-### self-initialization
-sub initialize {
-	my $self = shift;
-	my ($pkgname, $epoch, $version, $revision, $filename, $source, $type);
-	my ($depspec, $deplist, $dep, $expand, $configure_params, $destdir);
-	my ($parentpkgname, $parentdestdir);
-	my ($i, $path, @parts, $finkinfo_index, $section);
-	my $arch = get_arch();
-
-	$self->SUPER::initialize();
-
-	$self->{_name} = $pkgname = $self->param_default("Package", "");
-	$self->{_version} = $version = $self->param_default("Version", "0");
-	$self->{_revision} = $revision = $self->param_default("Revision", "0");
-	$self->{_epoch} = $epoch = $self->param_default("Epoch", "0");
-	$self->{_type} = $type = lc $self->param_default("Type", "");
-	# split off perl version number, when given with the type
-	if ($type =~ s/^perl\s+([0-9]+\.[0-9]+\.[0-9]+)/perl/) {
-		$self->{_perlversion} = $1;
-		$self->{_type} = $type;
-	}
-	# the following is set by Fink::Package::scan
-	$self->{_filename} = $filename = $self->{thefilename};
-
-
-	# path handling
-	if ($filename) {
-		@parts = split(/\//, $filename);
-		pop @parts;		# remove filename
-		$self->{_patchpath} = join("/", @parts);
-		for ($finkinfo_index = $#parts;
-				 $finkinfo_index > 0 and $parts[$finkinfo_index] ne "finkinfo";
-				 $finkinfo_index--) {
-			# this loop intentionally left blank
-		}
-		if ($finkinfo_index <= 0) {
-			die "Path \"$filename\" contains no finkinfo directory!\n";
-		}
-		
-		# compute the "section" of this package, e.g. "net", "devel", "crypto"...
-		$section = $parts[$finkinfo_index-1]."/";
-		if ($finkinfo_index < $#parts) {
-			$section = "" if $section eq "main/";
-			$section .= join("/", @parts[$finkinfo_index+1..$#parts])."/";
-		}
-		$self->{_section} = substr($section,0,-1);	 # cut last /
-		$parts[$finkinfo_index] = "binary-$debarch";
-		$self->{_debpath} = join("/", @parts);
-		$self->{_debpaths} = [];
-		for ($i = $#parts; $i >= $finkinfo_index; $i--) {
-			push @{$self->{_debpaths}}, join("/", @parts[0..$i]);
-		}
-		
-		# determine the package tree ("stable", "unstable", etc.)
-				@parts = split(/\//, substr($filename,length("$basepath/fink/dists/")));
-		$self->{_tree}	= $parts[0];
-	} else {
-		# for dummy descriptions generated from dpkg status data alone
-		$self->{_patchpath} = "";
-		$self->{_section} = "unknown";
-		$self->{_debpath} = "";
-		$self->{_debpaths} = [];
-		
-		# assume "binary" tree
-		$self->{_tree} = "binary";
-	}
-
-	# some commonly used stuff
-	$self->{_fullversion} = (($epoch ne "0") ? "$epoch:" : "").$version."-".$revision;
-	$self->{_fullname} = $pkgname."-".$version."-".$revision;
-	$self->{_debname} = $pkgname."_".$version."-".$revision."_".$debarch.".deb";
-	# percent-expansions
-	$configure_params = "--prefix=\%p ".
-		$self->param_default("ConfigureParams", "");
-	$destdir = "$buildpath/root-".$self->{_fullname};
-	if ($self->{_type} eq "splitoff") {
-		my $parent = $self->{parent};
-		$parentpkgname = $parent->{_name};
-		$parentdestdir = "$buildpath/root-".$parent->{_fullname};
-	} else {
-		$parentpkgname = $pkgname;
-		$parentdestdir = $destdir;
-		$self->{_splitoffs} = [];
-	}
-	$expand = { 'n' => $pkgname,
-				'e' => $epoch,
-				'v' => $version,
-				'r' => $revision,
-				'f' => $self->{_fullname},
-				'p' => $basepath,
-				'd' => $destdir,
-				'i' => $destdir.$basepath,
-				'm' => $arch,
-
-				'N' => $parentpkgname,
-				'P' => $basepath,
-				'D' => $parentdestdir,
-				'I' => $parentdestdir.$basepath,
-
-				'a' => $self->{_patchpath},
-				'c' => $configure_params,
-				'b' => '.'
-			};
-
-	$self->{_expand} = $expand;
-
-	$self->{_bootstrap} = 0;
-
-	# expand percents in various fields
-	$self->expand_percent_if_available('BuildDepends');
-	$self->expand_percent_if_available('Conflicts');
-	$self->expand_percent_if_available('Depends');
-	$self->expand_percent_if_available('Enhances');
-	$self->expand_percent_if_available('Pre-Depends');
-	$self->expand_percent_if_available('Provides');
-	$self->expand_percent_if_available('Recommends');
-	$self->expand_percent_if_available('Replaces');
-	$self->expand_percent_if_available('Suggests');
-
-	# from here on we have to distinguish between "real" packages and splitoffs
-	if ($self->{_type} eq "splitoff") {
-		# so it's a splitoff
-		my ($parent, $field);
-
-		$parent = $self->{parent};
-		
-		if ($parent->has_param('maintainer')) {
-			$self->{'maintainer'} = $parent->{'maintainer'};
-		}
-		if ($parent->has_param('homepage')) {
-			$self->{'homepage'} = $parent->{'homepage'};
-		}
-		if ($parent->has_param('essential')) {
-		    $self->{'_parentessential'} = $parent->{'essential'};
-		}
-
-		# handle inherited fields
-		our @inherited_fields =
-		 qw(Description DescDetail License);
-
-		foreach $field (@inherited_fields) {
-			$field = lc $field;
-			if (not $self->has_param($field) and $parent->has_param($field)) {
-				$self->{$field} = $parent->{$field};
-			}
-		}
-	} else {
-		# expand source / sourcerename fields
-		$source = $self->param_default("Source", "\%n-\%v.tar.gz");
-		if ($source eq "gnu") {
-			$source = "mirror:gnu:\%n/\%n-\%v.tar.gz";
-		} elsif ($source eq "gnome") {
-			$version =~ /(^[0-9]+\.[0-9]+)\.*/;
-			$source = "mirror:gnome:sources/\%n/$1/\%n-\%v.tar.gz";
-		}
-		
-		$source = &expand_percent($source, $expand);
-		$self->{source} = $source;
-		$self->{_sourcecount} = 1;
-	
-		$self->expand_percent_if_available('SourceRename');
-	
-		for ($i = 2; $self->has_param('source'.$i); $i++) {
-			$self->{'source'.$i} = &expand_percent($self->{'source'.$i}, $expand);
-			$self->expand_percent_if_available('Source'.$i.'Rename');
-			$self->{_sourcecount} = $i;
-		}
-	
-		# handle splitoff(s)
-		if ($self->has_param('splitoff')) {
-			$self->add_splitoff($self->{'splitoff'});
-		}
-		for ($i = 2; $self->has_param('splitoff'.$i); $i++) {
-			$self->add_splitoff($self->{'splitoff'.$i});
-		}
-	}
-
-	if (exists $self->{_splitoffs} and @{$self->{_splitoffs}} > 0) {
-		my $splitoff;
-		for $splitoff (@{$self->{_splitoffs}}) {
-			@{$splitoff->{_relatives}} = ($self, grep {$_->get_name() ne $splitoff->get_name()} @{$self->{_splitoffs}});
-		}
-		$self->{_relatives} = $self->{_splitoffs};
-	}
-}
-
-### expand percent chars in the given field, if that field exists
-
-sub expand_percent_if_available {
-	my $self = shift;
-	my $field = lc shift;
-
-	if ($self->has_param($field)) {
-		$self->{$field} = &expand_percent($self->{$field}, $self->{_expand});
-	}
-}
-
-### add a splitoff package
-
-sub add_splitoff {
-	my $self = shift;
-	my $splitoff_data = shift;
-	my $filename = $self->{_filename};
-	my ($properties, $package, $pkgname, $splitoff);
-	
-	# get rid of any indention first
-	$splitoff_data =~ s/^\s+//gm;
-	
-	# get the splitoff package name
-	$properties = &read_properties_var($filename, $splitoff_data);
-	$pkgname = $properties->{'package'};
-	unless ($pkgname) {
-		print "No package name for SplitOff in $filename\n";
-	}
-	
-	# expand percents in it, to allow e.g. "%n-shlibs"
-	$properties->{'package'} = $pkgname = &expand_percent($pkgname, $self->{_expand});
-	
-	# copy version information
-	$properties->{'version'} = $self->{_version};
-	$properties->{'revision'} = $self->{_revision};
-	
-	# set the type, and link the splitoff to its "parent" (=us)
-	$properties->{'type'} = "splitoff";
-	$properties->{parent} = $self;
-	
-	# get/create package object for the splitoff
-	$package = Fink::Package->package_by_name_create($pkgname);
-	
-	# create object for this particular version
-	$properties->{thefilename} = $filename;
-	$splitoff = Fink::Package->inject_description($package, $properties);
-	
-	# add it to the list of splitoffs
-	push @{$self->{_splitoffs}}, $splitoff;
-}
-
-### merge duplicate package description
-
-sub merge {
-	my $self = shift;
-	my $dup = shift;
-	
-	print "Warning! Not a dummy package\n" if $self->{_type} ne 'dummy';
-	push @{$self->{_debpaths}}, @{$dup->{_debpaths}};
-}
-
-### bootstrap helpers
-
-sub enable_bootstrap {
-	my $self = shift;
-	my $bsbase = shift;
-	my $splitoff;
-
-	$self->{_expand}->{p} = $bsbase;
-	$self->{_expand}->{d} = "";
-	$self->{_expand}->{i} = $bsbase;
-	$self->{_expand}->{D} = "";
-	$self->{_expand}->{I} = $bsbase;
-
-	$self->{_bootstrap} = 1;
-	
-	foreach	 $splitoff (@{$self->{_splitoffs}}) {
-		$splitoff->enable_bootstrap($bsbase);
-	}
-
-}
-
-sub disable_bootstrap {
-	my $self = shift;
-	my ($destdir);
-	my $splitoff;
-
-	$destdir = "$buildpath/root-".$self->{_fullname};
-	$self->{_expand}->{p} = $basepath;
-	$self->{_expand}->{d} = $destdir;
-	$self->{_expand}->{i} = $destdir.$basepath;
-	if ($self->{_type} eq "splitoff") {
-		my $parent = $self->{parent};
-		my $parentdestdir = "$buildpath/root-".$parent->{_fullname};
-		$self->{_expand}->{D} = $parentdestdir;
-		$self->{_expand}->{I} = $parentdestdir.$basepath;
-	} else {
-		$self->{_expand}->{D} = $self->{_expand}->{d};
-		$self->{_expand}->{I} = $self->{_expand}->{i};
-	};
-	
-	$self->{_bootstrap} = 0;
-	
-	foreach	 $splitoff (@{$self->{_splitoffs}}) {
-		$splitoff->disable_bootstrap();
-	}
-}
-
-### get package name, version etc.
-
-sub get_name {
-	my $self = shift;
-	return $self->{_name};
-}
-
-sub get_version {
-	my $self = shift;
-	return $self->{_version};
-}
-
-sub get_revision {
-	my $self = shift;
-	return $self->{_revision};
-}
-
-sub get_fullversion {
-	my $self = shift;
-	return $self->{_fullversion};
-}
-
-sub get_fullname {
-	my $self = shift;
-	return $self->{_fullname};
-}
-
-sub get_debname {
-	my $self = shift;
-	return $self->{_debname};
-}
-
-sub get_debpath {
-	my $self = shift;
-	return $self->{_debpath};
-}
-
-sub get_debfile {
-	my $self = shift;
-	return $self->{_debpath}."/".$self->{_debname};
-}
-
-sub get_section {
-	my $self = shift;
-	return $self->{_section};
-}
-
-sub get_tree {
-	my $self = shift;
-	return $self->{_tree};
-}
-
-### other accessors
-
-sub is_multisource {
-	my $self = shift;
-	return $self->{_sourcecount} > 1;
-}
-
-sub get_source {
-	my $self = shift;
-	my $index = shift || 1;
-	if ($index < 2) {
-		return $self->param("Source");
-	} elsif ($index <= $self->{_sourcecount}) {
-		return $self->param("Source".$index);
-	}
-	return "-";
-}
-
-sub get_tarball {
-	my $self = shift;
-	my $index = shift || 1;
-	if ($index < 2) {
-		if ($self->has_param("SourceRename")) {
-			return $self->param("SourceRename");
-		}
-		return &filename($self->param("Source"));
-	} elsif ($index <= $self->{_sourcecount}) {
-		if ($self->has_param("Source".$index."Rename")) {
-			return $self->param("Source".$index."Rename");
-		}
-		return &filename($self->param("Source".$index));
-	}
-	return "-";
-}
-
-sub get_checksum {
-	my $self = shift;
-	my $index = shift || 1;
-	if ($index == 1) {
-		if ($self->has_param("Source-MD5")) {
-			return $self->param("Source-MD5");
-		}
-	} elsif ($index >= 2 and $index <= $self->{_sourcecount}) {
-		if ($self->has_param("Source".$index."-MD5")) {
-			return $self->param("Source".$index."-MD5");
-		}
-	}		
-	return "-";
-}
-
-
-sub get_custom_mirror {
-	my $self = shift;
-
-	if (exists $self->{_custom_mirror}) {
-		return $self->{_custom_mirror};
-	}
-
-	if ($self->has_param("CustomMirror")) {
-		$self->{_custom_mirror} =
-			Fink::Mirror->new_from_field(&expand_percent($self->param("CustomMirror"), $self->{_expand}));
-	} else {
-		$self->{_custom_mirror} = 0;
-	}
-	return $self->{_custom_mirror};
-}
-
-sub get_build_directory {
-	my $self = shift;
-	my ($dir);
-
-	if (exists $self->{_builddir}) {
-		return $self->{_builddir};
-	}
-
-	if ($self->{_type} eq "bundle" || $self->{_type} eq "nosource"
-			|| $self->param_boolean("NoSourceDirectory")) {
-		$self->{_builddir} = $self->get_fullname();
-	}
-	elsif ($self->has_param("SourceDirectory")) {
-		$self->{_builddir} = $self->get_fullname()."/".
-			&expand_percent($self->param("SourceDirectory"), $self->{_expand});
-	}
-	else {
-		$dir = $self->get_tarball();
-		if ($dir =~ /^(.*)\.tar(\.(gz|z|Z|bz2))?$/) {
-			$dir = $1;
-		}
-		if ($dir =~ /^(.*)\.(tgz|zip)$/) {
-			$dir = $1;
-		}
-
-		$self->{_builddir} = $self->get_fullname()."/".$dir;
-	}
-
-	$self->{_expand}->{b} = "$buildpath/".$self->{_builddir};
-	return $self->{_builddir};
-}
-
-### generate description
-
-sub format_description {
-	my $s = shift;
-
-	# remove last newline (if any)
-	chomp $s;
-	# replace empty lines with "."
-	$s =~ s/^\s*$/\./mg;
-	# add leading space
-	$s =~ s/^/ /mg;
-
-	return "$s\n";
-}
-
-sub format_oneline {
-	my $s = shift;
-	my $maxlen = shift || 0;
-
-	chomp $s;
-	$s =~ s/\s*\n\s*/ /sg;
-	$s =~ s/^\s+//g;
-	$s =~ s/\s+$//g;
-
-	if ($maxlen && length($s) > $maxlen) {
-		$s = substr($s, 0, $maxlen-3)."...";
-	}
-
-	return $s;
-}
-
-sub get_shortdescription {
-	my $self = shift;
-	my $limit = shift || 75;
-	my ($desc);
-
-	if ($self->has_param("Description")) {
-		$desc = &format_oneline($self->param("Description"), $limit);
-	} else {
-		$desc = "[Package ".$self->get_name()." version ".$self->get_fullversion()."]";
-	}
-	return $desc;
-}
-
-sub get_description {
-	my $self = shift;
-	my $style = shift || 0;
-	my ($desc, $s);
-
-	if ($self->has_param("Description")) {
-		$desc = &format_oneline($self->param("Description"), 75);
-	} else {
-		$desc = "[Package ".$self->get_name()." version ".$self->get_fullversion()."]";
-	}
-	$desc .= "\n";
-
-	if ($self->has_param("DescDetail")) {
-		$desc .= &format_description($self->param("DescDetail"));
-	}
-
-	if ($style != 1) {
-		if ($self->has_param("DescUsage")) {
-			$desc .= " .\n Usage Notes:\n";
-			$desc .= &format_description($self->param("DescUsage"));
-		}
-
-		if ($self->has_param("Homepage")) {
-			$desc .= " .\n Web site: ".&format_oneline($self->param("Homepage"))."\n";
-		}
-
-		if ($self->has_param("Maintainer")) {
-			$desc .= " .\n Maintainer: ".&format_oneline($self->param("Maintainer"))."\n";
-		}
-	}
-
-	return $desc;
-}
-
-### get installation state
-
-sub is_fetched {
-	my $self = shift;
-	my ($i);
-
-	if ($self->{_type} eq "bundle" || $self->{_type} eq "nosource" ||
-			$self->{_type} eq "dummy") {
-		return 1;
-	}
-
-	for ($i = 1; $i <= $self->{_sourcecount}; $i++) {
-		if (not defined $self->find_tarball($i)) {
-			return 0;
-		}
-	}
-	return 1;
-}
-
-sub is_present {
-	my $self = shift;
-
-	if (defined $self->find_debfile()) {
-		return 1;
-	}
-	return 0;
-}
-
-sub is_installed {
-	my $self = shift;
-
-	if ((&version_cmp(Fink::Status->query_package($self->{_name}), '=', $self->get_fullversion())) or
-	   (&version_cmp(Fink::VirtPackage->query_package($self->{_name}), '=', $self->get_fullversion()))) {
-		return 1;
-	}
-	return 0;
-}
-
-### source tarball finding
-
-sub find_tarball {
-	my $self = shift;
-	my $index = shift || 1;
-	my ($archive, $found_archive);
-	my (@search_dirs, $search_dir);
-
-	$archive = $self->get_tarball($index);
-	if ($archive eq "-") {	# bad index
-		return undef;
-	}
-
-	# compile list of dirs to search
-	@search_dirs = ( "$basepath/src" );
-	if ($config->has_param("FetchAltDir")) {
-		push @search_dirs, $config->param("FetchAltDir");
-	}
-
-	# search for archive
-	foreach $search_dir (@search_dirs) {
-		$found_archive = "$search_dir/$archive";
-		if (-f $found_archive) {
-			return $found_archive;
-		}
-	}
-	return undef;
-}
-
-### binary package finding
-
-sub find_debfile {
-	my $self = shift;
-	my ($path, $fn);
-
-	foreach $path (@{$self->{_debpaths}}, "$basepath/fink/debs") {
-		$fn = $path."/".$self->{_debname};
-		if (-f $fn) {
-			return $fn;
-		}
-	}
-	return undef;
-}
-
-### get dependencies
-
-# Possible parameters:
-# 0 - return runtime dependencies only
-# 1 - return runtime & build dependencies
-# 2 - return build dependencies only
-sub resolve_depends {
-	my $self = shift;
-	my $include_build = shift || 0;
-	my (@speclist, @deplist, $altlist);
-	my ($altspec, $depspec, $depname, $versionspec, $package);
-	my ($splitoff, $idx, $split_idx);
-
-	@deplist = ();
-
-	$idx = 0;
-	$split_idx = 0;
-
-	# If this is a splitoff, and we are asked for build depends, add the build deps
-	# of the master package to the list. In 
-	if ($include_build and $self->{_type} eq "splitoff") {
-		push @deplist, ($self->{parent})->resolve_depends(2);
-		if ($include_build == 2) {
-			# The pure build deps of a splitoff are equivalent to those of the parent.
-			return @deplist;
-		}
-	}
-	
-	@speclist = split(/\s*\,\s*/, $self->param_default("Depends", ""));
-	if ($include_build) {
-		push @speclist,
-			split(/\s*\,\s*/, $self->param_default("BuildDepends", ""));
-
-		# If this is a master package with splitoffs, and build deps are requested,
-		# then add to the list the deps of all our aplitoffs.
-		# We remember the offset at which we added these in $split_idx, so that we
-		# can remove any inter-splitoff deps that would otherwise be introduced by this.
-		$split_idx = @speclist;
-		foreach	 $splitoff (@{$self->{_splitoffs}}) {
-			push @speclist,
-				split(/\s*\,\s*/, $splitoff->param_default("Depends", ""));
-		}
-	}
-
-	SPECLOOP: foreach $altspec (@speclist) {
-		$altlist = [];
-		foreach $depspec (split(/\s*\|\s*/, $altspec)) {
-			if ($depspec =~ /^\s*([0-9a-zA-Z.\+-]+)\s*\((.+)\)\s*$/) {
-				$depname = $1;
-				$versionspec = $2;
-			} elsif ($depspec =~ /^\s*([0-9a-zA-Z.\+-]+)\s*$/) {
-				$depname = $1;
-				$versionspec = "";
-			} else {
-				die "Illegal spec format: $depspec\n";
-			}
-
-			if ($include_build and @{$self->{_splitoffs}} > 0 and
-				 ($idx >= $split_idx or $include_build == 2)) {
-				# To prevent circular refs in the build dependency graph, we have to
-				# remove all our splitoffs from the graph. Exception: any splitoffs
-				# this master depends on directly are not filtered. Exception from the
-				# exception: if we were called by a splitoff to determine the "meta
-				# dependencies" of it, then we again filter out all splitoffs.
-				# If you've read till here without mental injuries, congrats :-)
-				next SPECLOOP if ($depname eq $self->{_name});
-				foreach	 $splitoff (@{$self->{_splitoffs}}) {
-					 next SPECLOOP if ($depname eq $splitoff->get_name());
-				}
-			}
-
-			$package = Fink::Package->package_by_name($depname);
-
-			if (not defined $package) {
-				print "WARNING: While resolving dependency \"$depspec\" for package \"".$self->get_fullname()."\", package \"$depname\" was not found.\n";
-				next;
-			}
-
-			push(@{$package->{_versionspecs}}, $versionspec) unless ($versionspec =~ /^\s*$/);
-
-			if ($versionspec) {
-				push @$altlist, $package->get_matching_versions($versionspec);
-			} else {
-				push @$altlist, $package->get_all_providers();
-			}
-		}
-		if (scalar(@$altlist) <= 0) {
-			die "Can't resolve dependency \"$altspec\" for package \"".$self->get_fullname()."\" (no matching packages/versions found)\n";
-		}
-		push @deplist, $altlist;
-		$idx++;
-	}
-
-	return @deplist;
-}
-
-sub resolve_conflicts {
-	my $self = shift;
-	my ($confname, $package, @conflist);
-
-	# conflict with other versions of the same package
-	# this here includes ourselves, it is treated The Right Way
-	# by other routines
-	@conflist = Fink::Package->package_by_name($self->get_name())->get_all_versions();
-
-	foreach $confname (split(/\s*\,\s*/,
-													 $self->param_default("Conflicts", ""))) {
-		$package = Fink::Package->package_by_name($confname);
-		if (not defined $package) {
-			die "Can't resolve anti-dependency \"$confname\" for package \"".$self->get_fullname()."\"\n";
-		}
-		push @conflist, [ $package->get_all_providers() ];
-	}
-
-	return @conflist;
-}
-
-sub get_binary_depends {
-	my $self = shift;
-	my ($depspec);
-
-	# TODO: modify dependency list on the fly to account for minor
-	#	 library versions
-
-	$depspec = $self->param_default("Depends", "");
-
-	return &collapse_space($depspec);
-}
-
-
-### find package and version by matching a specification
-
-sub match_package {
-	shift;	# class method - ignore first parameter
-	my $s = shift;
-	my $quiet = shift || 0;
-
-	my ($pkgname, $package, $version, $pkgversion);
-	my ($found, @parts, $i, @vlist, $v, @rlist);
-
-	if (Fink::Config::verbosity_level() < 3) {
-		$quiet = 1;
-	}
-
-	# first, search for package
-	$found = 0;
-	$package = Fink::Package->package_by_name($s);
-	if (defined $package) {
-		$found = 1;
-		$pkgname = $package->get_name();
-		$version = "###";
-	} else {
-		# try to separate version from name (longest match)
-		@parts = split(/-/, $s);
-		for ($i = $#parts - 1; $i >= 0; $i--) {
-			$pkgname = join("-", @parts[0..$i]);
-			$version = join("-", @parts[$i+1..$#parts]);
-			$package = Fink::Package->package_by_name($pkgname);
-			if (defined $package) {
-				$found = 1;
-				last;
-			}
-		}
-	}
-	if (not $found) {
-		print "no package found for \"$s\"\n"
-			unless $quiet;
-		return undef;
-	}
-
-	# we now have the package name in $pkgname, the package
-	# object in $package, and the
-	# still to be matched version (or "###") in $version.
-	if ($version eq "###") {
-		# find the newest version
-
-		$version = &latest_version($package->list_versions());
-		if (not defined $version) {
-			# there's nothing we can do here...
-			die "no version info available for $pkgname\n";
-		}
-	} elsif (not defined $package->get_version($version)) {
-		# try to match the version
-
-		@vlist = $package->list_versions();
-		@rlist = ();
-		foreach $v (@vlist)	 {
-			if ($package->get_version($v)->get_version() eq $version) {
-				push @rlist, $v;
-			}
-		}
-		$version = &latest_version(@rlist);
-		if (not defined $version) {
-			# there's nothing we can do here...
-			die "no matching version found for $pkgname\n";
-		}
-	}
-
-	return $package->get_version($version);
-}
-
-###
-### PHASES
-###
-
-### fetch
-
-sub phase_fetch {
-	my $self = shift;
-	my $conditional = shift || 0;
-	my $dryrun = shift || 0;
-	my ($i);
-
-	if ($self->{_type} eq "bundle" || $self->{_type} eq "nosource" ||
-			$self->{_type} eq "dummy") {
-		return;
-	}
-	if ($self->{_type} eq "splitoff") {
-		($self->{parent})->phase_fetch($conditional, $dryrun);
-		return;
-	}
-
-	for ($i = 1; $i <= $self->{_sourcecount}; $i++) {
-		if (not $conditional or not defined $self->find_tarball($i)) {
-			$self->fetch_source($i,0,0,0,$dryrun);
-		}
-	}
-}
-
-sub fetch_source {
-	my $self = shift;
-	my $index = shift;
-	my $tries = shift || 0;
-	my $continue = shift || 0;
-	my $nomirror = shift || 0;
-	my $dryrun = shift || 0;
-	my ($url, $file, $checksum, $urlnofile);
-
-	chdir "$basepath/src";
-
-	$url = $self->get_source($index);
-	$file = $self->get_tarball($index);
-	if($self->has_param("license")) {
-		if($self->param("license") =~ /Restrictive\s*$/) {
-			$nomirror = 1;
-		} 
-	}
-	
-	$checksum = $self->get_checksum($index);
-	
-	if($dryrun) {
-		$urlnofile = $url;
-		$urlnofile =~ s/$file//;
-		if($urlnofile eq "") {
-			return;
-		}
-		print "$file $checksum";
-	} else {
-		if($checksum eq '-') {	
-			print "WARNING: No MD5 specified for Source #".$index.
-							" of package ".$self->get_fullname();
-			if ($self->has_param("Maintainer")) {
-				print ' Maintainer: '.$self->param("Maintainer") . "\n";
-			} else {
-				print "\n";
-			}		
-		}
-	}
-	
-	if (&fetch_url_to_file($url, $file, $self->get_custom_mirror(), 
-						   $tries, $continue, $nomirror, $dryrun)) {
-
-		if (0) {
-		print "\n";
-		&print_breaking("Downloading '$file' from the URL '$url' failed. ".
-						"There can be several reasons for this:");
-		&print_breaking_twoprefix("The server is too busy to let you in or ".
-						"is temporarily down. Try again later.",
-						1, "- ", "	");
-		&print_breaking_twoprefix("There is a network problem. If you are ".
-						"behind a firewall you may want to check ".
-						"the proxy and passive mode FTP ".
-						"settings. Then try again.",
-						1, "- ", "	");
-		&print_breaking_twoprefix("The file was removed from the server or ".
-						"moved to another directory. The package ".
-						"description must be updated.",
-						1, "- ", "	");
-		&print_breaking("In any case, you can download '$file' manually and ".
-						"put it in '$basepath/src', then run fink again with ".
-						"the same command.");
-		print "\n";
-		}
-		if($dryrun) {
-			if ($self->has_param("Maintainer")) {
-				print ' "'.$self->param("Maintainer") . "\"\n";
-			}
-		} else {
-			die "file download failed for $file of package ".$self->get_fullname()."\n";
-		}
-	}
-}
-
-### unpack
-
-sub phase_unpack {
-	my $self = shift;
-	my ($archive, $found_archive, $bdir, $destdir, $unpack_cmd);
-	my ($i, $verbosity, $answer, $tries, $checksum, $continue);
-	my ($renamefield, @renamefiles, $renamefile, $renamelist, $expand);
-	my ($tarcommand, $tarflags, $cat, $gzip, $bzip2, $unzip);
-
-	if ($self->{_type} eq "bundle") {
-		return;
-	}
-	if ($self->{_type} eq "dummy") {
-		die "can't build ".$self->get_fullname().
-			" because no package description is available\n";
-	}
-	if ($self->{_type} eq "splitoff") {
-		($self->{parent})->phase_unpack();
-		return;
-	}
-
-	$bdir = $self->get_fullname();
-
-	$verbosity = "";
-	if (Fink::Config::verbosity_level() > 1) {
-		$verbosity = "v";
-	}
-
-	# remove dir if it exists
-	chdir "$buildpath";
-	if (-e $bdir) {
-		if (&execute("rm -rf $bdir")) {
-			die "can't remove existing directory $bdir\n";
-		}
-	}
-
-	if ($self->{_type} eq "nosource") {
-		$destdir = "$buildpath/$bdir";
-		if (&execute("mkdir -p $destdir")) {
-			die "can't create directory $destdir\n";
-		}
-		return;
-	}
-
-	$tries = 0;
-	for ($i = 1; $i <= $self->{_sourcecount}; $i++) {
-		$archive = $self->get_tarball($i);
-
-		# search for archive, try fetching if not found
-		$found_archive = $self->find_tarball($i);
-		if (not defined $found_archive or $tries > 0) {
-			$self->fetch_source($i, $tries, $continue);
-			$continue = 0;
-			$found_archive = $self->find_tarball($i);
-		}
-		if (not defined $found_archive) {
-			die "can't find source file $archive for package ".$self->get_fullname()."\n";
-		}
-		
-		# verify the MD5 checksum, if specified
-		$checksum = $self->get_checksum($i);
-		if ($checksum ne "-" ) { # Checksum was specified 
-		# compare to the MD5 checksum of the tarball
-			if ($checksum ne &file_MD5_checksum($found_archive)) {
-				# mismatch, ask user what to do
-				$tries++;
-				
-				&print_breaking("The checksum of the file $archive of package ".
-								$self->get_fullname()." is incorrect. The most likely ".
-								"cause for this is a corrupted or incomplete ".
-								"download. It is recommended that you download it ".
-								"again. How do you want to proceed?");
-				$answer =
-					&prompt_selection("Make your choice: ",
-								($tries >= 3) ? 1 : 2,
-								{ "error" => "Give up",
-									"redownload" => "Delete it and download again",													
-									"continuedownload" => "Assume it is a partial download and try to continue",
-									"continue" => "Don't download, use existing file" },
-								( "error", "redownload", "continuedownload", "continue" ));
-				if ($answer eq "redownload") {
-					&execute("rm -f $found_archive");
-					$i--;
-					# Axel leaves .st files around for partial files, need to remove
-					if($config->param_default("DownloadMethod") =~ /^axel/)
-					{
-									&execute("rm -f $found_archive.st");
-					}
-					next;		# restart loop with same tarball
-				} elsif($answer eq "error") {
-					die "checksum of file $archive of package ".$self->get_fullname()." incorrect\n";
-				} elsif($answer eq "continuedownload") {
-					$continue = 1;
-					$i--;
-					next;		# restart loop with same tarball			
-				}
-			}
-		}
-
-		# Determine the name of the TarFilesRename in the case of multi tarball packages
-		if ($i < 2) {
-			$renamefield = "TarFilesRename";
-		} else {
-			$renamefield = "Tar".$i."FilesRename";
-		}
-
-		$renamelist = "";
-
-		# Determine the rename list (if any)
-		$tarflags = "-x${verbosity}f -";
-		$tarcommand = "/usr/bin/gnutar $tarflags"; # Default to Apple's GNU Tar
-		if ($self->has_param($renamefield)) {
-			@renamefiles = split(/\s+/, $self->param($renamefield));
-			foreach $renamefile (@renamefiles) {
-				$renamefile = &expand_percent($renamefile, $expand);
-				if ($renamefile =~ /^(.+)\:(.+)$/) {
-					$renamelist .= " -s ,$1,$2,";
-				} else {
-					$renamelist .= " -s ,${renamefile},${renamefile}_tmp,";
-				}
-			}
-			$tarcommand = "/bin/pax -r${verbosity}"; # Use pax for extracting with the renaming feature
-		} elsif ( -e "$basepath/bin/tar" ) {
-			$tarcommand = "$basepath/bin/tar $tarflags"; # Use Fink's GNU Tar if available
-		}
-		$bzip2 = "bzip2";
-		$unzip = "unzip";
-		$gzip = "gzip";
-		$cat = "cat";
-
-		# Determine unpack command
-		$unpack_cmd = "cp $found_archive .";
-		if ($archive =~ /[\.\-]tar\.(gz|z|Z)$/ or $archive =~ /\.tgz$/) {
-		    $unpack_cmd = "$gzip -dc $found_archive | $tarcommand $renamelist";
-		} elsif ($archive =~ /[\.\-]tar\.bz2$/) {
-			$unpack_cmd = "$bzip2 -dc $found_archive | $tarcommand $renamelist";
-		} elsif ($archive =~ /[\.\-]tar$/) {
-			$unpack_cmd = "$cat $found_archive | $tarcommand $renamelist";
-		} elsif ($archive =~ /\.zip$/) {
-			$unpack_cmd = "$unzip -o $found_archive";
-		}
-
-		# calculate destination directory
-		$destdir = "$buildpath/$bdir";
-		if ($i > 1) {
-			if ($self->has_param("Source".$i."ExtractDir")) {
-				$destdir .= "/".&expand_percent($self->param("Source".$i."ExtractDir"), $self->{_expand});
-			}
-		}
-
-		# create directory
-		if (! -d $destdir) {
-			if (&execute("mkdir -p $destdir")) {
-				die "can't create directory $destdir\n";
-			}
-		}
-
-		# unpack it
-		chdir $destdir;
-		if (&execute($unpack_cmd)) {
-			$tries++;
-
-			$answer =
-				&prompt_boolean("Unpacking the file $archive of package ".
-								$self->get_fullname()." failed. The most likely ".
-								"cause for this is a corrupted or incomplete ".
-								"download. Do you want to delete the tarball ".
-								"and download it again?",
-								($tries >= 3) ? 0 : 1);
-			if ($answer) {
-				&execute("rm -f $found_archive");
-				$i--;
-				next;		# restart loop with same tarball
-			} else {
-				die "unpacking file $archive of package ".$self->get_fullname()." failed\n";
-			}
-		}
-
-		$tries = 0;
-	}
-}
-
-### patch
-
-sub phase_patch {
-	my $self = shift;
-	my ($dir, $patch_script, $cmd, $patch, $subdir);
-
-	if ($self->{_type} eq "bundle") {
-		return;
-	}
-	if ($self->{_type} eq "dummy") {
-		die "can't build ".$self->get_fullname().
-				" because no package description is available\n";
-	}
-	if ($self->{_type} eq "splitoff") {
-		($self->{parent})->phase_patch();
-		return;
-	}
-
-	$dir = $self->get_build_directory();
-	if (not -d "$buildpath/$dir") {
-		die "directory $buildpath/$dir doesn't exist, check the package description\n";
-	}
-	chdir "$buildpath/$dir";
-
-	$patch_script = "";
-
-	### copy host type scripts (config.guess and config.sub) if required
-
-	if ($self->param_boolean("UpdateConfigGuess")) {
-		$patch_script .=
-			"cp -f $libpath/update/config.guess .\n".
-			"cp -f $libpath/update/config.sub .\n";
-	}
-	if ($self->has_param("UpdateConfigGuessInDirs")) {
-		foreach $subdir (split(/\s+/, $self->param("UpdateConfigGuessInDirs"))) {
-			next unless $subdir;
-			$patch_script .=
-				"cp -f $libpath/update/config.guess $subdir\n".
-				"cp -f $libpath/update/config.sub $subdir\n";
-		}
-	}
-
-	### copy libtool scripts (ltconfig and ltmain.sh) if required
-
-	if ($self->param_boolean("UpdateLibtool")) {
-		$patch_script .=
-			"cp -f $libpath/update/ltconfig .\n".
-			"cp -f $libpath/update/ltmain.sh .\n";
-	}
-	if ($self->has_param("UpdateLibtoolInDirs")) {
-		foreach $subdir (split(/\s+/, $self->param("UpdateLibtoolInDirs"))) {
-			next unless $subdir;
-			$patch_script .=
-				"cp -f $libpath/update/ltconfig $subdir\n".
-				"cp -f $libpath/update/ltmain.sh $subdir\n";
-		}
-	}
-
-	### copy po/Makefile.in.in if required
-
-	if ($self->param_boolean("UpdatePoMakefile")) {
-		$patch_script .=
-			"cp -f $libpath/update/Makefile.in.in po/\n";
-	}
-
-	### patches specifies by filename
-
-	if ($self->has_param("Patch")) {
-		foreach $patch (split(/\s+/,$self->param("Patch"))) {
-			$patch_script .= "patch -p1 <\%a/$patch\n";
-		}
-	}
-
-	### patch
-
-	if ($patch_script ne "") {
-		$self->run_script($patch_script, "patching");
-	}
-
-	### run custom patch script (if any)
-
-	if ($self->has_param("PatchScript")) {
-		$self->run_script($self->param("PatchScript"), "patching");
-	}
-}
-
-### compile
-
-sub phase_compile {
-	my $self = shift;
-	my ($dir, $compile_script, $cmd);
-
-	if ($self->{_type} eq "bundle") {
-		return;
-	}
-	if ($self->{_type} eq "dummy") {
-		die "can't build ".$self->get_fullname().
-				" because no package description is available\n";
-	}
-	if ($self->{_type} eq "splitoff") {
-		($self->{parent})->phase_compile();
-		return;
-	}
-
-	$dir = $self->get_build_directory();
-	if (not -d "$buildpath/$dir") {
-		die "directory $buildpath/$dir doesn't exist, check the package description\n";
-	}
-	chdir "$buildpath/$dir";
-
-	# generate compilation script
-	if ($self->has_param("CompileScript")) {
-		$compile_script = $self->param("CompileScript");
-	} elsif ($self->param("_type") eq "perl") {
-		# grab perl version, if present
-		my $perlversion = "";
-		my $perldirectory = "";
-		if ($self->has_param("_perlversion")) {
-			$perlversion = $self->param("_perlversion");
-			$perldirectory = "/" . $perlversion;
-		}
-		$compile_script =
-			"perl$perlversion Makefile.PL PERL=perl$perlversion PREFIX=\%p INSTALLPRIVLIB=\%p/lib/perl5$perldirectory INSTALLARCHLIB=\%p/lib/perl5$perldirectory/darwin INSTALLSITELIB=\%p/lib/perl5$perldirectory INSTALLSITEARCH=\%p/lib/perl5$perldirectory/darwin INSTALLMAN1DIR=\%p/share/man/man1 INSTALLMAN3DIR=\%p/share/man/man3 INSTALLSITEMAN1DIR=\%p/share/man/man1 INSTALLSITEMAN3DIR=\%p/share/man/man3 INSTALLBIN=\%p/bin INSTALLSITEBIN=\%p/bin INSTALLSCRIPT=\%p/bin\n".
-			"make\n".
-			"make test";
-	} else {
-		$compile_script = 
-			"./configure \%c\n".
-			"make";
-	}	 
-
-	### compile
-
-	$self->run_script($compile_script, "compiling");
-}
-
-### install
-
-sub phase_install {
-	my $self = shift;
-	my $do_splitoff = shift || 0;
-	my ($dir, $install_script, $cmd, $bdir);
-
-	if ($self->{_type} eq "dummy") {
-		die "can't build ".$self->get_fullname().
-				" because no package description is available\n";
-	}
-	if ($self->{_type} eq "splitoff" and not $do_splitoff) {
-		($self->{parent})->phase_install();
-		return;
-	}
-	if ($self->{_type} ne "bundle") {
-		if ($do_splitoff) {
-			$dir = ($self->{parent})->get_build_directory();
-		} else {
-			$dir = $self->get_build_directory();
-		}
-		if (not -d "$buildpath/$dir") {
-			die "directory $buildpath/$dir doesn't exist, check the package description\n";
-		}
-		chdir "$buildpath/$dir";
-	}
-
-	# generate installation script
-
-	$install_script = "";
-	unless ($self->{_bootstrap}) {
-		$install_script .= "rm -rf \%d\n";
-	}
-	$install_script .= "mkdir -p \%i\n";
-	unless ($self->{_bootstrap}) {
-		$install_script .= "mkdir -p \%d/DEBIAN\n";
-	}
-	if ($self->{_type} eq "bundle") {
-		$install_script .= "mkdir -p \%i/share/doc/\%n\n";
-		$install_script .= "echo \"\%n is a bundle package that doesn't install any files of its own.\" >\%i/share/doc/\%n/README\n";
-	} else {
-		if ($self->has_param("InstallScript")) {
-			# Run the script part we have so far, then reset it.
-			$self->run_script($install_script, "installing");
-			$install_script = "";
-			# Now run the custom install script
-			$self->run_script($self->param("InstallScript"), "installing");
-		} elsif ($self->param("_type") eq "perl") {
-			# grab perl version, if present
-			my $perldirectory = "";
-			if ($self->has_param("_perlversion")) {
-				$perldirectory = "/" . $self->param("_perlversion");
-			}
-			$install_script .= 
-				"make install PREFIX=\%i INSTALLPRIVLIB=\%i/lib/perl5$perldirectory INSTALLARCHLIB=\%i/lib/perl5$perldirectory/darwin INSTALLSITELIB=\%i/lib/perl5$perldirectory INSTALLSITEARCH=\%i/lib/perl5$perldirectory/darwin INSTALLMAN1DIR=\%i/share/man/man1 INSTALLMAN3DIR=\%i/share/man/man3 INSTALLSITEMAN1DIR=\%i/share/man/man1 INSTALLSITEMAN3DIR=\%i/share/man/man3 INSTALLBIN=\%i/bin INSTALLSITEBIN=\%i/bin INSTALLSCRIPT=\%i/bin\n";
-		} elsif (not $do_splitoff) {
-			$install_script .= "make install prefix=\%i\n";
-		} 
-
-		if ($self->param_boolean("UpdatePOD")) { 
-			# grab perl version, if present
-			my $perldirectory = "";
-			if ($self->has_param("_perlversion")) {
-				$perldirectory = "/" . $self->param("_perlversion");
-			}
-			$install_script .= 
-				"mkdir -p \%i/share/podfiles$perldirectory\n".
-				"cat \%i/lib/perl5$perldirectory/darwin/perllocal.pod | sed -e s,\%i/lib/perl5,\%p/lib/perl5, > \%i/share/podfiles$perldirectory/perllocal.\%n.pod\n".
-				"rm -rf \%i/lib/perl5$perldirectory/darwin/perllocal.pod\n";
-		}
-	}
-
-	# splitoff 'Files' field
-	if ($do_splitoff and $self->has_param("Files")) {
-		my (@files, $file, $source, $target, $target_dir);
-
-		@files = split(/\s+/, $self->param("Files"));
-		foreach $file (@files) {
-			if ($file =~ /^(.+)\:(.+)$/) {
-				$source = $1;
-				$target = $2;
-			} else {
-				$source = $file;
-				$target = $file;
-			}
-			# If the path starts with a slash, assume it is meant to be global
-			# and base it upon %D, otherwise treat it as relative to %I
-			if ($source =~ /^\//) {
-				$source = "%D$source";
-			} else {
-				$source = "%I/$source";
-			}
-			# Now the same for the target (but use %d and %i).
-			if ($target =~ /^\//) {
-				$target = "%d$target";
-			} else {
-				$target = "%i/$target";
-			}
-
-			$target_dir = dirname($target);
-			$install_script .= "\ninstall -d -m 755 $target_dir";
-			$install_script .= "\nmv $source $target_dir/";
-		}
-	}
-
-	# generate commands to install documentation files
-	if ($self->has_param("DocFiles")) {
-		my (@docfiles, $docfile, $docfilelist);
-		$install_script .= "\ninstall -d -m 755 %i/share/doc/%n";
-
-		@docfiles = split(/\s+/, $self->param("DocFiles"));
-		$docfilelist = "";
-		foreach $docfile (@docfiles) {
-			if ($docfile =~ /^(.+)\:(.+)$/) {
-				$install_script .= "\ninstall -c -p -m 644 $1 %i/share/doc/%n/$2";
-			} else {
-				$docfilelist .= " $docfile";
-			}
-		}
-		if ($docfilelist ne "") {
-			$install_script .= "\ninstall -c -p -m 644$docfilelist %i/share/doc/%n/";
-		}
-	}
-
-	# generate commands to install profile.d scripts
-	if ($self->has_param("RuntimeVars")) {
-	
-		my ($var, $value, $vars, $properties);
-
-		$vars = $self->param("RuntimeVars");
-		# get rid of any indention first
-		$vars =~ s/^\s+//gm;
-		# Read the set if variavkes (but don't change the keys to lowercase)
-		$properties = &read_properties_var($self->{_filename}, $vars, 1);
-
-		if(scalar keys %$properties > 0){
-			$install_script .= "\ninstall -d -m 755 %i/etc/profile.d";
-			while (($var, $value) = each %$properties) {
-				$install_script .= "\necho \"setenv $var '$value'\" >> %i/etc/profile.d/%n.csh.env";
-				$install_script .= "\necho \"export $var='$value'\" >> %i/etc/profile.d/%n.sh.env";
-			}
-			# make sure the scripts exist
-			$install_script .= "\ntouch %i/etc/profile.d/%n.csh";
-			$install_script .= "\ntouch %i/etc/profile.d/%n.sh";
-			# prepend *.env to *.[c]sh
-			$install_script .= "\ncat %i/etc/profile.d/%n.csh >> %i/etc/profile.d/%n.csh.env";
-			$install_script .= "\ncat %i/etc/profile.d/%n.sh >> %i/etc/profile.d/%n.sh.env";
-			$install_script .= "\nmv -f %i/etc/profile.d/%n.csh.env %i/etc/profile.d/%n.csh";
-			$install_script .= "\nmv -f %i/etc/profile.d/%n.sh.env %i/etc/profile.d/%n.sh";
-			# make them executable (to allow them to be sourced by /sw/bin.init.[c]sh)
-			$install_script .= "\nchmod 755 %i/etc/profile.d/%n.*";
-		}
-	}
-
-	# generate commands to install jar files
-	if ($self->has_param("JarFiles")) {
-		my (@jarfiles, $jarfile, $jarfilelist);
-		# install jarfiles
-		$install_script .= "\ninstall -d -m 755 %i/share/java/%n";
-		@jarfiles = split(/\s+/, $self->param("JarFiles"));
-		$jarfilelist = "";
-		foreach $jarfile (@jarfiles) {
-			if ($jarfile =~ /^(.+)\:(.+)$/) {
-				$install_script .= "\ninstall -c -p -m 644 $1 %i/share/java/%n/$2";
-			} else {
-				$jarfilelist .= " $jarfile";
-			}
-		}
-		if ($jarfilelist ne "") {
-			$install_script .= "\ninstall -c -p -m 644$jarfilelist %i/share/java/%n/";
-		}
-	}
-
-	$install_script .= "\nrm -f %i/info/dir %i/info/dir.old %i/share/info/dir %i/share/info/dir.old";
-
-	### install
-
-	$self->run_script($install_script, "installing");
-
-	### splitoffs
-	
-	my $splitoff;
-	foreach	 $splitoff (@{$self->{_splitoffs}}) {
-		# iterate over all splitoffs and call their build phase
-		$splitoff->phase_install(1);
-	}
-
-	### remove build dir
-
-	if (not $do_splitoff) {
-		$bdir = $self->get_fullname();
-		chdir "$buildpath";
-		if (not $config->param_boolean("KeepBuildDir") and not Fink::Config::get_option("keep_build") and -e $bdir) {
-			if (&execute("rm -rf $bdir")) {
-				&print_breaking("WARNING: Can't remove build directory $bdir. ".
-								"This is not fatal, but you may want to remove ".
-								"the directory manually to save disk space. ".
-								"Continuing with normal procedure.");
-			}
-		}
-	}
-}
-
-### build .deb
-
-sub phase_build {
-	my $self = shift;
-	my $do_splitoff = shift || 0;
-	my ($ddir, $destdir, $control);
-	my ($scriptname, $scriptfile, $scriptbody);
-	my ($shlibsfile, $shlibsbody);
-	my ($conffiles, $listfile, $infodoc);
-	my ($daemonicname, $daemonicfile);
-	my ($cmd);
-
-	if ($self->{_type} eq "dummy") {
-		die "can't build ".$self->get_fullname().
-				" because no package description is available\n";
-	}
-	if ($self->{_type} eq "splitoff" and not $do_splitoff) {
-		($self->{parent})->phase_build();
-		return;
-	}
-
-	chdir "$buildpath";
-	$ddir = "root-".$self->get_fullname();
-	$destdir = "$buildpath/$ddir";
-
-	if (not -d "$destdir/DEBIAN") {
-		if (&execute("mkdir -p $destdir/DEBIAN")) {
-			die "can't create directory for control files for package ".$self->get_fullname()."\n";
-		}
-	}
-
-	# generate dpkg "control" file
-
-	my ($pkgname, $version, $field, $section);
-	$pkgname = $self->get_name();
-	$version = $self->get_fullversion();
-	$section = $self->get_section();
-	$control = <<EOF;
-Package: $pkgname
-Source: $pkgname
-Version: $version
-Section: $section
-Architecture: $debarch
-EOF
-	if ($self->param_boolean("Essential")) {
-		$control .= "Essential: yes\n";
-	}
-	# FIXME: make sure there are no linebreaks in the following fields
-	$control .= "Depends: ".$self->get_binary_depends()."\n";
-	foreach $field (qw(Provides Replaces Conflicts Pre-Depends
-										 Recommends Suggests Enhances
-										 Maintainer)) {
-		if ($self->has_param($field)) {
-			$control .= "$field: ".&collapse_space($self->param($field))."\n";
-		}
-	}
-	$control .= "Description: ".$self->get_description();
-
-	### write "control" file
-
-	print "Writing control file...\n";
-
-	open(CONTROL,">$destdir/DEBIAN/control") or die "can't write control file for ".$self->get_fullname().": $!\n";
-	print CONTROL $control;
-	close(CONTROL) or die "can't write control file for ".$self->get_fullname().": $!\n";
-
-	### update Mach-O Object List
-	###
-	### (but not for distributions prior to 10.3)
-
-	our %prebound_files = ();
-	if ($config->param("Distribution") > 10.2) {
-
-	eval {
-		require File::Find;
-		import File::Find;
-	};
-	print "Finding prebound objects...\n";
-	my ($is_prebound, $is_exe, $name);
-	find({ wanted => sub {
-		return unless (defined $_ and $_ ne "" and -f $_ and not -l $_);
-		#print "\$_ = $_\n";
-		$is_prebound = 0;
-		$is_exe      = 0;
-		$name        = undef;
-		my @dep_list;
-		if (open(OTOOL, "otool -hLv '$_' |")) {
-			while (<OTOOL>) {
-				if (/^\s*MH_MAGIC.*EXECUTE.*PREBOUND.*$/) {
-					# executable has no install_name, add to the list
-					$name = $File::Find::name;
-					$name =~ s/^$destdir//;
-					$is_exe = 1;
-					$is_prebound = 1;
-				} elsif (/^\s*MH_MAGIC.*EXECUTE.*$/) {
-					# if the last didn't match, but this did, it's a
-					# non-prebound executable, so skip it
-					last;
-				} elsif (/^\s*MH_MAGIC.*PREBOUND.*$/) {
-					# otherwise it's a dylib of some form, mark it
-					# so we can pull the install_name in a few lines
-					$is_prebound = 1;
-				} elsif (/^\s*MH_MAGIC.*$/) {
-					# if it wasn't an executable, and the last didn't
-					# match, then it's not a prebound lib
-					last;
-				} elsif (my ($lib) = $_ =~ /^\s*(.+?) \(compatibility.*$/ and $is_prebound) {
-					# we hit the install_name, add it to the list
-					unless ($lib =~ /\/libSystem/ or $lib =~ /^\/+[Ss]ystem/ or $lib =~ /^\/usr\/lib/) {
-						push(@dep_list, $lib);
-					}
-				}
-			}
-			close(OTOOL);
-			if ($is_exe) {
-				$prebound_files{$name} = \@dep_list;
-			} else {
-				$name = shift(@dep_list);
-				return if (not defined $name);
-				$prebound_files{$name} = \@dep_list;
-			}
-		}
-	} }, $destdir);
-
-	if (keys %prebound_files) {
-		system('install', '-d', '-m', '755', $destdir . $basepath . '/var/lib/fink/prebound/files') == 0 or
-			die "can't make $destdir$basepath/var/lib/fink/prebound/files for ".$self->get_name().": $!\n";
-		open(PREBOUND, '>' . $destdir . $basepath . '/var/lib/fink/prebound/files/' . $self->get_name() . '.pblist') or
-			die "can't write " . $self->get_name() . '.pblist';
-		print PREBOUND join("\n", sort keys %prebound_files), "\n";
-		close(PREBOUND);
-	}
-
-	print "Writing dependencies...\n";
-	for my $key (sort keys %prebound_files) {
-		for my $file (@{$prebound_files{$key}}) {
-			$file =~ s/\//-/g;
-			$file =~ s/^-+//;
-			system('install', '-d', '-m', '755', $destdir . $basepath . '/var/lib/fink/prebound/deps/'. $file) == 0 or
-				die "can't make $destdir$basepath/var/lib/fink/prebound/deps/$file for ".$self->get_name().": $!\n";
-			open(DEPS, '>>' . $destdir . $basepath . '/var/lib/fink/prebound/deps/' . $file . '/' . $self->get_name() . '.deplist') or
-				die "can't write " . $self->get_name() . '.deplist';
-			print DEPS $key, "\n";
-			close(DEPS);
-		}
-	}
-    } # conditional on distribution > 10.2
-
-	### create scripts as neccessary
-
-	foreach $scriptname (qw(preinst postinst prerm postrm)) {
-		# get script piece from package description
-		if ($self->has_param($scriptname."Script")) {
-			$scriptbody = $self->param($scriptname."Script");
-		} else {
-			$scriptbody = "";
-		}
-
-		# add UpdatePOD Code
-		if ($self->param_boolean("UpdatePOD")) {
-			# grab perl version, if present
-			my $perldirectory ="";
-			if ($self->has_param("_perlversion")) {
-				$perldirectory = "/" . $self->param("_perlversion");
-			}
-			if ($scriptname eq "postinst") {
-				$scriptbody .=
-					"\n\n# Updating \%p/lib/perl5/darwin$perldirectory/perllocal.pod\n".
-					"mkdir -p \%p/lib/perl5$perldirectory/darwin\n".
-					"cat \%p/share/podfiles$perldirectory/*.pod > \%p/lib/perl5$perldirectory/darwin/perllocal.pod\n";
-			} elsif ($scriptname eq "postrm") {
-				$scriptbody .=
-					"\n\n# Updating \%p/lib/perl5$perldirectory/darwin/perllocal.pod\n\n".
-					"###\n".
-					"### check to see if any .pod files exist in \%p/share/podfiles.\n".
-					"###\n\n".
-					"perl <<'END_PERL'\n\n".
-					"if (-e \"\%p/share/podfiles$perldirectory\") {\n".
-					"	 \@files = <\%p/share/podfiles$perldirectory/*.pod>;\n".
-					"	 if (\$#files >= 0) {\n".
-					"		 exec \"cat \%p/share/podfiles$perldirectory/*.pod > \%p/lib/perl5$perldirectory/darwin/perllocal.pod\";\n".
-					"	 }\n".
-					"}\n\n".
-					"END_PERL\n";
-			} 
-		}
-
-		# add JarFiles Code
-		if ($self->has_param("JarFiles")) {
-			if (($scriptname eq "postinst") || ($scriptname eq "postrm")) {
-				$scriptbody.=
-						"\nmkdir -p %p/share/java".
-						"\njars=`find %p/share/java -name '*.jar'`".
-						"\n".'if (test -n "$jars")'.
-						"\nthen".
-						"\n".'(for jar in $jars ; do echo -n "$jar:" ; done) | sed "s/:$//" > %p/share/java/classpath'.
-						"\nelse".
-						"\nrm -f %p/share/java/classpath".
-						"\nfi".
-						"\nunset jars";
-			}
-		}
-
-		# add auto-generated parts
-		if ($self->has_param("InfoDocs")) {
-			if ($scriptname eq "postinst") {
-				$scriptbody .= "\n\n# generated from InfoDocs directive\n";
-				$scriptbody .= "if [ -f %p/share/info/dir ]; then\n";
-				foreach $infodoc (split(/\s+/, $self->param("InfoDocs"))) {
-					next unless $infodoc;
-					$infodoc = " \%p/share/info/$infodoc" unless $infodoc =~ /\//;
-					$scriptbody .= "if [ -f %p/sbin/install-info ]; then\n";
-					$scriptbody .= "	%p/sbin/install-info --infodir=\%p/share/info $infodoc\n";
-					$scriptbody .= " elif [ -f %p/bootstrap/sbin/install-info ]; then\n";
-					$scriptbody .= "	%p/bootstrap/sbin/install-info --infodir=\%p/share/info $infodoc\n";
-					$scriptbody .= " fi\n";
-								}
-				$scriptbody .= "fi\n";
-			} elsif ($scriptname eq "prerm") {
-				$scriptbody .= "\n\n# generated from InfoDocs directive\n";
-				$scriptbody .= "if [ -f %p/share/info/dir ]; then\n";
-				foreach $infodoc (split(/\s+/, $self->param("InfoDocs"))) {
-					next unless $infodoc;
-					$scriptbody .= "	%p/sbin/install-info --infodir=\%p/share/info --remove $infodoc\n";
-				}
-				$scriptbody .= "fi\n";
-			}
-		}
-
-		# add the call to redo prebinding on any packages with prebound files
-		if (keys %prebound_files > 0 and $scriptname eq "postinst") {
-			my $name = $self->get_name();
-			$scriptbody .= <<EOF;
-
-if test -x "$basepath/var/lib/fink/prebound/queue-prebinding.pl"; then
-	$basepath/var/lib/fink/prebound/queue-prebinding.pl $name
-fi
-
-EOF
-		}
-
-		# do we have a non-empty script?
-		next if $scriptbody eq "";
-
-		# no, so write it out
-		$scriptbody = &expand_percent($scriptbody, $self->{_expand});
-		$scriptfile = "$destdir/DEBIAN/$scriptname";
-
-		print "Writing package script $scriptname...\n";
-
-		open(SCRIPT,">$scriptfile") or die "can't write $scriptname script for ".$self->get_fullname().": $!\n";
-		print SCRIPT <<EOF;
-#!/bin/sh
-# $scriptname script for package $pkgname, auto-created by fink
-
-set -e
-
-$scriptbody
-
-exit 0
-EOF
-		close(SCRIPT) or die "can't write $scriptname script for ".$self->get_fullname().": $!\n";
-		chmod 0755, $scriptfile;
-	}
-
-	### shlibs file
-
-	if ($self->has_param("Shlibs")) {
-			$shlibsbody = $self->param("Shlibs");
-			chomp $shlibsbody;
-			$shlibsbody = &expand_percent($shlibsbody, $self->{_expand});
-			$shlibsfile = "$destdir/DEBIAN/shlibs";
-
-			print "Writing shlibs file...\n";
-
-			open(SHLIBS,">$shlibsfile") or die "can't write shlibs file for ".$self->get_fullname().": $!\n";
-			print SHLIBS <<EOF;
-$shlibsbody
-EOF
-close(SHLIBS) or die "can't write shlibs file for ".$self->get_fullname().": $!\n";
-			chmod 0644, $shlibsfile;
-	}
-
-	### config file list
-
-	if ($self->has_param("conffiles")) {
-		$listfile = "$destdir/DEBIAN/conffiles";
-		$conffiles = join("\n", grep {$_} split(/\s+/, $self->param("conffiles")))."\n";
-		$conffiles = &expand_percent($conffiles, $self->{_expand});
-
-		print "Writing conffiles list...\n";
-
-		open(SCRIPT,">$listfile") or die "can't write conffiles list file for ".$self->get_fullname().": $!\n";
-		print SCRIPT $conffiles;
-		close(SCRIPT) or die "can't write conffiles list file for ".$self->get_fullname().": $!\n";
-		chmod 0644, $listfile;
-	}
-
-	### daemonic service file
-
-	if ($self->has_param("DaemonicFile")) {
-		$daemonicname = $self->param_default("DaemonicName", $self->get_name());
-		$daemonicname .= ".xml";
-		$daemonicfile = "$destdir$basepath/etc/daemons/".$daemonicname;
-
-		print "Writing daemonic info file $daemonicname...\n";
-
-		if (&execute("mkdir -p $destdir$basepath/etc/daemons")) {
-			die "can't write daemonic info file for ".$self->get_fullname()."\n";
-		}
-		open(SCRIPT,">$daemonicfile") or die "can't write daemonic info file for ".$self->get_fullname().": $!\n";
-		print SCRIPT &expand_percent($self->param("DaemonicFile"), $self->{_expand});
-		close(SCRIPT) or die "can't write daemonic info file for ".$self->get_fullname().": $!\n";
-		chmod 0644, $daemonicfile;
-	}
-
-	### create .deb using dpkg-deb
-
-	if (not -d $self->get_debpath()) {
-		if (&execute("mkdir -p ".$self->get_debpath())) {
-			die "can't create directory for packages\n";
-		}
-	}
-	$cmd = "dpkg-deb -b $ddir ".$self->get_debpath();
-	if (&execute($cmd)) {
-		die "can't create package ".$self->get_debname()."\n";
-	}
-
-	if (&execute("ln -sf ".$self->get_debpath()."/".$self->get_debname()." ".
-							 "$basepath/fink/debs/")) {
-		die "can't symlink package ".$self->get_debname()." into pool directory\n";
-	}
-
-	### splitoffs
-	
-	my $splitoff;
-	foreach	 $splitoff (@{$self->{_splitoffs}}) {
-		# iterate over all splitoffs and call their build phase
-		$splitoff->phase_build(1);
-	}
-
-	### remove root dir
-
-	if (not $config->param_boolean("KeepRootDir") and not Fink::Config::get_option("keep_root") and -e $destdir) {
-		if (&execute("rm -rf $destdir")) {
-			&print_breaking("WARNING: Can't remove package root directory ".
-											"$destdir. ".
-											"This is not fatal, but you may want to remove ".
-											"the directory manually to save disk space. ".
-											"Continuing with normal procedure.");
-		}
-	}
-}
-
-### activate
-
-sub phase_activate {
-	my @packages = @_;
-	my (@installable);
-
-	for my $package (@packages) {
-		my $deb = $package->find_debfile();
-
-		unless (defined $deb and -f $deb) {
-			die "can't find package ".$package->get_debname()."\n";
-		}
-
-		push(@installable, $package);
-	}
-
-	if (@installable == 0) {
-		die "no installable .deb files found!\n";
-	}
-
-	my @deb_installable = map { $_->find_debfile() } @installable;
-	if (&execute("dpkg -i @deb_installable")) {
-		if (@installable == 1) {
-			die "can't install package ".$installable[0]->get_fullname()."\n";
-		} else {
-			die "can't batch-install packages: @deb_installable\n";
-		}
-	}
-
-	Fink::Status->invalidate();
-}
-
-### deactivate
-
-sub phase_deactivate {
-	my @packages = @_;
-
-	if (&execute("dpkg --remove @packages")) {
-		if (@packages == 1) {
-			die "can't remove package ".$packages[0]."\n";
-		} else {
-			die "can't batch-remove packages: @packages\n";
-		}
-	}
-	Fink::Status->invalidate();
-}
-
-### purge
-
-sub phase_purge {
-	my @packages = @_;
-
-	if (&execute("dpkg --purge @packages")) {
-		if (@packages == 1) {
-			die "can't purge package ".$packages[0]."\n";
-		} else {
-			die "can't batch-purge packages: @packages\n";
-		}
-	}
-	Fink::Status->invalidate();
-}
-
-### set environment variables according to spec
-
-sub set_env {
-	my $self = shift;
-	my ($varname, $s, $expand, $procs);
-	if ($config->has_param("Processors")) {
-		### Add -j <proc number> to CFLAGS and CXXFLAGS
-		$procs = $config->param("Processors");
-	} else {
-		$procs = 1;
-	}
-	my %defaults = ( "CPPFLAGS" => "-I\%p/include",
-					"LDFLAGS"  => "-L\%p/lib",
-					"CFLAGS"   => "-j $procs",
-					"CXXFLAGS" => "-j $procs" );
-	my $bsbase = Fink::Bootstrap::get_bsbase();
-
-	# clean the environment
-	%ENV = ("HOME" => $ENV{"HOME"});
-
-	# add system path
-	$ENV{"PATH"} = "/bin:/usr/bin:/sbin:/usr/sbin";
-	
-	# add bootstrap path if necessary
-	if (-d $bsbase) {
-		$ENV{"PATH"} = "$bsbase/bin:$bsbase/sbin:" . $ENV{"PATH"};
-	}
-
-	# run init.sh script which will set the path and other additional variables
-	if (-r "$basepath/bin/init.sh") {
-		my @vars = `sh -c ". $basepath/bin/init.sh ; /usr/bin/env"`;
-		chomp @vars;
-		%ENV = map { split /=/,$_,2 } @vars;
-	}
-
-	# set variables according to the info file
-	$expand = $self->{_expand};
-	foreach $varname ("CC", "CFLAGS",
-					  "CPP", "CPPFLAGS",
-					  "CXX", "CXXFLAGS",
-					  "DYLD_LIBRARY_PATH",
-					  "LD", "LDFLAGS", 
-					  "LIBRARY_PATH", "LIBS",
-					  "MACOSX_DEPLOYMENT_TARGET",
-					  "MAKE", "MFLAGS") {
-		if ($self->has_param("Set$varname")) {
-			$s = $self->param("Set$varname");
-			if (exists $defaults{$varname} and
-					not $self->param_boolean("NoSet$varname")) {
-				$s .= " ".$defaults{$varname};
-			}
-			$ENV{$varname} = &expand_percent($s, $expand);
-		} else {
-			if (exists $defaults{$varname} and
-					not $self->param_boolean("NoSet$varname")) {
-				$s = $defaults{$varname};
-				$ENV{$varname} = &expand_percent($s, $expand);
-			} else {
-				delete $ENV{$varname};
-			}
-		}
-	}
-}
-
-### run script
-
-sub run_script {
-	my $self = shift;
-	my $script = shift;
-	my $phase = shift;
-	my %env_bak;
-	
-	# Backup the environment variables
-	%env_bak = %ENV;
-	
-	# Expand percent shortcuts
-	$script = &expand_percent($script, $self->{_expand});
-	
-	# Clean the environment
-	$self->set_env();
-	
-	# Run the script
-	if (&execute_script($script)) {
-		die $phase." ".$self->get_fullname()." failed\n";
-	}
-	
-	# Restore the environment
-	%ENV = %env_bak;
-}
-
-### EOF
-1;
