diff -ruN fink/perlmod/Fink/PkgVersion.pm fink.uidgid/perlmod/Fink/PkgVersion.pm
--- fink/perlmod/Fink/PkgVersion.pm	Tue Jul 29 11:50:46 2003
+++ fink.uidgid/perlmod/Fink/PkgVersion.pm	Tue Aug 12 18:59:13 2003
@@ -36,6 +36,7 @@
 use Fink::Status;
 use Fink::VirtPackage;
 use Fink::Bootstrap qw(&get_bsbase);
+use Fink::User qw(&get_perms &add_user &remove_user);
 
 use File::Basename qw(&dirname);
 
@@ -77,6 +78,12 @@
 		$self->{_perlversion} = $1;
 		$self->{_type} = $type;
 	}
+	### make type "user" and/or "group" equal to bundle
+	if ($self->{_type} eq "user") {
+		$self->{_type} = $type = "bundle";
+	} elsif ($self->{_type} eq "group") {
+		$self->{_type} = $type = "bundle";
+	}
 	# the following is set by Fink::Package::scan
 	$self->{_filename} = $filename = $self->{thefilename};
 
@@ -1684,11 +1691,70 @@
 	### create scripts as neccessary
 
 	foreach $scriptname (qw(preinst postinst prerm postrm)) {
+        $scriptbody = "";
+        
+        	### Check for Group/User, if exists then process
+		if ($self->has_param("Group") || $self->has_param("User")) {
+			### Add user/group check to preinst if needed
+			if ($self->{_type} eq "bundle") {
+				my ($name, $type) = (0, 0);
+				my ($desc, $shell, $home, $group);
+				my ($tmp, $script);
+    
+				if ($self->has_param("Group")) {
+					$tmp = $self->param("Group");
+					$tmp = &expand_percent($tmp,
+						$self->{_expand});
+					($name, $desc) = split(/:/, $tmp);
+					$type = "group";
+				} elsif ($self->has_param("User")) {
+					$tmp = $self->param("User");
+					$tmp = &expand_percent($tmp,
+						 $self->{_expand});
+					($name, $group, $desc, $shell, $home) =
+							split(/:/, $tmp);
+					$type = "user";
+				}
+            
+				if ($scriptname eq "preinst") {
+					$script = "";
+					$script = Fink::User->add_user($name,
+					$type, $desc, $shell, $home, $group);
+
+					if ($script) {
+						### Add to top of preinstscript
+						$script .= "\n";
+						$scriptbody = $script;
+					}
+				}
+				if($scriptname eq "postrm") {
+					$script = "";
+					$script =
+					 Fink::User->remove_user($name, $type);
+
+					if ($script) {
+						### Add to top of postrmscript
+						$script .= "\n";
+						$scriptbody = $script;
+					}
+				}
+			}
+        
+			### Add chown script to postinst script if needed
+			if ($scriptname eq "postinst") {
+				my $script = Fink::User->get_perms($ddir);
+
+				if ($script) {
+					### Add to top of postinstscript
+					$script .= "\n";
+					$scriptbody = $script;
+				}
+			}
+		}
+
 		# get script piece from package description
 		if ($self->has_param($scriptname."Script")) {
 			$scriptbody = $self->param($scriptname."Script");
-		} else {
-			$scriptbody = "";
 		}
 
 		# add UpdatePOD Code
diff -ruN fink/perlmod/Fink/User.pm fink.uidgid/perlmod/Fink/User.pm
--- fink/perlmod/Fink/User.pm	Wed Dec 31 17:00:00 1969
+++ fink.uidgid/perlmod/Fink/User.pm	Wed Aug 13 10:08:07 2003
@@ -0,0 +1,331 @@
+#
+# Fink::User class
+#
+# Fink - a package manager that downloads source and installs it
+# Copyright (c) 2001 Christoph Pfisterer
+# Copyright (c) 2001-2003 The Fink Package Manager Team
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA	 02111-1307, USA.
+#
+
+package Fink::User;
+
+use Fink::Config qw($config $basepath $debarch);
+use Fink::Services qw(&execute &print_breaking &prompt &prompt_boolean);
+use File::Find;
+use Fcntl ':mode'; # for search_comparedb
+
+use strict;
+use warnings;
+
+BEGIN {
+	use Exporter ();
+	our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);
+	$VERSION	 = 1.00;
+	@ISA		 = qw(Exporter);
+	@EXPORT		 = qw();
+	@EXPORT_OK	 = qw(&get_perms &add_user &remove_user);
+	%EXPORT_TAGS = ( );		# eg: TAG => [ qw!name1 name2! ],
+}
+our @EXPORT_OK;
+
+our ($lowUID, $highUID, $lowGID, $highGID);
+
+$lowUID = 250;
+$highUID = 299;
+$lowGID = 250;
+$highGID = 299;
+
+END { }				# module clean-up code here (global destructor)
+
+### Get a list of uid:gid for all files in a pkg, this is per pkg not just
+### parent pkgs, return a postinstscript to set them, include it in the deb
+sub get_perms {
+	my $self = shift;
+	my $rootdir = shift;
+
+	my $script = "";
+
+	my (@filelist, @files, @users, @groups);
+	my ($wanted, $file, $usr, $grp);
+	my ($dev, $ino, $mode, $nlink, $uid, $gid);
+
+	### Weird why isn't $rootdir the full path...odd
+	unless ($rootdir =~ /^$basepath\/src/) {
+		$rootdir = "$basepath/src/$rootdir";
+	}
+
+	$wanted =
+		sub {
+			if (-x) {
+				push @filelist, $File::Find::fullname;
+			}
+		};
+	find({ wanted => $wanted, follow => 1, no_chdir => 1 }, $rootdir);
+    
+	foreach $file (@filelist) {
+		### reset uid and gid
+		($gid, $uid) = ("None", "None");
+		### Don't add DEBIAN dir
+		next if ($file =~ /DEBIAN/);
+		## Skip the rootdir
+		next if ($file =~ /^$rootdir$/);
+	  
+		($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($file);
+
+		### Skip anything that doesn't have a user or group;
+		next if ($uid eq "None" or $gid eq "None");
+
+		$usr = `/usr/bin/nidump passwd . | /usr/bin/grep \"*:$uid:\" | /usr/bin/cut -d\":\" -f1`;
+		$grp = `/usr/bin/nidump group . | /usr/bin/grep \"*:$gid:\" | /usr/bin/cut -d\":\" -f1`;
+
+		chomp($usr);
+		chomp($grp);
+
+		### Remove $basepath/src/root-...
+		$file =~ s/^$rootdir//g;
+
+		### DEBUG
+		print "Processing \%i$file...UID: $uid ($usr), GID: $gid ($grp)\n";
+	  
+		push(@files, $file);
+		push(@users, $usr);
+		push(@groups, $grp);
+	}
+
+	$file = join(":", @files);
+	$usr = join (":", @users);
+	$grp = join (":", @groups);
+
+	$self->set_perms($rootdir, $file);
+
+	$script = $self->get_chown($file, $usr, $grp);
+
+	return $script;
+}
+
+### add check/add user script and then set perms
+sub add_user {
+	my $self = shift;
+	my $name = shift;
+	my $type = shift;
+	my $desc = shift;
+	my $shell = shift || "/usr/bin/false";
+	my $home = shift;
+	my $group = shift || $name;
+ 
+	my $nidump = "/usr/bin/nidump";
+	my $niutil = "/usr/bin/niutil";
+	my $grep = "/usr/bin/grep";
+	my $cut = "/usr/bin/cut";
+	my $chown = "/usr/sbin/chown";
+	my $mkdir = "/bin/mkdir -p";
+	my $expr = "/bin/expr";
+
+	my $pass = "*";
+	my $script = "";
+
+	### FIXME need to figure a way here to get and set uids and gids, and
+	### ask if the fink.conf specifies this.  maybe use a grep on fink.conf
+
+	if ($type eq "user") {
+		$script = <<"EOF";
+getgid() {
+  gid=`$nidump group . | $grep -e \"^$name:\" | $cut -d\":\" -f3`
+}
+
+getuid() {
+  uid=`$nidump passwd . | $grep -e \"^$name:\" | $cut -d\":\" -f3`
+  if [ ! \$uid ]; then
+    continue="no"
+    number_used="dontknow"
+    fnumber=$lowUID
+    until [ \$continue = "yes" ]; do
+      if [ `$nidump passwd . | $cut -d":" -f3 | $grep -c "^\$fnumber\$"` -gt 0 ]; then
+        number_used=true
+      else
+        if [ \$fnumber -gt $highUID ]; then
+          break
+        fi
+        number_used=false
+      fi
+
+      if [ \$number_used = "true" ]; then
+        fnumber=`$expr \$fnumber + 1`
+      else
+        uid="\$fnumber"
+        continue="yes"
+      fi
+    done;
+  fi
+}
+
+getuid
+getgid
+
+if [ \$uid -gt $highUID ]; then
+  exit 1
+fi
+
+if [ ! \$gid ]; then
+  exit 1
+fi
+
+if [ \$uid -lt $lowUID ]; then
+  exit 1
+fi
+
+$niutil -create . /users/$name
+$niutil -createprop . /users/$name realname "$desc"
+$niutil -createprop . /users/$name gid \$gid
+$niutil -createprop . /users/$name uid \$uid
+$niutil -createprop . /users/$name home "$home"
+$niutil -createprop . /users/$name name "$name"
+$niutil -createprop . /users/$name passwd "$pass"
+$niutil -createprop . /users/$name shell "$shell"
+$niutil -createprop . /users/$name change 0
+$niutil -createprop . /users/$name expire 0
+$mkdir "$home"
+$chown $name:$group "$home"
+
+EOF
+	} else {
+		$script = <<"EOF";
+getgid() {
+  gid=`$nidump group . | $grep -e \"^$name:\" | $cut -d\":\" -f3`
+  if [ ! \$gid ]; then
+    continue="no"
+    number_used="dontknow"
+    fnumber=$lowGID
+    until [ \$continue = "yes" ]; do
+      if [ `$nidump group . | $cut -d":" -f3 | $grep -c "^\$fnumber\$"` -gt 0 ]; then
+        number_used=true
+      else
+        if [ \$fnumber -gt $highGID ]; then
+          break
+        fi
+        number_used=false
+      fi
+
+      if [ \$number_used = "true" ]; then
+        fnumber=`$expr \$fnumber + 1`
+      else
+        gid="\$fnumber"
+        continue="yes"
+      fi
+    done;
+  fi
+}
+
+getgid
+
+if [ \$gid -gt $highGID ]; then
+  exit 1
+fi
+
+if [ \$gid -lt $lowGID ]; then
+  exit 1
+fi
+
+$niutil -create . /groups/$name
+$niutil -createprop . /groups/$name name "$name"
+$niutil -createprop . /groups/$name gid \$gid
+$niutil -createprop . /groups/$name passwd "$pass"
+
+EOF
+	}
+    
+	return $script;
+}
+
+### Check remove user/group
+sub remove_user {
+	my $self = shift;
+	my $name = shift;
+	my $type = shift;
+
+	my $nidump = "/usr/bin/nidump";
+	my $niutil = "/usr/bin/niutil";
+	my $grep = "/usr/bin/grep";
+	my $cut = "/usr/bin/cut";
+	my $rm = "/bin/rm -rf";
+
+	my $script = "";
+    
+	if ($type eq "user") {
+		$script = <<"EOF";
+if [ \$1 != "upgrade" ]; then
+  HomeDir=`$nidump passwd . | $grep '$name:' | $cut -d\":\" -f9`
+  $rm \$HomeDir
+  $niutil -destroy . /users/$name
+fi
+
+EOF
+	} else {
+		$script = <<"EOF";
+if [ \$1 != "upgrade" ]; then
+  $niutil -destroy . /groups/$name
+fi
+
+EOF
+	}
+    
+	return $script
+}
+
+### build script to set user/groups
+sub get_chown {
+	my $self = shift;
+	my $files = shift;
+	my $users = shift;
+	my $groups = shift;
+
+	my ($file);
+	my $script = "";
+	my $i = 0;
+	
+	### Build perms script
+	my @files = split(/:/, $files);
+	my @users = split(/:/, $users);
+	my @groups = split(/:/, $groups);
+
+	foreach $file (@files) {
+		$script .= "/usr/sbin/chown $users[$i]:$groups[$i] \"$file\"\n";
+		$i++;
+	}
+    
+	return $script;
+}
+
+### Set everything to root:wheel before packaging to keep all debs the same
+sub set_perms {
+	my $self = shift;
+	my $rootdir = shift;
+	my $files = shift;
+	
+	my ($file);
+	my @files = split(/:/, $files);
+	
+	foreach $file (@files) {
+		if (&execute("/usr/sbin/chown root:wheel \"$rootdir$file\"")) {
+			die "Couldn't change ownership of $file!\n";
+		}
+	}
+
+	return 0;
+}
+
+### EOF
+1;
