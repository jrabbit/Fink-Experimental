diff -ruN freeamp.orig/Makefile-plugins.in freeamp/Makefile-plugins.in
--- freeamp.orig/Makefile-plugins.in	Mon Oct 15 22:31:05 2001
+++ freeamp/Makefile-plugins.in	Thu May 16 20:19:37 2002
@@ -73,7 +73,7 @@
 LFIOBJ = io/src/pmi.o io/local/localfileinput.o io/src/pipeline.lo
 
 plugins/localfileinput.pmi: $(LFIOBJ)
-	$(LINKMOD) -o $@ $(LFIOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(LFIOBJ) $(STATICLD)
 
 #$(LFIOBJ):
 #	$(CXXCOMPILE) $(FPIC) -o $(*).o -c ${*:%.o=%}.c
@@ -83,7 +83,7 @@
 HTTPOBJ  = io/src/pmi.o io/http/httpinput.o io/src/pipeline.lo io/src/tstream.lo
 
 plugins/httpinput.pmi: $(HTTPOBJ)
-	$(LINKMOD) -o $@ $(HTTPOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(HTTPOBJ) $(STATICLD)
 
 #$(HTTPOBJ):
 #	$(CXXCOMPILE) $(FPIC) -o $(*).o -c ${*:%.o=%}.c
@@ -92,7 +92,7 @@
 OBSPMI  = io/src/pmi.o io/obs/obsinput.o io/src/pipeline.lo io/src/tstream.lo
 
 plugins/obsinput.pmi: $(OBSPMI)
-	$(LINKMOD) -o $@ $(OBSPMI) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(OBSPMI) $(STATICLD)
 
 #
 # PMO section
@@ -100,11 +100,13 @@
 SCPMObeosOBJ=io/soundcard/beos/src/soundutils.o
 SCPMObeosLIB=-lmedia -lbe -lroot
 
+SCPMOdarwinLIB=-lesd
+
 SCPMOOBJ  = io/soundcard/unix/$(UNIX_AUDIO_API)/src/soundcardpmo.o io/src/pmo.o
 SCPMOOBJ += io/src/pipeline.lo $(SCPMO$(HOST_OS)OBJ)
 
 plugins/soundcard.pmo: $(SCPMOOBJ)
-	$(LINKMOD) -o $@ $(SCPMOOBJ) $(SCPMO$(HOST_OS)LIB) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(SCPMOOBJ) $(SCPMO$(HOST_OS)LIB) $(STATICLD)
 
 # alsa
 ALSAOBJ  = io/alsa/$(OSDEP)/src/alsapmo.o io/src/pipeline.lo io/src/pmo.o
@@ -117,35 +119,35 @@
 ESNDOBJ  = io/esound/src/esoundpmo.o io/src/pipeline.lo io/src/pmo.o
 
 plugins/esound.pmo: $(ESNDOBJ)
-	$(LINKMOD) -o $@ $(ESNDOBJ) $(ESD_LIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(ESNDOBJ) $(ESD_LIBS)
 #	$(LINKMOD) -o $@ $(ESNDOBJ) $(STATICLD) /usr/lib/libesd.a /usr/lib/libaudiofile.a
 
 # esound
 ARTSOBJ  = io/arts/src/artspmo.o io/src/pipeline.lo io/src/pmo.o
 
 plugins/arts.pmo: $(ARTSOBJ)
-	$(LINKMOD) -o $@ $(ARTSOBJ) $(ARTS_LIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(ARTSOBJ) $(ARTS_LIBS)
    
 # cd
 CDPMOOBJ  = io/cd/unix/src/cdpmo.o io/cd/unix/src/cdaudio.o 
 CDPMOOBJ += io/cd/unix/src/discids.o io/src/pipeline.lo io/src/pmo.o
 
 plugins/cd.pmo: $(CDPMOOBJ)
-	$(LINKMOD) -o $@ $(CDPMOOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(CDPMOOBJ) $(STATICLD)
 
 # wav out
 WAVPMOOBJ  = io/wavout/src/wavoutpmo.o io/wavout/src/wav.o 
 WAVPMOOBJ += io/src/pmo.o io/src/pipeline.lo
 
 plugins/wavout.pmo: $(WAVPMOOBJ)
-	$(LINKMOD) -o $@ $(WAVPMOOBJ)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(WAVPMOOBJ)
 
 # signature
 SIGNATUREPMOOBJ  = io/signature/src/signaturepmo.o io/src/pmo.o 
 SIGNATUREPMOOBJ += io/src/pipeline.lo
 
 plugins/signature.pmo: $(SIGNATUREPMOOBJ)
-	$(LINKMOD) -o $@ $(SIGNATUREPMOOBJ)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(SIGNATUREPMOOBJ)
 
 #
 # UI section
@@ -156,7 +158,7 @@
 DOWNLOADUIOBJ += ui/musicbrowser/unix/src/gtkmessagedialog.o
 
 plugins/download.ui: $(DOWNLOADUIOBJ)
-	$(LINKMOD) -o $@ $(DOWNLOADUIOBJ) $(GTK_LIBS) 
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(DOWNLOADUIOBJ) $(GTK_LIBS) 
 #	$(LINKMOD) -o $@ $(DOWNLOADUIOBJ) $(STATICLD)
 
 # musicbrowser ui
@@ -200,7 +202,7 @@
 MUSICBROWSERPOSTLINK = $($(OSTYPE)MUSICBROWSERPOSTLINK)
 
 plugins/musicbrowser.ui: $(MUSICBROWSEROBJ)
-	$(LINKMOD) -o $@ $(MUSICBROWSEROBJ) $(MUSICBROWSERLIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(MUSICBROWSEROBJ) $(MUSICBROWSERLIBS)
 #	$(LINKMOD) -o $@ $(MUSICBROWSEROBJ) $(STATICLD) 
 	$(MUSICBROWSERPOSTLINK)
 
@@ -249,7 +251,7 @@
 BEOSFREEAMPUILIBS = -ltranslation -ltracker -lbe
 
 plugins/freeamp.ui: $(FREEAMPUIOBJ)
-	$(LINKMOD) -o $@ $(FREEAMPUIOBJ) $(FREEAMPUILIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(FREEAMPUIOBJ) $(FREEAMPUILIBS)
 #	$(LINKMOD) -o $@ $(FREEAMPUIOBJ) $(STATICLD)
 
 # MakeTheme, only built if we're building freeamp.ui
@@ -265,33 +267,33 @@
 CMDUIOBJ = ui/cmdline/cmdlineUI.o 
 
 plugins/freeampcmd.ui: $(CMDUIOBJ)
-	$(LINKMOD) -o $@ $(CMDUIOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(CMDUIOBJ) $(STATICLD)
 
 # Mpg123 ui
 MPG123UIOBJ = ui/mpg123/Mpg123UI.o 
 
 plugins/mpg123.ui: $(MPG123UIOBJ)
-	$(LINKMOD) -o $@ $(MPG123UIOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(MPG123UIOBJ) $(STATICLD)
 
 # ncurses ui
 NCURSESUIOBJ = ui/ncurses/ncursesUI.o 
 
 plugins/ncurses.ui: $(NCURSESUIOBJ)
-	$(LINKMOD) -o $@ $(NCURSESUIOBJ) -l@CURSES@ 
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(NCURSESUIOBJ) -l@CURSES@ 
 #	$(LINKMOD) -o $@ $(NCURSESUIOBJ) /usr/lib/libncurses.a $(STATICLD)
 
 # lcd ui
 LCDUIOBJ = ui/lcd/src/lcdui.o ui/lcd/src/sockets.o 
 
 plugins/lcd.ui: $(LCDUIOBJ)
-	$(LINKMOD) -o $@ $(LCDUIOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(LCDUIOBJ) $(STATICLD)
 
 # IRman
 IRMANUIOBJ = ui/irman/src/irmanui.o ui/irman/src/ircmd.o 
 IRMANUIOBJ += ui/irman/src/irfunc.o ui/irman/src/irio.o
 
 plugins/irman.ui: $(IRMANUIOBJ)
-	$(LINKMOD) -o $@ $(IRMANUIOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(IRMANUIOBJ) $(STATICLD)
 
 CORBAUIOBJ  = ui/corba/Freeamp-common.o ui/corba/corbaUI.o ui/corba/corba.o
 CORBAUIOBJ += ui/corba/Freeamp-skels.o
@@ -309,7 +311,7 @@
 	cd ui/corba && $(ORBIT_IDL) Freeamp.idl
 
 plugins/corba.ui: $(CORBAUIOBJ)
-	$(LINKMOD) -o $@ $(CORBAUIOBJ) $(STATICLD) $(LDFLAGS) $(ORBIT_LIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(CORBAUIOBJ) $(STATICLD) $(LDFLAGS) $(ORBIT_LIBS)
 
 #
 # LMC section
@@ -319,7 +321,7 @@
 CDLMCOBJ = lmc/cd/src/cdlmc.o io/src/pipeline.lo
 
 plugins/cd.lmc: $(CDLMCOBJ)
-	$(LINKMOD) -o $@ $(CDLMCOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(CDLMCOBJ) $(STATICLD)
 
 # the XING decoder objs and dependencies:
 # This is kinda nasty, since there's C, C++, and asm, oh my!
@@ -340,7 +342,7 @@
 XINGLMCOBJ = $(XINGLMCOBJC) $(XINGLMCOBJCXX)
 
 plugins/xingmp3.lmc: $(XINGLMCOBJ)
-	$(LINKMOD) -o $@ $(XINGLMCOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(XINGLMCOBJ) $(STATICLD)
 
 # vorbis lib
 VORBISLIBOBJ = lmc/vorbis/src/lib/analysis.o
@@ -372,12 +374,12 @@
 # vorbis lmc
 VORBISOBJ = lmc/vorbis/src/vorbislmc.o
 plugins/vorbis.lmc: $(VORBISOBJ) 
-	$(LINKMOD) -o $@ $(VORBISOBJ) -lvorbis -lvorbisfile $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(VORBISOBJ) -lvorbis -lvorbisfile $(STATICLD)
 
 # wav lmc
 WAVOBJ = lmc/wav/src/wavlmc.o
 plugins/wav.lmc: $(WAVOBJ) 
-	$(LINKMOD) -o $@ $(WAVOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(WAVOBJ) $(STATICLD)
 
 # MDF section 
 
@@ -385,7 +387,7 @@
 ID3V1OBJ = plm/metadata/id3v1/id3v1.lo 
 
 plugins/id3v1.mdf: $(ID3V1OBJ)
-	$(LINKMOD) -o $@ $(ID3V1OBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(ID3V1OBJ) $(STATICLD)
 
 #id3v2
 ID3V2OBJ = plm/metadata/id3v2/id3v2.lo
@@ -422,25 +424,25 @@
 ID3V2OBJ += plm/metadata/id3v2/c_wrapper.o
 
 plugins/id3v2.mdf: $(ID3V2OBJ)
-	$(LINKMOD) -o $@ $(ID3V2OBJ) $(STATICLD) $(ID3_LIBS)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(ID3V2OBJ) $(STATICLD) $(ID3_LIBS)
 
 #vorbis
 VORBISMDFOBJ = plm/metadata/vorbis/vorbis.o
 
 plugins/vorbis.mdf: $(VORBISMDFOBJ) 
-	$(LINKMOD) -o $@ $(VORBISMDFOBJ) -lvorbis -lvorbisfile $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(VORBISMDFOBJ) -lvorbis -lvorbisfile $(STATICLD)
 
 #misc
 MISCOBJ = plm/metadata/misc/misc.lo 
 
 plugins/misc.mdf: $(MISCOBJ)
-	$(LINKMOD) -o $@ $(MISCOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(MISCOBJ) $(STATICLD)
 
 #mbcd
 MBCDOBJ = plm/metadata/mbcd/mbcd.o 
 
 plugins/mbcd.mdf: $(MBCDOBJ)
-	$(LINKMOD) -o $@ $(MBCDOBJ) $(STATICLD) -lmusicbrainz
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(MBCDOBJ) $(STATICLD) -lmusicbrainz
 
 # PLF section
 
@@ -448,14 +450,14 @@
 M3UOBJ = plm/playlist/m3u/m3u.o 
 
 plugins/m3u.plf: $(M3UOBJ)
-	$(LINKMOD) -o $@ $(M3UOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(M3UOBJ) $(STATICLD)
 
 
 #pls
 PLSOBJ = plm/playlist/pls/pls.o
 
 plugins/pls.plf: $(PLSOBJ)
-	$(LINKMOD) -o $@ $(PLSOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(PLSOBJ) $(STATICLD)
 
 # PPP section
 
@@ -463,7 +465,7 @@
 PMP300OBJ  = plm/portable/pmp300/pmp300.o plm/portable/pmp300/sba/rio.o
 
 plugins/pmp300.ppp: $(PMP300OBJ)
-	$(LINKMOD) -o $@ $(PMP300OBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(PMP300OBJ) $(STATICLD)
 
 # DLM section
 
@@ -472,7 +474,7 @@
 RMPOBJ = dlm/rmp/rmp.o lib/xml/src/Parse.lo 
 
 plugins/rmp.dlf: $(RMPOBJ)
-	$(LINKMOD) -o $@ $(RMPOBJ) $(STATICLD) 
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(RMPOBJ) $(STATICLD) 
 
 # FTC section
 
@@ -481,14 +483,14 @@
 WINAMPOBJ = ftc/winamp/winamp.o
 
 plugins/winamp.ftf: $(WINAMPOBJ)
-	$(LINKMOD) -o $@ $(WINAMPOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(WINAMPOBJ) $(STATICLD)
 
 # kjofol
 
 KJOFOLOBJ = ftc/kjofol/kjofol.doh
 
 plugins/kjofol.ftf: $(KJOFOLOBJ)
-	$(LINKMOD) -o $@ $(KJOFOLOBJ) $(STATICLD)
+	$(LINKMOD) -flat_namespace -undefined suppress -o $@ $(KJOFOLOBJ) $(STATICLD)
 
 # zlib section
 
diff -ruN freeamp.orig/Makefile.in freeamp/Makefile.in
--- freeamp.orig/Makefile.in	Thu Apr 19 13:33:02 2001
+++ freeamp/Makefile.in	Thu May 16 13:04:37 2002
@@ -18,6 +18,7 @@
 lib/zlib/lib/libzlib.a: $(ZLIBOBJ)
 	+test -d lib/zlib/lib || mkdir lib/zlib/lib
 	$(LIBMOD) $@ $(ZLIBOBJ)
+	ranlib -s $@
 
 GDBMOBJ  = lib/gdbm/bucket.o lib/gdbm/falloc.o lib/gdbm/findkey.o
 GDBMOBJ += lib/gdbm/gdbmclose.o lib/gdbm/gdbmdelete.o lib/gdbm/gdbmerrno.o
@@ -30,18 +31,21 @@
 lib/gdbm/lib/libfagdbm.a: $(GDBMOBJ)
 	+test -d lib/gdbm/lib || mkdir lib/gdbm/lib
 	$(LIBMOD) $@ $(GDBMOBJ)
+	ranlib -s $@
 
 PARSEOBJ = lib/xml/src/Parse.o
 
 lib/xml/lib/libfaxml.a: $(PARSEOBJ)
 	+test -d lib/xml/lib || mkdir lib/xml/lib
 	$(LIBMOD) $@ $(PARSEOBJ)
+	ranlib -s $@
 
 HTTPOBJ = lib/http/src/Http.o
 
 lib/http/lib/libfahttp.a: $(HTTPOBJ)
 	+test -d lib/http/lib || mkdir lib/http/lib
 	$(LIBMOD) $@ $(HTTPOBJ)
+	ranlib -s $@
 
 FREEAMPunixOBJ  = base/unix/src/bootstrap.o base/unix/src/unixprefs.o
 FREEAMPunixOBJ += base/unix/src/win32impl.o base/unix/src/pthreadthread.o
@@ -54,6 +58,7 @@
 FREEAMPfreebsdOBJ = $(FREEAMPunixOBJ)
 FREEAMPqnxOBJ     = $(FREEAMPunixOBJ)
 FREEAMPirixOBJ    = $(FREEAMPunixOBJ)
+FREEAMPdarwinOBJ  = $(FREEAMPunixOBJ)
 
 FREEAMPbeosOBJ  = base/beos/src/beosprefs.o base/beos/src/beosthread.o
 FREEAMPbeosOBJ += base/beos/src/bootstrap.o base/beos/src/debug.o 
@@ -86,6 +91,7 @@
 FREEAMPfreebsdLIBS = -pthread
 FREEAMPqnxLIBS = -lasound
 FREEAMPirixLIBS = -lpthread
+FREEAMPdarwinLIBS = -ldl -lpthread -lpoll -lstdc++
 UNIXFREEAMPLIBS = $(FREEAMP$(HOST_OS)LIBS) $(EXTRALIBS) -lmusicbrainz #-ldmallocthcxx
 
 BEOSFREEAMPLIBS = -lbe -lroot
@@ -129,7 +135,6 @@
 freeamp: $(FREEAMPOBJ) $(freeamp_DEPENDENCIES)
 	@rm -f freeamp
 	$(CXXLINK) $(FREEAMPOBJ) $(LDFLAGS) $(FREEAMPLIBS)
-#	$(CXXLINK) -v -nostdlib -Wl,--export-dynamic -Wl,-call_shared -rdynamic /usr/lib/crt1.o /usr/lib/crti.o /usr/lib/gcc-lib/i386-linux/2.95.2/crtbegin.o -Wl,--whole-archive $(FREEAMPOBJ) /usr/lib/libdl.a /usr/lib/libpthread.a /usr/lib/libgtk.a /usr/lib/libgdk.a /usr/lib/libgmodule.a /usr/lib/libgthread.a /usr/lib/libglib.a /usr/X11R6/lib/libXi.a /usr/X11R6/lib/libXext.a /usr/X11R6/lib/libX11.a /usr/lib/libttf.a /usr/lib/gcc-lib/i386-linux/2.95.2/libstdc++.a -Wl,--no-whole-archive /usr/lib/libm.a -lgcc -lc -lgcc /usr/lib/gcc-lib/i386-linux/2.95.2/crtend.o /usr/lib/crtn.o 
 	$(FREEAMPPOSTLINK)
 
 clean: freeamp-clean plugins-clean
diff -ruN freeamp.orig/base/src/downloadmanager.cpp freeamp/base/src/downloadmanager.cpp
--- freeamp.orig/base/src/downloadmanager.cpp	Tue Oct 30 13:19:13 2001
+++ freeamp/base/src/downloadmanager.cpp	Tue May 14 19:13:31 2002
@@ -35,7 +35,7 @@
 #include "downloadmanager.h"
 #include "musiccatalog.h"
 
-#if defined(unix) || defined(__BEOS__) || defined(_BSD_SOURCE)
+#if defined(unix) || defined(__BEOS__) || defined(_BSD_SOURCE) || defined (__APPLE__)
 #define SOCKET int
 #endif
 
@@ -59,7 +59,7 @@
 #include <algorithm>
 #include <fstream>
 
-#if defined (unix) || defined(_BSD_SOURCE)
+#if defined (unix) || defined(_BSD_SOURCE) || defined(__APPLE__)
 #include <arpa/inet.h>
 #define closesocket(x) close(x)
 #ifndef O_BINARY
diff -ruN freeamp.orig/base/src/thread.cpp freeamp/base/src/thread.cpp
--- freeamp.orig/base/src/thread.cpp	Thu Sep 28 05:33:09 2000
+++ freeamp/base/src/thread.cpp	Tue May 14 19:06:13 2002
@@ -25,7 +25,7 @@
 #include "thread.h"
 
 #if defined(__LINUX__) || defined(solaris) || defined(__FreeBSD__) || \
-    defined(__QNX__) || defined(irix)
+    defined(__QNX__) || defined(irix) || defined(__APPLE__)
     #include "pthreadthread.h"
 #elif WIN32
     #include "win32thread.h"
@@ -39,7 +39,7 @@
 {
     Thread* thread = NULL;
 #if defined(__LINUX__) || defined(solaris) || defined(__FreeBSD__) || \
-    defined(__QNX__) || defined(irix)
+    defined(__QNX__) || defined(irix) || defined(__APPLE__)
     thread = new pthreadThread();
 #elif WIN32
     thread = new win32Thread();
diff -ruN freeamp.orig/base/src/timer.cpp freeamp/base/src/timer.cpp
--- freeamp.orig/base/src/timer.cpp	Thu Sep 28 05:33:09 2000
+++ freeamp/base/src/timer.cpp	Tue May 14 19:19:52 2002
@@ -32,7 +32,7 @@
 #include "timer.h"
 
 #if defined(__linux__) || defined(solaris) || defined(__FreeBSD__) || \
-    defined(__QNX__) || defined(irix)
+    defined(__QNX__) || defined(irix) || defined(__APPLE__)
 #include <unistd.h>
 #define GoToSleep(x) usleep(x*1000)
 #elif defined(WIN32)
diff -ruN freeamp.orig/base/unix/include/pthreadthread.h freeamp/base/unix/include/pthreadthread.h
--- freeamp.orig/base/unix/include/pthreadthread.h	Wed Jun 14 04:51:28 2000
+++ freeamp/base/unix/include/pthreadthread.h	Wed May 15 10:11:53 2002
@@ -31,6 +31,11 @@
 #include "mutex.h"
 #include "semaphore.h"
 
+/* Not yet available in Mac OS X (Need to add code here) */
+#ifdef __APPLE__
+# define pthread_kill
+#endif /* __APPLE__ */
+
 class pthreadThread : public Thread{
 
 public:
diff -ruN freeamp.orig/base/unix/src/bootstrap.cpp freeamp/base/unix/src/bootstrap.cpp
--- freeamp.orig/base/unix/src/bootstrap.cpp	Fri Dec 29 13:00:47 2000
+++ freeamp/base/unix/src/bootstrap.cpp	Tue May 14 21:52:56 2002
@@ -27,7 +27,7 @@
 #include <stdio.h>
 #include <unistd.h>
 #include <sys/types.h>
-#ifdef HAVE_SEMCTL
+#if defined(HAVE_SEMCTL) && !defined(__APPLE__)
 #include <sys/ipc.h>
 #include <sys/sem.h> 
 #include <sys/shm.h> 
@@ -118,7 +118,7 @@
     allow_mult = true;
 #endif
 
-#ifdef HAVE_SEMCTL
+#if defined(HAVE_SEMCTL) && !defined(__APPLE__)
     if (!allow_mult) {
         iCmdSem = semget(tSemKey, 1, IPC_CREAT | 0660);
         if (iCmdSem < 0)
@@ -249,7 +249,7 @@
         {
             if (!termSemaphore->TimedWait(1000))
             {
-#ifdef HAVE_SEMCTL
+#if defined(HAVE_SEMCTL) && !defined(__APPLE__)
                 if (pCmdLine && strlen(pCmdLine) > 0 && !allow_mult)
                 {
                     int iItems = context->plm->CountItems();
@@ -286,7 +286,7 @@
         }
     }
 
-#ifdef HAVE_SEMCTL
+#if defined(HAVE_SEMCTL) && !defined(__APPLE__)
     if (!allow_mult && iCmdSem > 0) {
         if (pCmdLine)
             shmdt(pCmdLine);
diff -ruN freeamp.orig/base/unix/src/win32impl.cpp freeamp/base/unix/src/win32impl.cpp
--- freeamp.orig/base/unix/src/win32impl.cpp	Thu Sep 28 02:08:00 2000
+++ freeamp/base/unix/src/win32impl.cpp	Tue May 14 21:58:14 2002
@@ -1,4 +1,5 @@
 #include <dlfcn.h>
+#include <sys/types.h>
 #include <dirent.h>
 #include <string.h>
 #include <iostream.h>
diff -ruN freeamp.orig/configure freeamp/configure
--- freeamp.orig/configure	Mon Dec 10 16:52:47 2001
+++ freeamp/configure	Thu May 16 13:28:17 2002
@@ -839,7 +839,7 @@
   fi
 fi
 
-for ac_prog in $CCC c++ g++ gcc CC cxx cc++ cl
+for ac_prog in $CCC cc c++ g++ gcc CC cxx cc++ cl
 do
 # Extract the first word of "$ac_prog", so it can be a program name with args.
 set dummy $ac_prog; ac_word=$2
@@ -3091,6 +3091,12 @@
     CFLAGS="$CFLAGS -D_THREAD_SAFE -pthread -I/usr/local/include"
     LDFLAGS="$LDFLAGS -Wl,-export-dynamic -L/usr/local/lib"
     ;;
+  darwin*)
+    host_os="darwin"
+    CFLAGS="$CFLAGS -I/usr/include"
+    LDFLAGS="$LDFLAGS -L/usr/lib"
+    UNIX_AUDIO_API="darwin"
+    ;;
   netbsd*)
     host_os="freebsd"
     CFLAGS="$CFLAGS -I/usr/pkg/include -D_THREAD_SAFE -pthread"
@@ -4027,10 +4033,9 @@
 fi
 
 
-
 if test "$host_os" = "beos"; then
   echo "$ac_t""This is BeOS; using BeOS threads." 1>&6
-elif test "$host_os" = "freebsd"; then
+elif test "$host_os" = "freebsd" || test "$host_os" = "darwin"; then
   ac_safe=`echo "pthread.h" | sed 'y%./+-%__p_%'`
 echo $ac_n "checking for pthread.h""... $ac_c" 1>&6
 echo "configure:4037: checking for pthread.h" >&5
diff -ruN freeamp.orig/io/signature/src/signaturepmo.cpp freeamp/io/signature/src/signaturepmo.cpp
--- freeamp.orig/io/signature/src/signaturepmo.cpp	Thu Oct 26 16:51:32 2000
+++ freeamp/io/signature/src/signaturepmo.cpp	Thu May 16 20:27:09 2002
@@ -27,7 +27,9 @@
 #endif
 #include <stdio.h>
 #include <stdlib.h>
-#include <malloc.h>
+#ifndef __APPLE__
+# include <malloc.h>
+#endif /* malloc() defined in stdlib.h for APPLE */
 
 /* project headers */
 #include "config.h"
diff -ruN freeamp.orig/io/soundcard/unix/darwin/include/soundcardpmo.h freeamp/io/soundcard/unix/darwin/include/soundcardpmo.h
--- freeamp.orig/io/soundcard/unix/darwin/include/soundcardpmo.h	Wed Dec 31 17:00:00 1969
+++ freeamp/io/soundcard/unix/darwin/include/soundcardpmo.h	Thu May 16 19:50:47 2002
@@ -0,0 +1,85 @@
+/*____________________________________________________________________________
+        
+        FreeAmp - The Free MP3 Player
+        Portions copyright (C) 1998-1999 EMusic.com
+
+        This program is free software; you can redistribute it and/or modify
+        it under the terms of the GNU General Public License as published by
+        the Free Software Foundation; either version 2 of the License, or
+        (at your option) any later version.
+
+        This program is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+        GNU General Public License for more details.
+
+        You should have received a copy of the GNU General Public License
+        along with this program; if not, write to the Free Software
+        Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+        
+        freeamp-2.1.1-1.patch,v 1.3 2002/05/22 14:29:33 thesin Exp
+____________________________________________________________________________*/
+
+#ifndef INCLUDED_SOUNDCARDPMO_H_
+#define INCLUDED_SOUNDCARDPMO_H_
+
+/* system headers */
+#include <stdlib.h>
+#include <esd.h>
+
+/* project headers */
+#include "config.h"
+#include "thread.h"
+#include "mutex.h"
+#include "pmo.h"
+#include "pmoevent.h"
+#include "eventbuffer.h"
+
+static const uint32 OBUFFERSIZE = 2 * 1152;
+enum
+{
+   pmoError_MinimumError = 4000,
+   pmoError_DeviceOpenFailed,
+   pmoError_IOCTL_F_GETFL,
+   pmoError_IOCTL_F_SETFL,
+   pmoError_IOCTL_SNDCTL_DSP_RESET,
+   pmoError_IOCTL_SNDCTL_DSP_SAMPLESIZE,
+   pmoError_IOCTL_SNDCTL_DSP_STEREO,
+   pmoError_IOCTL_SNDCTL_DSP_SPEED,
+   pmoError_MaximumError
+};
+
+class FAContext;
+
+class SoundCardPMO:public PhysicalMediaOutput
+{
+ public:
+
+            SoundCardPMO(FAContext *context);
+   virtual ~SoundCardPMO();
+
+   virtual Error Init(OutputInfo * info);
+
+   static void   StartWorkerThread(void *);
+          void   GetVolume(int32 &left, int32 &right);
+          void   SetVolume(int32 left, int32 right);
+
+ private:
+   void          WorkerThread(void); 
+   virtual Error Reset(bool user_stop);
+   void          HandleTimeInfoEvent(PMOTimeInfoEvent *pEvent);
+   bool          WaitForDrain(void);
+
+   bool         m_properlyInitialized;
+   uint32       channels;
+   int          outaudioport;
+   int          audio_fd;
+   OutputInfo  *myInfo;
+   Thread      *m_pBufferThread;
+   int          m_iOutputBufferSize, m_iBytesPerSample, m_iTotalFragments;
+   long long    m_iTotalBytesWritten;
+   int          m_iLastFrame;
+   unsigned     m_iDataSize;
+};
+
+#endif /* _SOUNDCARDPMO_H_ */
diff -ruN freeamp.orig/io/soundcard/unix/darwin/src/soundcardpmo.cpp freeamp/io/soundcard/unix/darwin/src/soundcardpmo.cpp
--- freeamp.orig/io/soundcard/unix/darwin/src/soundcardpmo.cpp	Wed Dec 31 17:00:00 1969
+++ freeamp/io/soundcard/unix/darwin/src/soundcardpmo.cpp	Thu May 16 19:51:17 2002
@@ -0,0 +1,367 @@
+/*____________________________________________________________________________
+        
+        FreeAmp - The Free MP3 Player
+
+        Portions Copyright (C) 1998-1999 EMusic.com
+
+        This program is free software; you can redistribute it and/or modify
+        it under the terms of the GNU General Public License as published by
+        the Free Software Foundation; either version 2 of the License, or
+        (at your option) any later version.
+
+        This program is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+        GNU General Public License for more details.
+
+        You should have received a copy of the GNU General Public License
+        along with this program; if not, write to the Free Software
+        Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+        
+        freeamp-2.1.1-1.patch,v 1.3 2002/05/22 14:29:33 thesin Exp
+____________________________________________________________________________*/
+
+/* system headers */
+#include <stdlib.h>
+#include <iostream.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <time.h>
+#include <assert.h>
+
+/* project headers */
+#include <config.h>
+#include "soundcardpmo.h"
+#include "lmc.h"
+#include "eventdata.h"
+#include "facontext.h"
+#include "log.h"
+
+#define DB printf("%s:%d\n", __FILE__, __LINE__);
+
+extern    "C"
+{
+   PhysicalMediaOutput *Initialize(FAContext *context)
+   {
+      return new SoundCardPMO(context);
+   }
+}
+
+SoundCardPMO::SoundCardPMO(FAContext *context) :
+       PhysicalMediaOutput(context)
+{
+   m_properlyInitialized = false;
+
+   myInfo = new OutputInfo();
+   memset(myInfo, 0, sizeof(OutputInfo));
+
+   m_pBufferThread = NULL;
+
+   m_iOutputBufferSize = 0;
+   m_iTotalBytesWritten = 0;
+   m_iBytesPerSample = 0;
+   m_iLastFrame = -1;
+   m_iDataSize = 0;
+   outaudioport = esd_open_sound(NULL);
+   audio_fd = -1;
+
+   if (!m_pBufferThread)
+   {
+      m_pBufferThread = Thread::CreateThread();
+      assert(m_pBufferThread);
+      m_pBufferThread->Create(SoundCardPMO::StartWorkerThread, this);
+   }
+}
+
+SoundCardPMO::~SoundCardPMO()
+{
+
+   m_bExit = true;
+   m_pSleepSem->Signal();
+   m_pPauseSem->Signal();
+
+   if (m_pBufferThread)
+   {
+      m_pBufferThread->Join();
+      delete m_pBufferThread;
+   }
+
+   Reset(true);
+   if (outaudioport != esd_open_sound(NULL)) {
+       esd_close(outaudioport);
+       outaudioport = esd_open_sound(NULL);
+   }
+
+   if (myInfo)
+   {
+      delete    myInfo;
+
+      myInfo = NULL;
+   }
+}
+
+void SoundCardPMO::SetVolume(int32 left, int32 right)
+{ /*
+    int   mixFd = open("/dev/mixer",O_RDWR);
+    int32 v;
+    if (mixFd != -1)
+    {
+        v = (right << 8) | left;
+        ioctl(mixFd, SOUND_MIXER_WRITE_PCM, &v);
+        close(mixFd);
+    } */
+}
+
+void SoundCardPMO::GetVolume(int32 &left, int32 &right)
+{ /*
+    int mixFd = open("/dev/mixer",O_RDWR);
+    int volume = 0;
+    if (mixFd != -1)
+    {
+         ioctl(mixFd, SOUND_MIXER_READ_PCM, &volume);
+         close(mixFd);
+    }
+    right = (volume >> 8) & 0xFF;
+    left = volume & 0xFF; */
+} 
+
+Error SoundCardPMO::Init(OutputInfo * info)
+{
+   outaudioport = esd_open_sound(NULL);
+   if (outaudioport < 0) {
+     ReportError("Couldn't open port.");
+     return (Error) pmoError_IOCTL_SNDCTL_DSP_STEREO;
+   } else {
+     esd_close(outaudioport);
+   }
+
+   return kError_NoErr;
+}
+
+// PORTING: This function returns when the sound card is done playing, or
+// when exit or pause is signaled. Returns true if the card naturally ran
+// out of things to play. False if m_bExit or m_bPause became true
+bool SoundCardPMO::WaitForDrain(void)
+{
+   for(; !m_bExit && !m_bPause; )
+   {
+      if (audio_fd >= 0) {
+          fd_set write_fds;
+          FD_ZERO(&write_fds);
+          FD_SET(audio_fd, &write_fds);
+
+          return true;
+      }
+   }
+   return false;
+}
+
+// PORTING: This is the bitchy function. In essence, this function is
+// trying to figure out what samples are currently playing. Under linux
+// you don't always know how many bytes have been played so far, so
+// this function makes a best guess by keeping track of the
+// total number of bytes fed to the card (m_iTotalBytesWritten).
+// It uses that number minus the amount of data in the buffer to
+// guess at which sample is currently playing. That info is converted
+// into time and then set to the UI. Have fun!
+void SoundCardPMO::HandleTimeInfoEvent(PMOTimeInfoEvent *pEvent)
+{
+   MediaTimeInfoEvent *pmtpi;
+   int32               hours, minutes, seconds;
+   int                 iTotalTime = 0, iDataInBuffer;
+
+   if (pEvent->GetFrameNumber() != m_iLastFrame + 1)
+   {
+       m_iTotalBytesWritten = myInfo->samples_per_frame * 
+                              pEvent->GetFrameNumber() * 
+                              m_iBytesPerSample; 
+   }
+   m_iLastFrame = pEvent->GetFrameNumber();
+
+   if (myInfo->samples_per_second <= 0 || pEvent->GetFrameNumber() < 2)
+      return;
+
+   iDataInBuffer = 0;
+   iTotalTime = (m_iTotalBytesWritten - iDataInBuffer) /
+                (m_iBytesPerSample * myInfo->samples_per_second);
+
+
+   iTotalTime %= 86400;
+
+   hours = iTotalTime / 3600;
+   minutes = (iTotalTime / 60) % 60;
+   seconds = iTotalTime % 60;
+
+   if (hours < 0 ||
+       minutes < 0 || minutes > 59 || 
+       seconds < 0 || seconds > 59)
+      return;
+
+   pmtpi = new MediaTimeInfoEvent(hours, minutes, seconds, 0, 
+                                  iTotalTime, 0);
+   m_pTarget->AcceptEvent(pmtpi);
+}
+
+void SoundCardPMO::StartWorkerThread(void *pVoidBuffer)
+{
+   ((SoundCardPMO*)pVoidBuffer)->WorkerThread();
+}
+
+void SoundCardPMO::WorkerThread(void)
+{
+   void       *pBuffer;
+   Error       eErr;
+   size_t      iRet;
+   Event      *pEvent;
+   bool        bPerfWarn = false;
+
+   esd_format_t format = ESD_STREAM | ESD_PLAY | ESD_BITS16 | ESD_STEREO;
+   int rate = 22050;
+
+   // Don't do anything until resume is called.
+   m_pPauseSem->Wait();
+
+   //CheckForBufferUp();
+
+   // Wait a specified prebuffer time...
+   PreBuffer();
+
+   for(; !m_bExit;)
+   {
+      if (m_bPause)
+      {
+          m_pPauseSem->Wait();
+          continue;
+      }
+
+      // Loop until we get an Init event from the LMC
+      if (!m_properlyInitialized)
+      {
+          pEvent = ((EventBuffer *)m_pInputBuffer)->GetEvent();
+
+          if (pEvent == NULL)
+          {
+              m_pLmc->Wake();
+              WasteTime();
+
+              continue;
+          }
+
+          if (pEvent->Type() == PMO_Init)
+          {
+              if (IsError(Init(((PMOInitEvent *)pEvent)->GetInfo())))
+              {
+                  delete pEvent;
+                  break;
+              }
+          }
+          delete pEvent;
+          continue;
+      }
+
+      // Set up reading a block from the buffer. If not enough bytes are
+      // available, sleep for a little while and try again.
+      for(;;)
+      {
+          eErr = ((EventBuffer *)m_pInputBuffer)->BeginRead(pBuffer, 
+                                                             m_iDataSize);
+          if (eErr == kError_EndOfStream || eErr == kError_Interrupt)
+             break;
+
+          if (eErr == kError_NoDataAvail)
+          {
+              m_pLmc->Wake();
+              CheckForBufferUp();
+
+              if (!bPerfWarn)
+              {
+                  time_t t;
+    
+                  time(&t);
+                  m_pContext->log->Log(LogPerf, "Output buffer underflow: %s", 
+                             ctime(&t));
+                  bPerfWarn = true;
+              }
+    
+              WasteTime();
+              continue;
+          }
+
+          // Is there an event pending that we need to take care of
+          // before we play this block of samples?
+          if (eErr == kError_EventPending)
+          {
+              pEvent = ((EventBuffer *)m_pInputBuffer)->PeekEvent();
+              if (pEvent == NULL)
+                  continue;
+
+              if (pEvent->Type() == PMO_Quit &&
+                  ((EventBuffer *)m_pInputBuffer)->GetNumBytesInBuffer() > 0)
+              {
+                  if (WaitForDrain())
+                  {
+                     m_pTarget->AcceptEvent(new Event(INFO_DoneOutputting));
+                     return;
+                  }
+                  continue;
+              }  
+
+              pEvent = ((EventBuffer *)m_pInputBuffer)->GetEvent();
+
+              if (pEvent->Type() == PMO_Init)
+                  Init(((PMOInitEvent *)pEvent)->GetInfo());
+    
+              if (pEvent->Type() == PMO_Reset)
+                  Reset(false);
+    
+              if (pEvent->Type() == PMO_Info) 
+                  HandleTimeInfoEvent((PMOTimeInfoEvent *)pEvent);
+
+              if (pEvent->Type() == PMO_Quit) 
+              {
+                  delete pEvent;
+                  m_pTarget->AcceptEvent(new Event(INFO_DoneOutputting));
+                  return;
+              }
+ 
+              delete pEvent;
+    
+              continue;
+          }
+          
+          if (IsError(eErr))
+          {
+              ReportError("Internal error occured.");
+              m_pContext->log->Error("Cannot read from buffer in PMO "
+                                    "worker tread: %d\n", eErr);
+              break;
+          }
+          bPerfWarn = false;
+          break;
+      }
+
+      if (m_bExit || m_bPause)
+      {
+          m_pInputBuffer->EndRead(0);
+          continue;
+      }
+
+      iRet = esd_play_stream(format, rate, NULL, "FreeAMP");
+      if ((int)iRet < 0)
+      {
+         m_pInputBuffer->EndRead(0);
+         ReportError("Could not write sound data to the soundcard.");
+         m_pContext->log->Error("Failed to write to the soundcard: %s\n", 
+                               strerror(errno));
+         break;
+      }
+
+      m_iTotalBytesWritten += iRet;
+      m_pInputBuffer->EndRead(iRet);
+      m_pLmc->Wake();
+      UpdateBufferStatus();
+   }
+}
+
diff -ruN freeamp.orig/io/wavout/src/wavoutpmo.cpp freeamp/io/wavout/src/wavoutpmo.cpp
--- freeamp.orig/io/wavout/src/wavoutpmo.cpp	Mon Oct 15 23:23:08 2001
+++ freeamp/io/wavout/src/wavoutpmo.cpp	Thu May 16 20:07:09 2002
@@ -28,7 +28,9 @@
 #endif
 #include <stdio.h>
 #include <stdlib.h>
-#include <malloc.h>
+#ifndef __APPLE__
+# include <malloc.h>
+#endif /* malloc() in stdlib.h for APPLE */
 
 /* project headers */
 #include "config.h"
diff -ruN freeamp.orig/lib/http/src/Http.cpp freeamp/lib/http/src/Http.cpp
--- freeamp.orig/lib/http/src/Http.cpp	Sat Oct 27 17:20:21 2001
+++ freeamp/lib/http/src/Http.cpp	Tue May 14 20:49:29 2002
@@ -42,11 +42,11 @@
 #include <unistd.h>
 #endif
 
-#if defined(unix) || defined(__BEOS__) || defined(_BSD_SOURCE)
+#if defined(unix) || defined(__BEOS__) || defined(_BSD_SOURCE) || defined(__APPLE__)
 #define SOCKET int
 #endif
 
-#if defined(unix) || defined(_BSD_SOURCE)
+#if defined(unix) || defined(_BSD_SOURCE) || defined(__APPLE__)
 #include <arpa/inet.h>
 #define closesocket(x) close(x)
 #ifndef O_BINARY
