diff -uNr mono-1.1.9/configure mono-1.1.9-new/configure
--- mono-1.1.9/configure	2005-09-08 19:32:51.000000000 -0400
+++ mono-1.1.9-new/configure	2005-09-13 13:15:33.000000000 -0400
@@ -34801,7 +34801,7 @@
 	INTL="libintl.dylib"
 	SQLITE="libsqlite.0.dylib"
 	SQLITE3="libsqlite3.0.dylib"
-	X11="libX11.dylib"
+	X11="libX11.6.dylib"
 	;;
      *-*-*netbsd*)
 	LIBC="libc.so.12"
diff -uNr mono-1.1.9/data/config.in mono-1.1.9-new/data/config.in
--- mono-1.1.9/data/config.in	2005-09-02 06:27:31.000000000 -0400
+++ mono-1.1.9-new/data/config.in	2005-09-13 13:14:51.000000000 -0400
@@ -2,15 +2,19 @@
 	<dllmap dll="cygwin1.dll" target="@LIBC@" />
 	<dllmap dll="libc" target="@LIBC@" />
 	<dllmap dll="libintl" target="@INTL@" />
-	<dllmap dll="libxslt.dll" target="libxslt@libsuffix@" />
+	<dllmap dll="libxslt.dll" target="libxslt.1@libsuffix@" />
 	<dllmap dll="libmySQL.dll" target="libmysqlclient@libsuffix@" />
-	<dllmap dll="odbc32.dll" target="libodbc@libsuffix@" />
+	<dllmap dll="odbc32.dll" target="libodbc.1@libsuffix@" />
 	<dllmap dll="oci" target="clntsh" />
 	<dllmap dll="db2cli" target="libdb2_36@libsuffix@"/>
 	<dllmap dll="msvcrt" target="@LIBC@"/>
 	<dllmap dll="MonoPosixHelper" target="libMonoPosixHelper@libsuffix@"/>
+	<dllmap dll="libgtk-win32-2.0-0.dll" target="libgtk-x11-2.0.0@libsuffix@"/>
+	<dllmap dll="glib-2.0" target="libglib-2.0.0@libsuffix@"/>
+	<dllmap dll="gnomevfs-2" target="libgnomevfs-2.0@libsuffix@"/>
+	<dllmap dll="gtksourceview-1.0" target="libgtksourceview-1.0.0@libsuffix@"/>
 	<dllmap dll="sqlite" target="@SQLITE@"/>
 	<dllmap dll="sqlite3" target="@SQLITE3@"/>
 	<dllmap dll="libX11" target="@X11@"/>
-	<dllmap dll="libcairo-2.dll" target="libcairo.so.2"/>
+	<dllmap dll="libcairo-2.dll" target="libcairo.2@libsuffix@"/>
 </configuration>
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web/ChangeLog	2005-09-08 17:37:43.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web/ChangeLog	2005-09-13 14:06:09.000000000 -0400
@@ -1,3 +1,7 @@
+2005-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* HttpRequest.cs: fix the indexer.
+
 2005-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* HttpPostedFile.cs: fixes in Seek and Position.
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web/HttpRequest.cs mono-1.1.9-new/mcs/class/System.Web/System.Web/HttpRequest.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web/HttpRequest.cs	2005-09-08 17:15:38.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web/HttpRequest.cs	2005-09-13 14:06:09.000000000 -0400
@@ -661,7 +661,20 @@
 
 		public string this [string key] {
 			get {
-				return Params [key];
+				// "The QueryString, Form, Cookies, or ServerVariables collection member
+				// specified in the key parameter."
+				string val = QueryString [key];
+				if (val == null)
+					val = Form [key];
+				if (val == null) {
+					HttpCookie cookie = Cookies [key];
+					if (cookie != null)
+						val = cookie.Value;
+				}
+				if (val == null)
+					val = ServerVariables [key];
+
+				return val;
 			}
 		}
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.Compilation/BaseCompiler.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.Compilation/BaseCompiler.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.Compilation/BaseCompiler.cs	2005-08-27 17:03:38.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.Compilation/BaseCompiler.cs	2005-09-13 14:06:10.000000000 -0400
@@ -42,7 +42,6 @@
 {
 	abstract class BaseCompiler
 	{
-		string dynamic_dir;
 		TemplateParser parser;
 		CodeDomProvider provider;
 		ICodeCompiler compiler;
@@ -288,30 +287,7 @@
 
 		protected string DynamicDir ()
 		{
-			if (dynamic_dir != null)
-				return dynamic_dir;
-
-			dynamic_dir = AppDomain.CurrentDomain.SetupInformation.DynamicBase;
-			if (dynamic_dir != null && dynamic_dir != "")
-				return dynamic_dir;
-			
-			for (int i = 0; ; i++){
-				string d = Path.Combine (
-					Path.GetTempPath (),
-					String.Format ("{0}-temp-aspnet-{1:x}", Environment.UserName, i));
-			
-				try {
-					Directory.CreateDirectory (d);
-					string stamp = Path.Combine (d, "stamp");
-					Directory.CreateDirectory (stamp);
-					dynamic_dir = d;
-					Directory.Delete (stamp);
-					break;
-				} catch (UnauthorizedAccessException){
-					continue;
-				}
-			}
-			return dynamic_dir;
+			return AppDomain.CurrentDomain.SetupInformation.DynamicBase;
 		}
 		
 		public virtual Type GetCompiledType () 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.Compilation/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web.Compilation/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web.Compilation/ChangeLog	2005-08-26 18:58:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.Compilation/ChangeLog	2005-09-13 14:06:10.000000000 -0400
@@ -1,3 +1,8 @@
+2005-09-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* BaseCompiler.cs: set the domain's DynamicBase property instead of
+	guessing it in BaseCompiler.
+
 2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* WebServiceCompiler.cs: apply the same fix as in r45440 that fixed bug
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.Hosting/ApplicationHost.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.Hosting/ApplicationHost.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.Hosting/ApplicationHost.cs	2005-08-27 17:03:38.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.Hosting/ApplicationHost.cs	2005-09-13 14:06:09.000000000 -0400
@@ -96,6 +96,7 @@
 			setup.ApplicationBase = physicalDir;
 
 			setup.CachePath = null;
+			setup.ApplicationName = domain_id;
 			setup.ConfigurationFile = FindWebConfig (physicalDir);
 			setup.DisallowCodeDownload = true;
 			setup.PrivateBinPath = "bin";
@@ -104,6 +105,26 @@
 			UriBuilder b = new UriBuilder ("file://", null, 0, Path.Combine (physicalDir, "bin"));
 			setup.ShadowCopyDirectories = b.Uri.ToString ();
 
+			string dynamic_dir = null;
+			string user = Environment.UserName;
+			for (int i = 0; ; i++){
+				string d = Path.Combine (Path.GetTempPath (),
+					String.Format ("{0}-temp-aspnet-{1:x}", user, i));
+			
+				try {
+					Directory.CreateDirectory (d);
+					string stamp = Path.Combine (d, "stamp");
+					Directory.CreateDirectory (stamp);
+					dynamic_dir = d;
+					Directory.Delete (stamp);
+					break;
+				} catch (UnauthorizedAccessException){
+					continue;
+				}
+			}
+			setup.DynamicBase = dynamic_dir;
+			Directory.CreateDirectory (setup.DynamicBase);
+
 			//
 			// Create app domain
 			//
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.Hosting/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web.Hosting/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web.Hosting/ChangeLog	2005-09-08 08:58:45.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.Hosting/ChangeLog	2005-09-13 14:06:09.000000000 -0400
@@ -1,3 +1,8 @@
+2005-09-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* ApplicationHost.cs: set the domain's DynamicBase property instead of
+	guessing it in BaseCompiler.
+
 2005-09-08  Eyal Alalouf  <eyala@mainsoft.com>
 	* ServletWorkerRequest.jvm.cs: Implement SendResponseFromFile
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web.UI/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI/ChangeLog	2005-09-07 01:58:31.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI/ChangeLog	2005-09-13 14:06:09.000000000 -0400
@@ -1,3 +1,7 @@
+2005-09-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* TemplateParser.cs: default VS 2005 pages are compiled fine now.
+
 2005-09-07  Chris Toshok  <toshok@ximian.com>
 
 	* MinimizableAttributeTypeConverter.cs: new class, whose existence
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI/TemplateParser.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI/TemplateParser.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI/TemplateParser.cs	2005-08-27 17:03:38.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI/TemplateParser.cs	2005-09-13 14:06:09.000000000 -0400
@@ -409,29 +409,35 @@
 		internal virtual void ProcessMainAttributes (Hashtable atts)
 		{
 			atts.Remove ("Description"); // ignored
+#if NET_1_1
 			atts.Remove ("CodeBehind");  // ignored
-			atts.Remove ("AspCompat"); // ignored
-
-#if NET_2_0
-			atts.Remove ("CodeFile"); // ignored
 #endif
+			atts.Remove ("AspCompat"); // ignored
 
 			debug = GetBool (atts, "Debug", true);
 			compilerOptions = GetString (atts, "CompilerOptions", "");
 			language = GetString (atts, "Language", CompilationConfig.DefaultLanguage);
 			strictOn = GetBool (atts, "Strict", CompilationConfig.Strict);
 			explicitOn = GetBool (atts, "Explicit", CompilationConfig.Explicit);
+#if NET_2_0
+			string src = GetString (atts, "CodeFile", null);
+#else
 			string src = GetString (atts, "Src", null);
+#endif
 			if (src != null)
 				srcAssembly = GetAssemblyFromSource (src);
 
 			string inherits = GetString (atts, "Inherits", null);
+#if NET_2_0
+			className = inherits;
+#else
 			if (inherits != null)
 				SetBaseType (inherits);
 
 			className = GetString (atts, "ClassName", null);
 			if (className != null && !CodeGenerator.IsValidLanguageIndependentIdentifier (className))
 				ThrowParseException (String.Format ("'{0}' is not valid for 'className'", className));
+#endif
 
 			if (atts.Count > 0)
 				ThrowParseException ("Unknown attribute: " + GetOneKey (atts));
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.HtmlControls/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.HtmlControls/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.HtmlControls/ChangeLog	2005-09-07 18:01:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.HtmlControls/ChangeLog	2005-09-13 14:06:09.000000000 -0400
@@ -1,3 +1,12 @@
+2005-09-09  Chris Toshok  <toshok@ximian.com>
+
+	* HtmlInputButton.cs (CausesValidation): this is stored in
+	Attributes, not ViewState.
+	(ValidationGroup): same.
+	(RenderAttributes): remove CausesValidation from the list of
+	Attributes before calling base.RenderAttributes.  Don't, however,
+	remove ValidationGroup, to replicate an MS bug.
+
 2005-09-07  Chris Toshok  <toshok@ximian.com>
 
 	* HtmlForm.cs (DefaultFocus): not stored in Attributes either.
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.HtmlControls/HtmlInputButton.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.HtmlControls/HtmlInputButton.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.HtmlControls/HtmlInputButton.cs	2005-09-04 11:42:27.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.HtmlControls/HtmlInputButton.cs	2005-09-13 14:06:09.000000000 -0400
@@ -58,10 +58,15 @@
 #endif		
 		bool CausesValidation {
 			get {
-				return ViewState.GetBool ("CausesValidation", true);
+				string flag = Attributes["CausesValidation"];
+
+				if (flag == null)
+					return true;
+
+				return Boolean.Parse (flag);
 			}
 			set {
-				ViewState ["CausesValidation"] = value;
+				Attributes ["CausesValidation"] = value.ToString();
 			}
 		}
 
@@ -70,10 +75,18 @@
 		public string ValidationGroup
 		{
 			get {
-				return ViewState.GetString ("ValidationGroup", "");
+				string group = Attributes["ValidationGroup"];
+
+				if (group == null)
+					return "";
+
+				return group;
 			}
 			set {
-				ViewState ["ValidationGroup"] = value;
+				if (value == null)
+					Attributes.Remove ("ValidationGroup");
+				else
+					Attributes["ValidationGroup"] = value;
 			}
 		}
 #endif
@@ -132,6 +145,14 @@
 				writer.WriteAttribute ("language", "javascript");
 			}
 
+			Attributes.Remove ("CausesValidation");
+#if NET_2_0
+			// LAMESPEC: MS doesn't actually remove this
+			//attribute.  it shows up in the rendered
+			//output.
+
+			// Attributes.Remove("ValidationGroup");
+#endif
 			base.RenderAttributes (writer);
 		}
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ChangeLog mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ChangeLog
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ChangeLog	2005-09-08 11:19:02.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ChangeLog	2005-09-13 14:06:10.000000000 -0400
@@ -1,3 +1,28 @@
+2005-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* ImageButton.cs: fix invalid cast exception.
+
+2005-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
+	* ListItem.cs: throw in AddParsedSubObject if the object is not a
+	LiteralControl.
+	* RadioButtonList.cs: implemented LoadPostData and
+	RaisePostDataChangedEvent.
+
+2005-09-09  Chris Toshok  <toshok@ximian.com>
+
+	* CheckBox.cs, CheckBoxList.cs, DropDownList.cs, ImageButton.cs,
+	ListBox.cs, RadioButton.cs, RadioButtonList.cs, TextBox.cs: fix up
+	LoadPostData/RaisePostDataChangedEvent.
+
+2005-09-09  Chris Toshok  <toshok@ximian.com>
+
+	* FontInfo.cs (IsEmpty): new internal property, used by
+	Style.IsEmpty.
+
+	* Style.cs (IsEmpty): make sure the fontinfo is null or empty as
+	well.
+
 2005-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* ListItemCollection.cs: remove obsoleted methods.
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/CheckBox.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/CheckBox.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/CheckBox.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/CheckBox.cs	2005-09-13 14:06:09.000000000 -0400
@@ -431,30 +431,27 @@
 			return (false);
 		}
 
-		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
-		{
-			return LoadPostData (postDataKey, postCollection);
-		}
-		
 #if NET_2_0
-		protected virtual void RaisePostDataChangedEvent ()
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
+#if NET_2_0
 			if (CausesValidation)
 				Page.Validate (ValidationGroup);
-		
+#endif
 			OnCheckedChanged (EventArgs.Empty);
 		}
-		
-		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+
+		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			RaisePostDataChangedEvent ();
+			return LoadPostData (postDataKey, postCollection);
 		}
-#else
+		
 		void IPostBackDataHandler.RaisePostDataChangedEvent ()
 		{
-			OnCheckedChanged (EventArgs.Empty);
+			RaisePostDataChangedEvent ();
 		}
-#endif
 
 		internal virtual void InternalAddAttributesToRender (HtmlTextWriter w)
 		{
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/CheckBoxList.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/CheckBoxList.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/CheckBoxList.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/CheckBoxList.cs	2005-09-13 14:06:09.000000000 -0400
@@ -253,22 +253,13 @@
 		{
 			throw new NotImplementedException ();
 		}
+#endif
 
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection postCollection)
-		{
-			throw new NotImplementedException ();
-		}
 
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
-		{
-			throw new NotImplementedException ();
-		}
-#endif		
-
-		bool IPostBackDataHandler.LoadPostData (string postDataKey,
-				NameValueCollection postCollection)
+#if NET_2_0
+		protected virtual
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
 			int checkbox = -1;
 
@@ -295,11 +286,25 @@
 			return false;
 		}
 
-		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
 			OnSelectedIndexChanged (EventArgs.Empty);
 		}
 
+		bool IPostBackDataHandler.LoadPostData (string postDataKey,
+							NameValueCollection postCollection)
+		{
+			return LoadPostData (postDataKey, postCollection);
+		}
+
+		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+		{
+			RaisePostDataChangedEvent ();
+		}
+
 		bool IRepeatInfoUser.HasFooter {
 			get { return false; }
 		}
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/DropDownList.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/DropDownList.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/DropDownList.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/DropDownList.cs	2005-09-13 14:06:10.000000000 -0400
@@ -180,20 +180,10 @@
 
 		#region	Interface Methods
 #if NET_2_0
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection postCollection)
+		protected virtual
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			throw new NotImplementedException ();
-		}
-
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
-		{
-			throw new NotImplementedException ();
-		}
-#endif		
-		
-		bool IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection) {
 			int	index;
 
 			index = Items.IndexOf(postCollection[postDataKey]);
@@ -205,9 +195,23 @@
 			return false;
 		}
 
-		void IPostBackDataHandler.RaisePostDataChangedEvent() {
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
+		{
 			OnSelectedIndexChanged(EventArgs.Empty);
 		}
+		
+		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
+		{
+			return LoadPostData (postDataKey, postCollection);
+		}
+
+		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+		{
+			RaisePostDataChangedEvent ();
+		}
 		#endregion	// Interface Methods
 	}
 }
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/FontInfo.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/FontInfo.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/FontInfo.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/FontInfo.cs	2005-09-13 14:06:09.000000000 -0400
@@ -431,5 +431,12 @@
 			}
 		}
 		#endregion	// Private Methods
+
+
+		internal bool IsEmpty {
+			get {
+				return fontstyles == FontStyles.None;
+			}
+		}
 	}
 }
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ImageButton.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ImageButton.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ImageButton.cs	2005-09-01 19:19:42.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ImageButton.cs	2005-09-13 14:06:10.000000000 -0400
@@ -236,26 +236,9 @@
 
 
 #if NET_2_0
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection psotCollection) 
-		{
-			throw new NotImplementedException ();
-		}
-
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
-		{
-			throw new NotImplementedException ();
-		}
-		
-		[MonoTODO]
-		protected virtual void RaisePostBackEvent (string eventArgument)
-		{
-			throw new NotImplementedException ();
-		}
+		protected virtual
 #endif
-
-		bool IPostBackDataHandler.LoadPostData (string postDataKey,  NameValueCollection postCollection)
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection) 
 		{
 			string x, y;
 
@@ -270,14 +253,10 @@
 
 			return true;
 		}
-
-
-		void IPostBackDataHandler.RaisePostDataChangedEvent ()
-		{
-
-		}
-
-		void IPostBackEventHandler.RaisePostBackEvent (string eventArgument)
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
 			if (CausesValidation)
 #if NET_2_0
@@ -289,11 +268,35 @@
 			OnClick (new ImageClickEventArgs (pos_x, pos_y));
 			OnCommand (new CommandEventArgs (CommandName, CommandArgument));
 		}
+		
+		[MonoTODO]
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostBackEvent (string eventArgument)
+		{
+		}
+
+		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
+		{
+			return LoadPostData (postDataKey, postCollection);
+		}
+
+
+		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+		{
+			RaisePostDataChangedEvent ();
+		}
+
+		void IPostBackEventHandler.RaisePostBackEvent (string eventArgument)
+		{
+			RaisePostBackEvent (eventArgument);
+		}
 
 		protected virtual void OnClick (ImageClickEventArgs e)
 		{
 			if (Events != null) {
-				EventHandler eh = (EventHandler) (Events [ClickEvent]);
+				ImageClickEventHandler eh = (ImageClickEventHandler) (Events [ClickEvent]);
 				if (eh != null)
 					eh (this, e);
 			}
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ListBox.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ListBox.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ListBox.cs	2005-09-08 11:19:02.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ListBox.cs	2005-09-13 14:06:10.000000000 -0400
@@ -184,21 +184,9 @@
 		}
 
 #if NET_2_0
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection postCollection)
-		{
-			throw new NotImplementedException ();
-		}
-
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
-		{
-			throw new NotImplementedException ();
-		}
-#endif		
-			
-		bool IPostBackDataHandler.LoadPostData (string postDataKey,
-				NameValueCollection postCollection)
+		protected virtual
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
 			string [] items = postCollection.GetValues (postDataKey) as string [];
 			bool res = false;
@@ -219,10 +207,24 @@
 			return res;
 		}
 
-		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
 			OnSelectedIndexChanged (EventArgs.Empty);
 		}
+			
+		bool IPostBackDataHandler.LoadPostData (string postDataKey,
+							NameValueCollection postCollection)
+		{
+			return LoadPostData (postDataKey, postCollection);
+		}
+
+		void IPostBackDataHandler.RaisePostDataChangedEvent ()
+		{
+			RaisePostDataChangedEvent ();
+		}
 	}
 }
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ListItem.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ListItem.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/ListItem.cs	2005-08-27 17:03:38.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/ListItem.cs	2005-09-13 14:06:09.000000000 -0400
@@ -84,8 +84,11 @@
 		void IParserAccessor.AddParsedSubObject (object obj)
 		{
 			LiteralControl lc = obj as LiteralControl;
-			if (lc != null)
-				Text = lc.Text;
+			if (lc == null) {
+				// obj.GetType() will throw a NullRef if obj is null. That's fine according to the test.
+				throw new HttpException ("'ListItem' cannot have children of type " + obj.GetType ());
+			}
+			Text = lc.Text;
 		}
 	
 		void IStateManager.LoadViewState (object state)
@@ -184,7 +187,7 @@
 		
 			set {
 				text = value;
-				text_dirty |= tracking;
+				text_dirty = tracking;
 			}
 		}
 
@@ -201,7 +204,7 @@
 		
 			set {
 				this.value = value;
-				value_dirty |= tracking;
+				value_dirty = tracking;
 			}
 		}
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/RadioButton.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/RadioButton.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/RadioButton.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/RadioButton.cs	2005-09-13 14:06:09.000000000 -0400
@@ -78,20 +78,9 @@
 		}
 
 #if NET_2_0
-		[MonoTODO]
-		protected override bool LoadPostData (string postDataKey, NameValueCollection postCollection) 
-		{
-			throw new NotImplementedException ();
-		}
-
-		[MonoTODO]
-		protected override void RaisePostDataChangedEvent ()
-		{
-			throw new NotImplementedException ();
-		}
-#endif		
-
-		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
+		protected override
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection) 
 		{
 			bool old_checked = Checked;
 			
@@ -107,5 +96,17 @@
 				return (false);
 			}
 		}
+
+#if NET_2_0
+		protected override
+#endif
+		void RaisePostDataChangedEvent ()
+		{
+		}
+
+		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
+		{
+			return LoadPostData (postDataKey, postCollection);
+		}
 	}
 }
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/RadioButtonList.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/RadioButtonList.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/RadioButtonList.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/RadioButtonList.cs	2005-09-13 14:06:09.000000000 -0400
@@ -38,6 +38,7 @@
 	[ValidationProperty ("SelectedItem")]
 	public class RadioButtonList : ListControl, IRepeatInfoUser,
 		INamingContainer, IPostBackDataHandler {
+		bool need_raise;
 
 		public RadioButtonList ()
 		{
@@ -221,60 +222,82 @@
 		{
 			throw new NotImplementedException ();
 		}
+#endif
 
-		[MonoTODO]
-		protected virtual Style GetItemStyle (ListItemType itemType, int repeatIndex)
+#if NET_2_0
+		protected virtual
+#endif
+		Style GetItemStyle (ListItemType itemType, int repeatIndex)
 		{
-			throw new NotImplementedException ();
+			return null;
 		}
 
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection postCollection)
+#if NET_2_0
+		protected virtual
+#endif
+		void RenderItem (ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
 		{
-			throw new NotImplementedException ();
+			RadioButton radio = new RadioButton ();
+			radio.Text = Items [repeatIndex].Text;
+			radio.ID = ClientID + "_"  + repeatIndex;
+			radio.TextAlign = TextAlign;
+			radio.GroupName = UniqueID;
+			radio.Page = Page;
+			radio.Checked = Items [repeatIndex].Selected;
+			radio.Attributes["Value"] = Items [repeatIndex].Value;
+			radio.RenderControl (writer);
 		}
-
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
+#if NET_2_0
+		protected virtual
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			throw new NotImplementedException ();
+			string val = postCollection [postDataKey];
+			ListItemCollection items = Items;
+			int end = items.Count;
+			int selected = SelectedIndex;
+			for (int i = 0; i < end; i++) {
+				ListItem item = items [i];
+				if (item == null || val != item.Value)
+					continue;
+
+				if (i != selected) {
+					SelectedIndex = i;
+					need_raise = true;
+				}
+				return true;
+			}
+
+			return false;
 		}
 
-		[MonoTODO]
-		protected virtual void RenderItem (ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
-			throw new NotImplementedException ();
+			if (need_raise)
+				OnSelectedIndexChanged (EventArgs.Empty);
 		}
-#endif		
 
-		[MonoTODO]
 		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			return true;
+			return LoadPostData (postDataKey, postCollection);
 		}
 		
-		[MonoTODO]
 		void IPostBackDataHandler.RaisePostDataChangedEvent ()
 		{
-
+			RaisePostDataChangedEvent ();
 		}
 
 		Style IRepeatInfoUser.GetItemStyle (ListItemType itemType,  int repeatIndex)
 		{
-			return null;
+			return GetItemStyle (itemType, repeatIndex);
 		}
 
 		void IRepeatInfoUser.RenderItem (ListItemType itemType, int repeatIndex, RepeatInfo repeatInfo, HtmlTextWriter writer)
 		{
-			RadioButton radio = new RadioButton ();
-			radio.Text = Items [repeatIndex].Text;
-			radio.ID = ClientID + "_"  + repeatIndex;
-			radio.TextAlign = TextAlign;
-			radio.GroupName = UniqueID;
-			radio.Page = Page;
-			radio.Checked = Items [repeatIndex].Selected;
-			radio.Attributes["Value"] = Items [repeatIndex].Value;
-			radio.RenderControl (writer);
+			RenderItem (itemType, repeatIndex, repeatInfo, writer);
 		}
 
 #if NET_2_0
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/Style.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/Style.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/Style.cs	2005-09-08 11:13:53.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/Style.cs	2005-09-13 14:06:09.000000000 -0400
@@ -327,7 +327,7 @@
 		{
 			get 
 			{
-				return (styles == 0);
+				return (styles == 0 && (fontinfo == null || fontinfo.IsEmpty));
 			}
 		}
 
diff -uNr mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/TextBox.cs mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/TextBox.cs
--- mono-1.1.9/mcs/class/System.Web/System.Web.UI.WebControls/TextBox.cs	2005-09-01 17:25:48.000000000 -0400
+++ mono-1.1.9-new/mcs/class/System.Web/System.Web.UI.WebControls/TextBox.cs	2005-09-13 14:06:09.000000000 -0400
@@ -128,32 +128,34 @@
 		}
 		
 #if NET_2_0
-		[MonoTODO]
-		protected virtual bool LoadPostData (string postDataKey, NameValueCollection postCollection)
+		protected virtual
+#endif
+		bool LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			throw new NotImplementedException ();
+			if (Text != postCollection [postDataKey]) {
+				Text = postCollection [postDataKey];
+				return true;
+			}
+			
+			return false;
 		}
 
-		[MonoTODO]
-		protected virtual void RaisePostDataChangedEvent ()
+#if NET_2_0
+		protected virtual
+#endif
+		void RaisePostDataChangedEvent ()
 		{
-			throw new NotImplementedException ();
+			OnTextChanged (EventArgs.Empty);
 		}
-#endif
 
-		bool IPostBackDataHandler.LoadPostData (string key, NameValueCollection col)
+		bool IPostBackDataHandler.LoadPostData (string postDataKey, NameValueCollection postCollection)
 		{
-			if (Text != col [key]) {	
-				Text = col [key];
-				return true;
-			}
-			
-			return false;
+			return LoadPostData (postDataKey, postCollection);
 		}
 	
 		void IPostBackDataHandler.RaisePostDataChangedEvent ()
 		{
-			OnTextChanged (EventArgs.Empty);
+			RaisePostDataChangedEvent ();
 		}
 
 #if NET_2_0
diff -uNr mono-1.1.9/mcs/gmcs/driver.cs mono-1.1.9-new/mcs/gmcs/driver.cs
--- mono-1.1.9/mcs/gmcs/driver.cs	2005-09-05 03:57:56.000000000 -0400
+++ mono-1.1.9-new/mcs/gmcs/driver.cs	2005-09-13 11:05:15.000000000 -0400
@@ -202,7 +202,11 @@
 				input.Close ();
 			}
 #else
-			parser.parse ();
+			try {
+				parser.parse ();
+			} finally {
+				input.Close ();
+			}
 #endif
 		}
 		
diff -uNr mono-1.1.9/mono/metadata/Makefile.in mono-1.1.9-new/mono/metadata/Makefile.in
--- mono-1.1.9/mono/metadata/Makefile.in	2005-09-08 19:32:45.000000000 -0400
+++ mono-1.1.9-new/mono/metadata/Makefile.in	2005-09-13 11:03:48.000000000 -0400
@@ -68,7 +68,7 @@
 am_libmonoruntime_static_la_OBJECTS = $(am__objects_1)
 libmonoruntime_static_la_OBJECTS =  \
 	$(am_libmonoruntime_static_la_OBJECTS)
-libmonoruntime_la_LIBADD =
+libmonoruntime_la_LIBADD = $(ICU_LIBS)
 am_libmonoruntime_la_OBJECTS = reflection.lo object.lo icall.lo \
 	decimal.lo boehm-gc.lo null-gc.lo gc.lo marshal.lo monitor.lo \
 	threads.lo threadpool.lo file-io.lo socket-io.lo exception.lo \
diff -uNr mono-1.1.9/mono/metadata/loader.c mono-1.1.9-new/mono/metadata/loader.c
--- mono-1.1.9/mono/metadata/loader.c	2005-08-03 01:09:35.000000000 -0400
+++ mono-1.1.9-new/mono/metadata/loader.c	2005-09-13 11:03:48.000000000 -0400
@@ -780,6 +780,19 @@
 		}
 
 		if (!gmodule) {
+			full_name = g_module_build_path ("@PREFIX@/lib", file_name);
+			mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,
+					"DllImport loading location: '%s'.", full_name);
+			gmodule = g_module_open (full_name, G_MODULE_BIND_LAZY);
+			if (!gmodule) {
+				mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,
+						"DllImport error loading library: '%s'.",
+						g_module_error ());
+			}
+			g_free (full_name);
+		}
+
+		if (!gmodule) {
 			full_name = g_module_build_path (".", file_name);
 			mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,
 					"DllImport loading library: '%s'.", full_name);
