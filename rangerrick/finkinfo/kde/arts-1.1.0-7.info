Package: arts
Version: 1.1.0
Revision: 7
GCC: 3.1
Depends: audiofile-shlibs (>= 0.2.3), dlcompat (>= 20020929), esound-shlibs (>= 0.2.28), glib2-shlibs (>= 2.0.4), libogg-shlibs (>= 1.0.0), libpng3-shlibs (>= 1.2.5), libpoll-shlibs (>= 1.1), libvorbis0-shlibs (>= 1.0), mad-shlibs (>= 0.4.12b), qt3-shlibs (>= 3.1.0), x11
BuildDepends: fink (>= 0.11.0), libpoll (>= 1.1), qt3-dev (>= 3.1.0), autoconf25, libtool14, automake (>= 1.6), glib2 (>= 2.0.4), audiofile (>= 0.2.3), audiofile-bin (>= 0.2.3), dlcompat (>= 20020929), esound (>= 0.2.28), pkgconfig (>= 0.12.0), x11, libpng3 (>= 1.2.5), libogg (>= 1.0.0), libvorbis0 (>= 1.0), mad (>= 0.4.12b)
Replaces: %N-dev (<< %v-%r)
Source: mirror:kde:unstable/kde-3.1-rc3/src/%n-%v.tar.bz2
Source-MD5: 1eee13cf17769e53d919650fce23a235
PatchScript: sed -e 's|@PREFIX@|%p|g' <%a/%f.patch | patch -p0
ConfigureParams: --with-extra-includes=%p/include --with-extra-libs=%p/lib --with-qt-dir=%p --with-qt-includes=%p/include/qt --enable-rpath --with-pic --enable-shared=yes --enable-static=no --mandir=%p/share/man --infodir=%p/share/info --libexecdir=%p/lib --with-xinerama --enable-final --disable-dependency-tracking `cat /tmp/kde-build-options`
CompileScript: <<
#!/bin/sh
  if test `cat %p/src/%n-%v.tar.bz2 | md5` != '1eee13cf17769e53d919650fce23a235'; then
    echo ""
    echo "You've probably got an old arts tarball!  The KDE folks have used the same"
    echo "version number for arts for a couple of different beta releases, even though"
    echo "the code has changed.  I'm going to move it to arts-1.1.0.tar.bz2.old in case"
    echo "you need it later.  Re-run your fink install and it should download the"
    echo "correct tarball and continue."
    echo ""
    mv %p/src/%n-%v.tar.bz2 %p/src/%n-%v.tar.bz2.old
    exit 1
  fi
  make -f Makefile.cvs
  echo running ./configure %c
  sh ./configure %c
  make -j2
<<
InstallScript: <<
  make install DESTDIR=%d
<<
SetLIBS: -L%p/lib
SetCPPFLAGS: -no-cpp-precomp -g -DMACOSX -DARTS_NO_ALARM -Ddlsym=dlsym_auto_underscore -isystem %p/include -I%p/include
SplitOff: <<
  Package: %N-dev
  Depends: %N (>= %v-%r)
  Recommends: qt3 (>= 3.1.0), glib2, audiofile, audiofile-bin, pkgconfig, esound, libpng, libogg, libvorbis0, mad
  BuildDependsOnly: true
  Replaces: %N (<< %v-%r)
  Description: KDE - arts development headers and libraries
  Files: <<
    bin/artsc-config
    bin/mcopidl
    include/
    lib/mcop
    lib/libartsc.dylib
    lib/libartscbackend.so
    lib/libartsdsp.so
    lib/libartsdsp_st.so
    lib/libartsflow.dylib
    lib/libartsflow_idl.dylib
    lib/libartswavplayobject.so
    lib/libgmcop.dylib
    lib/libkmedia2.dylib
    lib/libkmedia2_idl.dylib
    lib/libmcop.dylib
    lib/libmcop_mt.dylib
    lib/libqtmcop.dylib
    lib/libsoundserver_idl.dylib
    lib/libx11globalcomm.so
  <<
<<
DaemonicName: arts
DaemonicFile: <<
  <service>
    <description>Analog Realtime Synthesizer Server</description>
    <message>Analog Realtime Synthesizer Server</message>

    <daemon name="artsd">
      <executable background="yes">%p/bin/artsd</executable>
      <!-- the daemon will background itself, but may take a while
           to start up to the point where it does so -->
      <pidfile>%p/var/run/arts.pid</pidfile>
    </daemon>

  </service>
<<
DocFiles: COPYING COPYING.LIB INSTALL
Description: KDE - analog realtime synthesizer
DescDetail: <<
aRts is a framework for developing modular multimedia applications. The
sound server, artsd, allows multiple applications to cooperatively process
and output sound and music. aRts is designed to provide its filter and
synthesis capabilities to other applications using the multimedia
communication protocol (MCOP). aRts is also capable of modular realtime
synthesis. It can create sounds & music (realtime midi synthesis) using
small modules like oscillators for creating waveforms, various filters,
mixers, faders, etc.
<<
DescPackaging: <<
Patches were generated from the KDE-Darwin tree:
http://www.opendarwin.org/projects/KDE-Darwin/
<<
DescUsage: <<
---[ Installation ]---------------------------------------------------

To install all of the official KDE packages, install "bundle-kde" or
"bundle-kde-ssl" (depending on whether crypotgraphic laws permit
downloading strong cryptography).

---[ Configuration ]--------------------------------------------------

To use KDE as your windowing system in XDarwin, create a file called
".xinitrc" in your home directory, with the following commands (it is
safe to cut and paste these):

  echo "source /sw/bin/init.sh" > ~/.xinitrc
  echo "/sw/bin/startkde >/tmp/kde.log 2>&1" >> ~/.xinitrc

Note that this will overwrite an existing .xinitrc file!

---[ Startup ]--------------------------------------------------------

Once you have created an ~/.xinitrc file, you should be able to start
KDE by clicking on the "XDarwin" icon in your Applications folder.

NOTE: If you plan on running in rootless mode, you will likely want to
disable desktop icons, or else the root window desktop will cover up
your Aqua destkop.  You can do this by starting the KDE control
center, expanding the "Desktop" list, click "Behavior", and uncheck
the "Enable icons on desktop" checkbox.

---[ Removal ]--------------------------------------------------------

To remove all of the official KDE packages, you can remove aRts and
anything that depends on it, by running (in a terminal):

  sudo apt-get remove arts
<<
License: GPL
Maintainer: Benjamin Reed <ranger@befunk.com>
Homepage: http://linux.twc.de/arts/
