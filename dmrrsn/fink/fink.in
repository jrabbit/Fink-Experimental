#!/usr/bin/perl -w
#
# Fink - a package manager that downloads source and installs it
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2002 The Fink Package Manager Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

$| = 1;
require 5.006;  # perl 5.6.0 or newer required
use strict;

use lib "@BASEPATH@/lib/perl5";

### parse options passed on the command line

use Getopt::Long;

my %options =
  (
   "dontask" => 0,
   "interactive" => 0,
   "verbosity" => 0,
  );
my $optionsString = '';

Getopt::Long::Configure(qw(bundling ignore_case require_order));
GetOptions('yes|y' => sub { $options{dontask} = 1 ;  $optionsString .= '--yes ' },
	   'quiet|q' => sub { $options{verbosity} = -1 ;  $optionsString .= '--quiet ' },
	   'verbose|v' => sub { $options{verbosity} = 3 ;  $optionsString .= '--verbose ' },
#	   'interactive|i' => sub { $options{interactive} = 1 ;  $optionsString .= '--interactive ' },
	   'version|V' => \&show_version,
	   'help|h|?' => \&show_help)
 or die "fink: unknown option\nType 'fink --help' for more information.\n";

### display version numbers if requested

sub show_version {
  require Fink::FinkVersion;
  print "Package manager version: ".Fink::FinkVersion::fink_version()."\n";
  print "Distribution version: ".Fink::FinkVersion::distribution_version()."\n";
  exit 0;
}

### display usage if requested

sub show_help {
  require Fink::FinkVersion;
  my $version = Fink::FinkVersion::fink_version();

  print <<"EOF";
Fink $version, Copyright (c) 2001,2002 Christoph Pfisterer and others.
This is free software, distributed under the GNU General Public License.
Read @BASEPATH@/share/doc/fink/COPYING for details.

Fink is a package manager that automatically downloads, configures, compiles
and installs packages using the original source code. If you want to install
precompiled binary packages, check out dselect or apt-get instead.

Usage: fink [options] command [package...]
       fink install pkg1 [pkg2 ...]

Common commmands:
  install    - install/update the named packages
  remove     - remove the named packages
  update     - update the named packages
  selfupdate - upgrade fink to the lastest release
  update-all - update all installed packages
  configure  - rerun the configuration process
  list       - list available packages, optionally filtering by name
  apropos    - list packages matching a search keyword
  describe   - display a detailed description of the named packages
  index      - force rebuild of package cache

Options:
  -H, -?, --help - display this help text
  -q, --quiet    - causes fink to be less verbose, opposite of --verbose
  -V, --version  - display version information
  -v, --verbose  - causes fink to be more verbose, opposite of --quiet
  -y, --yes      - assume default answer for all interactive questions

See the fink(8) manual page for more commands and options.
Visit http://fink.sourceforge.net/ for further information.
EOF
  exit 0;
}

### setup environment

# set useful umask
umask oct("022");

# set PATH so we find dpkg and *-config scripts
$ENV{PATH} = "@BASEPATH@/sbin:@BASEPATH@/bin:/usr/sbin:/sbin:/usr/X11R6/bin:".$ENV{PATH};

# get rid of CDPATH
delete $ENV{CDPATH};

### now load the actual engine

# load the modules
require Fink::Services;
require Fink::Config;
require Fink::Engine;

# read the configuration file
my ($config, $configpath);
$configpath = "@BASEPATH@/etc/fink.conf";
if (-f $configpath) {
  $config = &Fink::Services::read_config($configpath);
} else {
  print "ERROR: Configuration file \"$configpath\" not found.\n";
  exit 1;
}

# propagate command-line options
Fink::Config::set_options(\%options);

# create the command-processing engine
my $engine = Fink::Engine->new_with_config($config);

### process the command line (or enter interactive mode)

if ($#ARGV >= 0) {
  $engine->process($optionsString,@ARGV);
} else {
  # TODO: enter interactive mode
#  die "fink: no command given.\nType 'fink --help' for usage information.\n";
    show_help
}

### eof
exit 0;
